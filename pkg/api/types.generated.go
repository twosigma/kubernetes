/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [25]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq101[24] = x.VolumeSource.PortworxVolume != nil && x.PortworxVolume != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(25)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.PortworxVolume == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr101 || yy2arr101 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[24] {
						if x.PortworxVolume == nil {
							r.EncodeNil()
						} else {
							x.PortworxVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("portworxVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.PortworxVolume == nil {
							r.EncodeNil()
						} else {
							x.PortworxVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym129 := z.DecBinary()
	_ = yym129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct130 := r.ContainerType()
		if yyct130 == codecSelferValueTypeMap1234 {
			yyl130 := r.ReadMapStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl130, d)
			}
		} else if yyct130 == codecSelferValueTypeArray1234 {
			yyl130 := r.ReadArrayStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys131Slc
	var yyhl131 bool = l >= 0
	for yyj131 := 0; ; yyj131++ {
		if yyhl131 {
			if yyj131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys131Slc = r.DecodeBytes(yys131Slc, true, true)
		yys131 := string(yys131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "portworxVolume":
			if x.VolumeSource.PortworxVolume == nil {
				x.VolumeSource.PortworxVolume = new(PortworxVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PortworxVolume != nil {
					x.PortworxVolume = nil
				}
			} else {
				if x.PortworxVolume == nil {
					x.PortworxVolume = new(PortworxVolumeSource)
				}
				x.PortworxVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys131)
		} // end switch yys131
	} // end for yyj131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PortworxVolume == nil {
		x.VolumeSource.PortworxVolume = new(PortworxVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PortworxVolume != nil {
			x.PortworxVolume = nil
		}
	} else {
		if x.PortworxVolume == nil {
			x.PortworxVolume = new(PortworxVolumeSource)
		}
		x.PortworxVolume.CodecDecodeSelf(d)
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym183 := z.EncBinary()
		_ = yym183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep184 := !z.EncBinary()
			yy2arr184 := z.EncBasicHandle().StructToArray
			var yyq184 [24]bool
			_, _, _ = yysep184, yyq184, yy2arr184
			const yyr184 bool = false
			yyq184[0] = x.HostPath != nil
			yyq184[1] = x.EmptyDir != nil
			yyq184[2] = x.GCEPersistentDisk != nil
			yyq184[3] = x.AWSElasticBlockStore != nil
			yyq184[4] = x.GitRepo != nil
			yyq184[5] = x.Secret != nil
			yyq184[6] = x.NFS != nil
			yyq184[7] = x.ISCSI != nil
			yyq184[8] = x.Glusterfs != nil
			yyq184[9] = x.PersistentVolumeClaim != nil
			yyq184[10] = x.RBD != nil
			yyq184[11] = x.Quobyte != nil
			yyq184[12] = x.FlexVolume != nil
			yyq184[13] = x.Cinder != nil
			yyq184[14] = x.CephFS != nil
			yyq184[15] = x.Flocker != nil
			yyq184[16] = x.DownwardAPI != nil
			yyq184[17] = x.FC != nil
			yyq184[18] = x.AzureFile != nil
			yyq184[19] = x.ConfigMap != nil
			yyq184[20] = x.VsphereVolume != nil
			yyq184[21] = x.AzureDisk != nil
			yyq184[22] = x.PhotonPersistentDisk != nil
			yyq184[23] = x.PortworxVolume != nil
			var yynn184 int
			if yyr184 || yy2arr184 {
				r.EncodeArrayStart(24)
			} else {
				yynn184 = 0
				for _, b := range yyq184 {
					if b {
						yynn184++
					}
				}
				r.EncodeMapStart(yynn184)
				yynn184 = 0
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[23] {
					if x.PortworxVolume == nil {
						r.EncodeNil()
					} else {
						x.PortworxVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("portworxVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PortworxVolume == nil {
						r.EncodeNil()
					} else {
						x.PortworxVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym209 := z.DecBinary()
	_ = yym209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct210 := r.ContainerType()
		if yyct210 == codecSelferValueTypeMap1234 {
			yyl210 := r.ReadMapStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl210, d)
			}
		} else if yyct210 == codecSelferValueTypeArray1234 {
			yyl210 := r.ReadArrayStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys211Slc
	var yyhl211 bool = l >= 0
	for yyj211 := 0; ; yyj211++ {
		if yyhl211 {
			if yyj211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys211Slc = r.DecodeBytes(yys211Slc, true, true)
		yys211 := string(yys211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys211 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "portworxVolume":
			if r.TryDecodeAsNil() {
				if x.PortworxVolume != nil {
					x.PortworxVolume = nil
				}
			} else {
				if x.PortworxVolume == nil {
					x.PortworxVolume = new(PortworxVolumeSource)
				}
				x.PortworxVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys211)
		} // end switch yys211
	} // end for yyj211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj236 int
	var yyb236 bool
	var yyhl236 bool = l >= 0
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PortworxVolume != nil {
			x.PortworxVolume = nil
		}
	} else {
		if x.PortworxVolume == nil {
			x.PortworxVolume = new(PortworxVolumeSource)
		}
		x.PortworxVolume.CodecDecodeSelf(d)
	}
	for {
		yyj236++
		if yyhl236 {
			yyb236 = yyj236 > l
		} else {
			yyb236 = r.CheckBreak()
		}
		if yyb236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym261 := z.EncBinary()
		_ = yym261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep262 := !z.EncBinary()
			yy2arr262 := z.EncBasicHandle().StructToArray
			var yyq262 [18]bool
			_, _, _ = yysep262, yyq262, yy2arr262
			const yyr262 bool = false
			yyq262[0] = x.GCEPersistentDisk != nil
			yyq262[1] = x.AWSElasticBlockStore != nil
			yyq262[2] = x.HostPath != nil
			yyq262[3] = x.Glusterfs != nil
			yyq262[4] = x.NFS != nil
			yyq262[5] = x.RBD != nil
			yyq262[6] = x.Quobyte != nil
			yyq262[7] = x.ISCSI != nil
			yyq262[8] = x.FlexVolume != nil
			yyq262[9] = x.Cinder != nil
			yyq262[10] = x.CephFS != nil
			yyq262[11] = x.FC != nil
			yyq262[12] = x.Flocker != nil
			yyq262[13] = x.AzureFile != nil
			yyq262[14] = x.VsphereVolume != nil
			yyq262[15] = x.AzureDisk != nil
			yyq262[16] = x.PhotonPersistentDisk != nil
			yyq262[17] = x.PortworxVolume != nil
			var yynn262 int
			if yyr262 || yy2arr262 {
				r.EncodeArrayStart(18)
			} else {
				yynn262 = 0
				for _, b := range yyq262 {
					if b {
						yynn262++
					}
				}
				r.EncodeMapStart(yynn262)
				yynn262 = 0
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[17] {
					if x.PortworxVolume == nil {
						r.EncodeNil()
					} else {
						x.PortworxVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("portworxVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PortworxVolume == nil {
						r.EncodeNil()
					} else {
						x.PortworxVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym281 := z.DecBinary()
	_ = yym281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct282 := r.ContainerType()
		if yyct282 == codecSelferValueTypeMap1234 {
			yyl282 := r.ReadMapStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl282, d)
			}
		} else if yyct282 == codecSelferValueTypeArray1234 {
			yyl282 := r.ReadArrayStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys283Slc
	var yyhl283 bool = l >= 0
	for yyj283 := 0; ; yyj283++ {
		if yyhl283 {
			if yyj283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys283Slc = r.DecodeBytes(yys283Slc, true, true)
		yys283 := string(yys283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys283 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "portworxVolume":
			if r.TryDecodeAsNil() {
				if x.PortworxVolume != nil {
					x.PortworxVolume = nil
				}
			} else {
				if x.PortworxVolume == nil {
					x.PortworxVolume = new(PortworxVolumeSource)
				}
				x.PortworxVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys283)
		} // end switch yys283
	} // end for yyj283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PortworxVolume != nil {
			x.PortworxVolume = nil
		}
	} else {
		if x.PortworxVolume == nil {
			x.PortworxVolume = new(PortworxVolumeSource)
		}
		x.PortworxVolume.CodecDecodeSelf(d)
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym321 := z.EncBinary()
		_ = yym321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep322 := !z.EncBinary()
			yy2arr322 := z.EncBasicHandle().StructToArray
			var yyq322 [2]bool
			_, _, _ = yysep322, yyq322, yy2arr322
			const yyr322 bool = false
			yyq322[1] = x.ReadOnly != false
			var yynn322 int
			if yyr322 || yy2arr322 {
				r.EncodeArrayStart(2)
			} else {
				yynn322 = 1
				for _, b := range yyq322 {
					if b {
						yynn322++
					}
				}
				r.EncodeMapStart(yynn322)
				yynn322 = 0
			}
			if yyr322 || yy2arr322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym324 := z.EncBinary()
				_ = yym324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym325 := z.EncBinary()
				_ = yym325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr322 || yy2arr322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq322[1] {
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym328 := z.EncBinary()
					_ = yym328
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr322 || yy2arr322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym329 := z.DecBinary()
	_ = yym329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct330 := r.ContainerType()
		if yyct330 == codecSelferValueTypeMap1234 {
			yyl330 := r.ReadMapStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl330, d)
			}
		} else if yyct330 == codecSelferValueTypeArray1234 {
			yyl330 := r.ReadArrayStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys331Slc
	var yyhl331 bool = l >= 0
	for yyj331 := 0; ; yyj331++ {
		if yyhl331 {
			if yyj331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys331Slc = r.DecodeBytes(yys331Slc, true, true)
		yys331 := string(yys331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys331 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys331)
		} // end switch yys331
	} // end for yyj331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj334 int
	var yyb334 bool
	var yyhl334 bool = l >= 0
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj334++
		if yyhl334 {
			yyb334 = yyj334 > l
		} else {
			yyb334 = r.CheckBreak()
		}
		if yyb334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [5]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Kind != ""
			yyq338[1] = x.APIVersion != ""
			yyq338[2] = true
			yyq338[3] = true
			yyq338[4] = true
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(5)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yy346 := &x.ObjectMeta
					yy346.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy347 := &x.ObjectMeta
					yy347.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[3] {
					yy349 := &x.Spec
					yy349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy350 := &x.Spec
					yy350.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[4] {
					yy352 := &x.Status
					yy352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy353 := &x.Status
					yy353.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct355 := r.ContainerType()
		if yyct355 == codecSelferValueTypeMap1234 {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if yyct355 == codecSelferValueTypeArray1234 {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv359 := &x.ObjectMeta
				yyv359.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv360 := &x.Spec
				yyv360.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv361 := &x.Status
				yyv361.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj362 int
	var yyb362 bool
	var yyhl362 bool = l >= 0
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv365 := &x.ObjectMeta
		yyv365.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv366 := &x.Spec
		yyv366.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv367 := &x.Status
		yyv367.CodecDecodeSelf(d)
	}
	for {
		yyj362++
		if yyhl362 {
			yyb362 = yyj362 > l
		} else {
			yyb362 = r.CheckBreak()
		}
		if yyb362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [22]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq369[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq369[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq369[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq369[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq369[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq369[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq369[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq369[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq369[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq369[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq369[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq369[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq369[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq369[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq369[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq369[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq369[18] = x.PersistentVolumeSource.PortworxVolume != nil && x.PortworxVolume != nil
			yyq369[19] = len(x.AccessModes) != 0
			yyq369[20] = x.ClaimRef != nil
			yyq369[21] = x.PersistentVolumeReclaimPolicy != ""
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(22)
			} else {
				yynn369 = 1
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr369 || yy2arr369 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr369 || yy2arr369 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr369 || yy2arr369 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr369 || yy2arr369 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr369 || yy2arr369 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr369 || yy2arr369 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr369 || yy2arr369 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr369 || yy2arr369 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn379 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn379 = true
				goto LABEL379
			}
		LABEL379:
			if yyr369 || yy2arr369 {
				if yyn379 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn379 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn380 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn380 = true
				goto LABEL380
			}
		LABEL380:
			if yyr369 || yy2arr369 {
				if yyn380 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn380 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn381 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn381 = true
				goto LABEL381
			}
		LABEL381:
			if yyr369 || yy2arr369 {
				if yyn381 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn381 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn382 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr369 || yy2arr369 {
				if yyn382 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn382 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn383 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn383 = true
				goto LABEL383
			}
		LABEL383:
			if yyr369 || yy2arr369 {
				if yyn383 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn383 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn384 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn384 = true
				goto LABEL384
			}
		LABEL384:
			if yyr369 || yy2arr369 {
				if yyn384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn384 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn385 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn385 = true
				goto LABEL385
			}
		LABEL385:
			if yyr369 || yy2arr369 {
				if yyn385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn385 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn386 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn386 = true
				goto LABEL386
			}
		LABEL386:
			if yyr369 || yy2arr369 {
				if yyn386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn386 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn387 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn387 = true
				goto LABEL387
			}
		LABEL387:
			if yyr369 || yy2arr369 {
				if yyn387 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn387 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn388 bool
			if x.PersistentVolumeSource.PortworxVolume == nil {
				yyn388 = true
				goto LABEL388
			}
		LABEL388:
			if yyr369 || yy2arr369 {
				if yyn388 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[18] {
						if x.PortworxVolume == nil {
							r.EncodeNil()
						} else {
							x.PortworxVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("portworxVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn388 {
						r.EncodeNil()
					} else {
						if x.PortworxVolume == nil {
							r.EncodeNil()
						} else {
							x.PortworxVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[19] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym390 := z.EncBinary()
						_ = yym390
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym391 := z.EncBinary()
						_ = yym391
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[20] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[21] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym394 := z.DecBinary()
	_ = yym394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct395 := r.ContainerType()
		if yyct395 == codecSelferValueTypeMap1234 {
			yyl395 := r.ReadMapStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl395, d)
			}
		} else if yyct395 == codecSelferValueTypeArray1234 {
			yyl395 := r.ReadArrayStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys396Slc
	var yyhl396 bool = l >= 0
	for yyj396 := 0; ; yyj396++ {
		if yyhl396 {
			if yyj396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys396Slc = r.DecodeBytes(yys396Slc, true, true)
		yys396 := string(yys396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys396 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv397 := &x.Capacity
				yyv397.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "portworxVolume":
			if x.PersistentVolumeSource.PortworxVolume == nil {
				x.PersistentVolumeSource.PortworxVolume = new(PortworxVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PortworxVolume != nil {
					x.PortworxVolume = nil
				}
			} else {
				if x.PortworxVolume == nil {
					x.PortworxVolume = new(PortworxVolumeSource)
				}
				x.PortworxVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv416 := &x.AccessModes
				yym417 := z.DecBinary()
				_ = yym417
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys396)
		} // end switch yys396
	} // end for yyj396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj420 int
	var yyb420 bool
	var yyhl420 bool = l >= 0
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv421 := &x.Capacity
		yyv421.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PortworxVolume == nil {
		x.PersistentVolumeSource.PortworxVolume = new(PortworxVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PortworxVolume != nil {
			x.PortworxVolume = nil
		}
	} else {
		if x.PortworxVolume == nil {
			x.PortworxVolume = new(PortworxVolumeSource)
		}
		x.PortworxVolume.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv440 := &x.AccessModes
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv440), d)
		}
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj420++
		if yyhl420 {
			yyb420 = yyj420 > l
		} else {
			yyb420 = r.CheckBreak()
		}
		if yyb420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym444 := z.EncBinary()
	_ = yym444
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym446 := z.EncBinary()
		_ = yym446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep447 := !z.EncBinary()
			yy2arr447 := z.EncBasicHandle().StructToArray
			var yyq447 [3]bool
			_, _, _ = yysep447, yyq447, yy2arr447
			const yyr447 bool = false
			yyq447[0] = x.Phase != ""
			yyq447[1] = x.Message != ""
			yyq447[2] = x.Reason != ""
			var yynn447 int
			if yyr447 || yy2arr447 {
				r.EncodeArrayStart(3)
			} else {
				yynn447 = 0
				for _, b := range yyq447 {
					if b {
						yynn447++
					}
				}
				r.EncodeMapStart(yynn447)
				yynn447 = 0
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[2] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym455 := z.DecBinary()
	_ = yym455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct456 := r.ContainerType()
		if yyct456 == codecSelferValueTypeMap1234 {
			yyl456 := r.ReadMapStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl456, d)
			}
		} else if yyct456 == codecSelferValueTypeArray1234 {
			yyl456 := r.ReadArrayStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys457Slc
	var yyhl457 bool = l >= 0
	for yyj457 := 0; ; yyj457++ {
		if yyhl457 {
			if yyj457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys457Slc = r.DecodeBytes(yys457Slc, true, true)
		yys457 := string(yys457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys457 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys457)
		} // end switch yys457
	} // end for yyj457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj461 int
	var yyb461 bool
	var yyhl461 bool = l >= 0
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj461++
		if yyhl461 {
			yyb461 = yyj461 > l
		} else {
			yyb461 = r.CheckBreak()
		}
		if yyb461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym465 := z.EncBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep466 := !z.EncBinary()
			yy2arr466 := z.EncBasicHandle().StructToArray
			var yyq466 [4]bool
			_, _, _ = yysep466, yyq466, yy2arr466
			const yyr466 bool = false
			yyq466[0] = x.Kind != ""
			yyq466[1] = x.APIVersion != ""
			yyq466[2] = true
			var yynn466 int
			if yyr466 || yy2arr466 {
				r.EncodeArrayStart(4)
			} else {
				yynn466 = 1
				for _, b := range yyq466 {
					if b {
						yynn466++
					}
				}
				r.EncodeMapStart(yynn466)
				yynn466 = 0
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[0] {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[1] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[2] {
					yy474 := &x.ListMeta
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else if z.HasExtensions() && z.EncExt(yy474) {
					} else {
						z.EncFallback(yy474)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy476 := &x.ListMeta
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else if z.HasExtensions() && z.EncExt(yy476) {
					} else {
						z.EncFallback(yy476)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv486 := &x.ListMeta
				yym487 := z.DecBinary()
				_ = yym487
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv486) {
				} else {
					z.DecFallback(yyv486, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv488 := &x.Items
				yym489 := z.DecBinary()
				_ = yym489
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv488), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj490 int
	var yyb490 bool
	var yyhl490 bool = l >= 0
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv493 := &x.ListMeta
		yym494 := z.DecBinary()
		_ = yym494
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv493) {
		} else {
			z.DecFallback(yyv493, false)
		}
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv495 := &x.Items
		yym496 := z.DecBinary()
		_ = yym496
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv495), d)
		}
	}
	for {
		yyj490++
		if yyhl490 {
			yyb490 = yyj490 > l
		} else {
			yyb490 = r.CheckBreak()
		}
		if yyb490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym497 := z.EncBinary()
		_ = yym497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep498 := !z.EncBinary()
			yy2arr498 := z.EncBasicHandle().StructToArray
			var yyq498 [5]bool
			_, _, _ = yysep498, yyq498, yy2arr498
			const yyr498 bool = false
			yyq498[0] = x.Kind != ""
			yyq498[1] = x.APIVersion != ""
			yyq498[2] = true
			yyq498[3] = true
			yyq498[4] = true
			var yynn498 int
			if yyr498 || yy2arr498 {
				r.EncodeArrayStart(5)
			} else {
				yynn498 = 0
				for _, b := range yyq498 {
					if b {
						yynn498++
					}
				}
				r.EncodeMapStart(yynn498)
				yynn498 = 0
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[0] {
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[1] {
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[2] {
					yy506 := &x.ObjectMeta
					yy506.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy507 := &x.ObjectMeta
					yy507.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[3] {
					yy509 := &x.Spec
					yy509.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy510 := &x.Spec
					yy510.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[4] {
					yy512 := &x.Status
					yy512.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy513 := &x.Status
					yy513.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym514 := z.DecBinary()
	_ = yym514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct515 := r.ContainerType()
		if yyct515 == codecSelferValueTypeMap1234 {
			yyl515 := r.ReadMapStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl515, d)
			}
		} else if yyct515 == codecSelferValueTypeArray1234 {
			yyl515 := r.ReadArrayStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys516Slc
	var yyhl516 bool = l >= 0
	for yyj516 := 0; ; yyj516++ {
		if yyhl516 {
			if yyj516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys516Slc = r.DecodeBytes(yys516Slc, true, true)
		yys516 := string(yys516Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys516 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv519 := &x.ObjectMeta
				yyv519.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv520 := &x.Spec
				yyv520.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv521 := &x.Status
				yyv521.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys516)
		} // end switch yys516
	} // end for yyj516
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj522 int
	var yyb522 bool
	var yyhl522 bool = l >= 0
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv525 := &x.ObjectMeta
		yyv525.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv526 := &x.Spec
		yyv526.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv527 := &x.Status
		yyv527.CodecDecodeSelf(d)
	}
	for {
		yyj522++
		if yyhl522 {
			yyb522 = yyj522 > l
		} else {
			yyb522 = r.CheckBreak()
		}
		if yyb522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym528 := z.EncBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep529 := !z.EncBinary()
			yy2arr529 := z.EncBasicHandle().StructToArray
			var yyq529 [4]bool
			_, _, _ = yysep529, yyq529, yy2arr529
			const yyr529 bool = false
			yyq529[0] = x.Kind != ""
			yyq529[1] = x.APIVersion != ""
			yyq529[2] = true
			var yynn529 int
			if yyr529 || yy2arr529 {
				r.EncodeArrayStart(4)
			} else {
				yynn529 = 1
				for _, b := range yyq529 {
					if b {
						yynn529++
					}
				}
				r.EncodeMapStart(yynn529)
				yynn529 = 0
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[0] {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[1] {
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[2] {
					yy537 := &x.ListMeta
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else if z.HasExtensions() && z.EncExt(yy537) {
					} else {
						z.EncFallback(yy537)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy539 := &x.ListMeta
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else if z.HasExtensions() && z.EncExt(yy539) {
					} else {
						z.EncFallback(yy539)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv549 := &x.ListMeta
				yym550 := z.DecBinary()
				_ = yym550
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv549) {
				} else {
					z.DecFallback(yyv549, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv551 := &x.Items
				yym552 := z.DecBinary()
				_ = yym552
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv551), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj553 int
	var yyb553 bool
	var yyhl553 bool = l >= 0
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv556 := &x.ListMeta
		yym557 := z.DecBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv556) {
		} else {
			z.DecFallback(yyv556, false)
		}
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv558 := &x.Items
		yym559 := z.DecBinary()
		_ = yym559
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv558), d)
		}
	}
	for {
		yyj553++
		if yyhl553 {
			yyb553 = yyj553 > l
		} else {
			yyb553 = r.CheckBreak()
		}
		if yyb553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym560 := z.EncBinary()
		_ = yym560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep561 := !z.EncBinary()
			yy2arr561 := z.EncBasicHandle().StructToArray
			var yyq561 [4]bool
			_, _, _ = yysep561, yyq561, yy2arr561
			const yyr561 bool = false
			yyq561[0] = len(x.AccessModes) != 0
			yyq561[1] = x.Selector != nil
			yyq561[2] = true
			yyq561[3] = x.VolumeName != ""
			var yynn561 int
			if yyr561 || yy2arr561 {
				r.EncodeArrayStart(4)
			} else {
				yynn561 = 0
				for _, b := range yyq561 {
					if b {
						yynn561++
					}
				}
				r.EncodeMapStart(yynn561)
				yynn561 = 0
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym563 := z.EncBinary()
						_ = yym563
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym564 := z.EncBinary()
						_ = yym564
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym566 := z.EncBinary()
						_ = yym566
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym567 := z.EncBinary()
						_ = yym567
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[2] {
					yy569 := &x.Resources
					yy569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy570 := &x.Resources
					yy570.CodecEncodeSelf(e)
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[3] {
					yym572 := z.EncBinary()
					_ = yym572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym580 := z.DecBinary()
				_ = yym580
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv581 := &x.Resources
				yyv581.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv584 := &x.AccessModes
		yym585 := z.DecBinary()
		_ = yym585
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv584), d)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym587 := z.DecBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv588 := &x.Resources
		yyv588.CodecDecodeSelf(d)
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym590 := z.EncBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep591 := !z.EncBinary()
			yy2arr591 := z.EncBasicHandle().StructToArray
			var yyq591 [3]bool
			_, _, _ = yysep591, yyq591, yy2arr591
			const yyr591 bool = false
			yyq591[0] = x.Phase != ""
			yyq591[1] = len(x.AccessModes) != 0
			yyq591[2] = len(x.Capacity) != 0
			var yynn591 int
			if yyr591 || yy2arr591 {
				r.EncodeArrayStart(3)
			} else {
				yynn591 = 0
				for _, b := range yyq591 {
					if b {
						yynn591++
					}
				}
				r.EncodeMapStart(yynn591)
				yynn591 = 0
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym594 := z.EncBinary()
						_ = yym594
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym595 := z.EncBinary()
						_ = yym595
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct598 := r.ContainerType()
		if yyct598 == codecSelferValueTypeMap1234 {
			yyl598 := r.ReadMapStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl598, d)
			}
		} else if yyct598 == codecSelferValueTypeArray1234 {
			yyl598 := r.ReadArrayStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys599Slc
	var yyhl599 bool = l >= 0
	for yyj599 := 0; ; yyj599++ {
		if yyhl599 {
			if yyj599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys599Slc = r.DecodeBytes(yys599Slc, true, true)
		yys599 := string(yys599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys599 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv601 := &x.AccessModes
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv601), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv603 := &x.Capacity
				yyv603.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys599)
		} // end switch yys599
	} // end for yyj599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj604 int
	var yyb604 bool
	var yyhl604 bool = l >= 0
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv606 := &x.AccessModes
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv606), d)
		}
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv608 := &x.Capacity
		yyv608.CodecDecodeSelf(d)
	}
	for {
		yyj604++
		if yyhl604 {
			yyb604 = yyj604 > l
		} else {
			yyb604 = r.CheckBreak()
		}
		if yyb604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym609 := z.EncBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym610 := z.DecBinary()
	_ = yym610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym611 := z.EncBinary()
	_ = yym611
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym612 := z.DecBinary()
	_ = yym612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym613 := z.EncBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [1]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(1)
			} else {
				yynn616 = 1
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym619 := z.EncBinary()
				_ = yym619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym620 := z.DecBinary()
	_ = yym620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct621 := r.ContainerType()
		if yyct621 == codecSelferValueTypeMap1234 {
			yyl621 := r.ReadMapStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl621, d)
			}
		} else if yyct621 == codecSelferValueTypeArray1234 {
			yyl621 := r.ReadArrayStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys622Slc
	var yyhl622 bool = l >= 0
	for yyj622 := 0; ; yyj622++ {
		if yyhl622 {
			if yyj622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys622Slc = r.DecodeBytes(yys622Slc, true, true)
		yys622 := string(yys622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys622 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys622)
		} // end switch yys622
	} // end for yyj622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj624 int
	var yyb624 bool
	var yyhl624 bool = l >= 0
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj624++
		if yyhl624 {
			yyb624 = yyj624 > l
		} else {
			yyb624 = r.CheckBreak()
		}
		if yyb624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym626 := z.EncBinary()
		_ = yym626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep627 := !z.EncBinary()
			yy2arr627 := z.EncBasicHandle().StructToArray
			var yyq627 [1]bool
			_, _, _ = yysep627, yyq627, yy2arr627
			const yyr627 bool = false
			yyq627[0] = x.Medium != ""
			var yynn627 int
			if yyr627 || yy2arr627 {
				r.EncodeArrayStart(1)
			} else {
				yynn627 = 0
				for _, b := range yyq627 {
					if b {
						yynn627++
					}
				}
				r.EncodeMapStart(yynn627)
				yynn627 = 0
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct630 := r.ContainerType()
		if yyct630 == codecSelferValueTypeMap1234 {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if yyct630 == codecSelferValueTypeArray1234 {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys631 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym635 := z.EncBinary()
	_ = yym635
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym636 := z.DecBinary()
	_ = yym636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym637 := z.EncBinary()
	_ = yym637
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym638 := z.DecBinary()
	_ = yym638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym639 := z.EncBinary()
		_ = yym639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep640 := !z.EncBinary()
			yy2arr640 := z.EncBasicHandle().StructToArray
			var yyq640 [4]bool
			_, _, _ = yysep640, yyq640, yy2arr640
			const yyr640 bool = false
			yyq640[1] = x.FSType != ""
			yyq640[2] = x.Partition != 0
			yyq640[3] = x.ReadOnly != false
			var yynn640 int
			if yyr640 || yy2arr640 {
				r.EncodeArrayStart(4)
			} else {
				yynn640 = 1
				for _, b := range yyq640 {
					if b {
						yynn640++
					}
				}
				r.EncodeMapStart(yynn640)
				yynn640 = 0
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[1] {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[2] {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq640[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[3] {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq640[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym653 := z.DecBinary()
	_ = yym653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct654 := r.ContainerType()
		if yyct654 == codecSelferValueTypeMap1234 {
			yyl654 := r.ReadMapStart()
			if yyl654 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl654, d)
			}
		} else if yyct654 == codecSelferValueTypeArray1234 {
			yyl654 := r.ReadArrayStart()
			if yyl654 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys655Slc
	var yyhl655 bool = l >= 0
	for yyj655 := 0; ; yyj655++ {
		if yyhl655 {
			if yyj655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys655Slc = r.DecodeBytes(yys655Slc, true, true)
		yys655 := string(yys655Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys655 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys655)
		} // end switch yys655
	} // end for yyj655
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj660 int
	var yyb660 bool
	var yyhl660 bool = l >= 0
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj660++
		if yyhl660 {
			yyb660 = yyj660 > l
		} else {
			yyb660 = r.CheckBreak()
		}
		if yyb660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [6]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[0] = x.TargetPortal != ""
			yyq666[1] = x.IQN != ""
			yyq666[2] = x.Lun != 0
			yyq666[3] = x.ISCSIInterface != ""
			yyq666[4] = x.FSType != ""
			yyq666[5] = x.ReadOnly != false
			var yynn666 int
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(6)
			} else {
				yynn666 = 0
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
				yynn666 = 0
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[0] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[1] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[2] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[3] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[4] {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[5] {
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym685 := z.DecBinary()
	_ = yym685
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct686 := r.ContainerType()
		if yyct686 == codecSelferValueTypeMap1234 {
			yyl686 := r.ReadMapStart()
			if yyl686 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl686, d)
			}
		} else if yyct686 == codecSelferValueTypeArray1234 {
			yyl686 := r.ReadArrayStart()
			if yyl686 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl686, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys687Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys687Slc
	var yyhl687 bool = l >= 0
	for yyj687 := 0; ; yyj687++ {
		if yyhl687 {
			if yyj687 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys687Slc = r.DecodeBytes(yys687Slc, true, true)
		yys687 := string(yys687Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys687 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys687)
		} // end switch yys687
	} // end for yyj687
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj694 int
	var yyb694 bool
	var yyhl694 bool = l >= 0
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj694++
		if yyhl694 {
			yyb694 = yyj694 > l
		} else {
			yyb694 = r.CheckBreak()
		}
		if yyb694 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj694-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym701 := z.EncBinary()
		_ = yym701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep702 := !z.EncBinary()
			yy2arr702 := z.EncBasicHandle().StructToArray
			var yyq702 [4]bool
			_, _, _ = yysep702, yyq702, yy2arr702
			const yyr702 bool = false
			yyq702[2] = x.FSType != ""
			yyq702[3] = x.ReadOnly != false
			var yynn702 int
			if yyr702 || yy2arr702 {
				r.EncodeArrayStart(4)
			} else {
				yynn702 = 2
				for _, b := range yyq702 {
					if b {
						yynn702++
					}
				}
				r.EncodeMapStart(yynn702)
				yynn702 = 0
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy707 := *x.Lun
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeInt(int64(yy707))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy709 := *x.Lun
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeInt(int64(yy709))
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq702[2] {
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq702[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym713 := z.EncBinary()
					_ = yym713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq702[3] {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq702[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym717 := z.DecBinary()
	_ = yym717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct718 := r.ContainerType()
		if yyct718 == codecSelferValueTypeMap1234 {
			yyl718 := r.ReadMapStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl718, d)
			}
		} else if yyct718 == codecSelferValueTypeArray1234 {
			yyl718 := r.ReadArrayStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys719Slc
	var yyhl719 bool = l >= 0
	for yyj719 := 0; ; yyj719++ {
		if yyhl719 {
			if yyj719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys719Slc = r.DecodeBytes(yys719Slc, true, true)
		yys719 := string(yys719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys719 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv720 := &x.TargetWWNs
				yym721 := z.DecBinary()
				_ = yym721
				if false {
				} else {
					z.F.DecSliceStringX(yyv720, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym723 := z.DecBinary()
				_ = yym723
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys719)
		} // end switch yys719
	} // end for yyj719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj726 int
	var yyb726 bool
	var yyhl726 bool = l >= 0
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv727 := &x.TargetWWNs
		yym728 := z.DecBinary()
		_ = yym728
		if false {
		} else {
			z.F.DecSliceStringX(yyv727, false, d)
		}
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym730 := z.DecBinary()
		_ = yym730
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj726++
		if yyhl726 {
			yyb726 = yyj726 > l
		} else {
			yyb726 = r.CheckBreak()
		}
		if yyb726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym733 := z.EncBinary()
		_ = yym733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep734 := !z.EncBinary()
			yy2arr734 := z.EncBasicHandle().StructToArray
			var yyq734 [5]bool
			_, _, _ = yysep734, yyq734, yy2arr734
			const yyr734 bool = false
			yyq734[1] = x.FSType != ""
			yyq734[2] = x.SecretRef != nil
			yyq734[3] = x.ReadOnly != false
			yyq734[4] = len(x.Options) != 0
			var yynn734 int
			if yyr734 || yy2arr734 {
				r.EncodeArrayStart(5)
			} else {
				yynn734 = 1
				for _, b := range yyq734 {
					if b {
						yynn734++
					}
				}
				r.EncodeMapStart(yynn734)
				yynn734 = 0
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym737 := z.EncBinary()
				_ = yym737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[1] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq734[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq734[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[3] {
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq734[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym746 := z.EncBinary()
						_ = yym746
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq734[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym747 := z.EncBinary()
						_ = yym747
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym748 := z.DecBinary()
	_ = yym748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct749 := r.ContainerType()
		if yyct749 == codecSelferValueTypeMap1234 {
			yyl749 := r.ReadMapStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl749, d)
			}
		} else if yyct749 == codecSelferValueTypeArray1234 {
			yyl749 := r.ReadArrayStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys750Slc
	var yyhl750 bool = l >= 0
	for yyj750 := 0; ; yyj750++ {
		if yyhl750 {
			if yyj750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys750Slc = r.DecodeBytes(yys750Slc, true, true)
		yys750 := string(yys750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys750 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv755 := &x.Options
				yym756 := z.DecBinary()
				_ = yym756
				if false {
				} else {
					z.F.DecMapStringStringX(yyv755, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys750)
		} // end switch yys750
	} // end for yyj750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj757 int
	var yyb757 bool
	var yyhl757 bool = l >= 0
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv762 := &x.Options
		yym763 := z.DecBinary()
		_ = yym763
		if false {
		} else {
			z.F.DecMapStringStringX(yyv762, false, d)
		}
	}
	for {
		yyj757++
		if yyhl757 {
			yyb757 = yyj757 > l
		} else {
			yyb757 = r.CheckBreak()
		}
		if yyb757 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj757-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym764 := z.EncBinary()
		_ = yym764
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep765 := !z.EncBinary()
			yy2arr765 := z.EncBasicHandle().StructToArray
			var yyq765 [4]bool
			_, _, _ = yysep765, yyq765, yy2arr765
			const yyr765 bool = false
			yyq765[1] = x.FSType != ""
			yyq765[2] = x.Partition != 0
			yyq765[3] = x.ReadOnly != false
			var yynn765 int
			if yyr765 || yy2arr765 {
				r.EncodeArrayStart(4)
			} else {
				yynn765 = 1
				for _, b := range yyq765 {
					if b {
						yynn765++
					}
				}
				r.EncodeMapStart(yynn765)
				yynn765 = 0
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym768 := z.EncBinary()
				_ = yym768
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[1] {
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq765[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[2] {
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq765[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[3] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq765[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym778 := z.DecBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct779 := r.ContainerType()
		if yyct779 == codecSelferValueTypeMap1234 {
			yyl779 := r.ReadMapStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl779, d)
			}
		} else if yyct779 == codecSelferValueTypeArray1234 {
			yyl779 := r.ReadArrayStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys780Slc
	var yyhl780 bool = l >= 0
	for yyj780 := 0; ; yyj780++ {
		if yyhl780 {
			if yyj780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys780Slc = r.DecodeBytes(yys780Slc, true, true)
		yys780 := string(yys780Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys780 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys780)
		} // end switch yys780
	} // end for yyj780
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj785 int
	var yyb785 bool
	var yyhl785 bool = l >= 0
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj785++
		if yyhl785 {
			yyb785 = yyj785 > l
		} else {
			yyb785 = r.CheckBreak()
		}
		if yyb785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym790 := z.EncBinary()
		_ = yym790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep791 := !z.EncBinary()
			yy2arr791 := z.EncBasicHandle().StructToArray
			var yyq791 [3]bool
			_, _, _ = yysep791, yyq791, yy2arr791
			const yyr791 bool = false
			yyq791[1] = x.Revision != ""
			yyq791[2] = x.Directory != ""
			var yynn791 int
			if yyr791 || yy2arr791 {
				r.EncodeArrayStart(3)
			} else {
				yynn791 = 1
				for _, b := range yyq791 {
					if b {
						yynn791++
					}
				}
				r.EncodeMapStart(yynn791)
				yynn791 = 0
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym793 := z.EncBinary()
				_ = yym793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym794 := z.EncBinary()
				_ = yym794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[1] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq791[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[2] {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq791[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym801 := z.DecBinary()
	_ = yym801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct802 := r.ContainerType()
		if yyct802 == codecSelferValueTypeMap1234 {
			yyl802 := r.ReadMapStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl802, d)
			}
		} else if yyct802 == codecSelferValueTypeArray1234 {
			yyl802 := r.ReadArrayStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys803Slc
	var yyhl803 bool = l >= 0
	for yyj803 := 0; ; yyj803++ {
		if yyhl803 {
			if yyj803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys803Slc = r.DecodeBytes(yys803Slc, true, true)
		yys803 := string(yys803Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys803 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys803)
		} // end switch yys803
	} // end for yyj803
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj807 int
	var yyb807 bool
	var yyhl807 bool = l >= 0
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj807++
		if yyhl807 {
			yyb807 = yyj807 > l
		} else {
			yyb807 = r.CheckBreak()
		}
		if yyb807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym811 := z.EncBinary()
		_ = yym811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep812 := !z.EncBinary()
			yy2arr812 := z.EncBasicHandle().StructToArray
			var yyq812 [3]bool
			_, _, _ = yysep812, yyq812, yy2arr812
			const yyr812 bool = false
			yyq812[0] = x.SecretName != ""
			yyq812[1] = len(x.Items) != 0
			yyq812[2] = x.DefaultMode != nil
			var yynn812 int
			if yyr812 || yy2arr812 {
				r.EncodeArrayStart(3)
			} else {
				yynn812 = 0
				for _, b := range yyq812 {
					if b {
						yynn812++
					}
				}
				r.EncodeMapStart(yynn812)
				yynn812 = 0
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq812[0] {
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq812[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq812[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym817 := z.EncBinary()
						_ = yym817
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq812[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym818 := z.EncBinary()
						_ = yym818
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq812[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy820 := *x.DefaultMode
						yym821 := z.EncBinary()
						_ = yym821
						if false {
						} else {
							r.EncodeInt(int64(yy820))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy822 := *x.DefaultMode
						yym823 := z.EncBinary()
						_ = yym823
						if false {
						} else {
							r.EncodeInt(int64(yy822))
						}
					}
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym824 := z.DecBinary()
	_ = yym824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct825 := r.ContainerType()
		if yyct825 == codecSelferValueTypeMap1234 {
			yyl825 := r.ReadMapStart()
			if yyl825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl825, d)
			}
		} else if yyct825 == codecSelferValueTypeArray1234 {
			yyl825 := r.ReadArrayStart()
			if yyl825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys826Slc
	var yyhl826 bool = l >= 0
	for yyj826 := 0; ; yyj826++ {
		if yyhl826 {
			if yyj826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys826Slc = r.DecodeBytes(yys826Slc, true, true)
		yys826 := string(yys826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys826 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv828 := &x.Items
				yym829 := z.DecBinary()
				_ = yym829
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv828), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym831 := z.DecBinary()
				_ = yym831
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys826)
		} // end switch yys826
	} // end for yyj826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj832 int
	var yyb832 bool
	var yyhl832 bool = l >= 0
	yyj832++
	if yyhl832 {
		yyb832 = yyj832 > l
	} else {
		yyb832 = r.CheckBreak()
	}
	if yyb832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj832++
	if yyhl832 {
		yyb832 = yyj832 > l
	} else {
		yyb832 = r.CheckBreak()
	}
	if yyb832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv834 := &x.Items
		yym835 := z.DecBinary()
		_ = yym835
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv834), d)
		}
	}
	yyj832++
	if yyhl832 {
		yyb832 = yyj832 > l
	} else {
		yyb832 = r.CheckBreak()
	}
	if yyb832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym837 := z.DecBinary()
		_ = yym837
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj832++
		if yyhl832 {
			yyb832 = yyj832 > l
		} else {
			yyb832 = r.CheckBreak()
		}
		if yyb832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym838 := z.EncBinary()
		_ = yym838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep839 := !z.EncBinary()
			yy2arr839 := z.EncBasicHandle().StructToArray
			var yyq839 [3]bool
			_, _, _ = yysep839, yyq839, yy2arr839
			const yyr839 bool = false
			yyq839[2] = x.ReadOnly != false
			var yynn839 int
			if yyr839 || yy2arr839 {
				r.EncodeArrayStart(3)
			} else {
				yynn839 = 2
				for _, b := range yyq839 {
					if b {
						yynn839++
					}
				}
				r.EncodeMapStart(yynn839)
				yynn839 = 0
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym844 := z.EncBinary()
				_ = yym844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym845 := z.EncBinary()
				_ = yym845
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq839[2] {
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym849 := z.DecBinary()
	_ = yym849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct850 := r.ContainerType()
		if yyct850 == codecSelferValueTypeMap1234 {
			yyl850 := r.ReadMapStart()
			if yyl850 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl850, d)
			}
		} else if yyct850 == codecSelferValueTypeArray1234 {
			yyl850 := r.ReadArrayStart()
			if yyl850 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl850, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys851Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys851Slc
	var yyhl851 bool = l >= 0
	for yyj851 := 0; ; yyj851++ {
		if yyhl851 {
			if yyj851 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys851Slc = r.DecodeBytes(yys851Slc, true, true)
		yys851 := string(yys851Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys851 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys851)
		} // end switch yys851
	} // end for yyj851
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj855 int
	var yyb855 bool
	var yyhl855 bool = l >= 0
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj855++
		if yyhl855 {
			yyb855 = yyj855 > l
		} else {
			yyb855 = r.CheckBreak()
		}
		if yyb855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym859 := z.EncBinary()
		_ = yym859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep860 := !z.EncBinary()
			yy2arr860 := z.EncBasicHandle().StructToArray
			var yyq860 [5]bool
			_, _, _ = yysep860, yyq860, yy2arr860
			const yyr860 bool = false
			yyq860[2] = x.ReadOnly != false
			yyq860[3] = x.User != ""
			yyq860[4] = x.Group != ""
			var yynn860 int
			if yyr860 || yy2arr860 {
				r.EncodeArrayStart(5)
			} else {
				yynn860 = 2
				for _, b := range yyq860 {
					if b {
						yynn860++
					}
				}
				r.EncodeMapStart(yynn860)
				yynn860 = 0
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym863 := z.EncBinary()
				_ = yym863
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym866 := z.EncBinary()
				_ = yym866
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[2] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq860[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[3] {
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[4] {
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym876 := z.DecBinary()
	_ = yym876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct877 := r.ContainerType()
		if yyct877 == codecSelferValueTypeMap1234 {
			yyl877 := r.ReadMapStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl877, d)
			}
		} else if yyct877 == codecSelferValueTypeArray1234 {
			yyl877 := r.ReadArrayStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys878Slc
	var yyhl878 bool = l >= 0
	for yyj878 := 0; ; yyj878++ {
		if yyhl878 {
			if yyj878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys878Slc = r.DecodeBytes(yys878Slc, true, true)
		yys878 := string(yys878Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys878 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys878)
		} // end switch yys878
	} // end for yyj878
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj884 int
	var yyb884 bool
	var yyhl884 bool = l >= 0
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj884++
		if yyhl884 {
			yyb884 = yyj884 > l
		} else {
			yyb884 = r.CheckBreak()
		}
		if yyb884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym890 := z.EncBinary()
		_ = yym890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep891 := !z.EncBinary()
			yy2arr891 := z.EncBasicHandle().StructToArray
			var yyq891 [3]bool
			_, _, _ = yysep891, yyq891, yy2arr891
			const yyr891 bool = false
			yyq891[2] = x.ReadOnly != false
			var yynn891 int
			if yyr891 || yy2arr891 {
				r.EncodeArrayStart(3)
			} else {
				yynn891 = 2
				for _, b := range yyq891 {
					if b {
						yynn891++
					}
				}
				r.EncodeMapStart(yynn891)
				yynn891 = 0
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym894 := z.EncBinary()
				_ = yym894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym896 := z.EncBinary()
				_ = yym896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym897 := z.EncBinary()
				_ = yym897
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[2] {
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym901 := z.DecBinary()
	_ = yym901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct902 := r.ContainerType()
		if yyct902 == codecSelferValueTypeMap1234 {
			yyl902 := r.ReadMapStart()
			if yyl902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl902, d)
			}
		} else if yyct902 == codecSelferValueTypeArray1234 {
			yyl902 := r.ReadArrayStart()
			if yyl902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys903Slc
	var yyhl903 bool = l >= 0
	for yyj903 := 0; ; yyj903++ {
		if yyhl903 {
			if yyj903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys903Slc = r.DecodeBytes(yys903Slc, true, true)
		yys903 := string(yys903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys903 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys903)
		} // end switch yys903
	} // end for yyj903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym911 := z.EncBinary()
		_ = yym911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep912 := !z.EncBinary()
			yy2arr912 := z.EncBasicHandle().StructToArray
			var yyq912 [8]bool
			_, _, _ = yysep912, yyq912, yy2arr912
			const yyr912 bool = false
			yyq912[2] = x.FSType != ""
			yyq912[3] = x.RBDPool != ""
			yyq912[4] = x.RadosUser != ""
			yyq912[5] = x.Keyring != ""
			yyq912[6] = x.SecretRef != nil
			yyq912[7] = x.ReadOnly != false
			var yynn912 int
			if yyr912 || yy2arr912 {
				r.EncodeArrayStart(8)
			} else {
				yynn912 = 2
				for _, b := range yyq912 {
					if b {
						yynn912++
					}
				}
				r.EncodeMapStart(yynn912)
				yynn912 = 0
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym918 := z.EncBinary()
				_ = yym918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[2] {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[3] {
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[4] {
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[5] {
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq912[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[7] {
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq912[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym935 := z.DecBinary()
	_ = yym935
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct936 := r.ContainerType()
		if yyct936 == codecSelferValueTypeMap1234 {
			yyl936 := r.ReadMapStart()
			if yyl936 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl936, d)
			}
		} else if yyct936 == codecSelferValueTypeArray1234 {
			yyl936 := r.ReadArrayStart()
			if yyl936 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl936, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys937Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys937Slc
	var yyhl937 bool = l >= 0
	for yyj937 := 0; ; yyj937++ {
		if yyhl937 {
			if yyj937 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys937Slc = r.DecodeBytes(yys937Slc, true, true)
		yys937 := string(yys937Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys937 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv938 := &x.CephMonitors
				yym939 := z.DecBinary()
				_ = yym939
				if false {
				} else {
					z.F.DecSliceStringX(yyv938, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys937)
		} // end switch yys937
	} // end for yyj937
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj947 int
	var yyb947 bool
	var yyhl947 bool = l >= 0
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv948 := &x.CephMonitors
		yym949 := z.DecBinary()
		_ = yym949
		if false {
		} else {
			z.F.DecSliceStringX(yyv948, false, d)
		}
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj947++
		if yyhl947 {
			yyb947 = yyj947 > l
		} else {
			yyb947 = r.CheckBreak()
		}
		if yyb947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [3]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[1] = x.FSType != ""
			yyq958[2] = x.ReadOnly != false
			var yynn958 int
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(3)
			} else {
				yynn958 = 1
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
				yynn958 = 0
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym961 := z.EncBinary()
				_ = yym961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[1] {
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[2] {
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct969 := r.ContainerType()
		if yyct969 == codecSelferValueTypeMap1234 {
			yyl969 := r.ReadMapStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl969, d)
			}
		} else if yyct969 == codecSelferValueTypeArray1234 {
			yyl969 := r.ReadArrayStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys970Slc
	var yyhl970 bool = l >= 0
	for yyj970 := 0; ; yyj970++ {
		if yyhl970 {
			if yyj970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys970Slc = r.DecodeBytes(yys970Slc, true, true)
		yys970 := string(yys970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys970 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys970)
		} // end switch yys970
	} // end for yyj970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj974 int
	var yyb974 bool
	var yyhl974 bool = l >= 0
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj974++
		if yyhl974 {
			yyb974 = yyj974 > l
		} else {
			yyb974 = r.CheckBreak()
		}
		if yyb974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [6]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			yyq979[1] = x.Path != ""
			yyq979[2] = x.User != ""
			yyq979[3] = x.SecretFile != ""
			yyq979[4] = x.SecretRef != nil
			yyq979[5] = x.ReadOnly != false
			var yynn979 int
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(6)
			} else {
				yynn979 = 1
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
				yynn979 = 0
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym982 := z.EncBinary()
					_ = yym982
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[1] {
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq979[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[2] {
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq979[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[3] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq979[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[5] {
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq979[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct997 := r.ContainerType()
		if yyct997 == codecSelferValueTypeMap1234 {
			yyl997 := r.ReadMapStart()
			if yyl997 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl997, d)
			}
		} else if yyct997 == codecSelferValueTypeArray1234 {
			yyl997 := r.ReadArrayStart()
			if yyl997 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl997, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys998Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys998Slc
	var yyhl998 bool = l >= 0
	for yyj998 := 0; ; yyj998++ {
		if yyhl998 {
			if yyj998 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys998Slc = r.DecodeBytes(yys998Slc, true, true)
		yys998 := string(yys998Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys998 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv999 := &x.Monitors
				yym1000 := z.DecBinary()
				_ = yym1000
				if false {
				} else {
					z.F.DecSliceStringX(yyv999, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys998)
		} // end switch yys998
	} // end for yyj998
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1006 int
	var yyb1006 bool
	var yyhl1006 bool = l >= 0
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv1007 := &x.Monitors
		yym1008 := z.DecBinary()
		_ = yym1008
		if false {
		} else {
			z.F.DecSliceStringX(yyv1007, false, d)
		}
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1006++
		if yyhl1006 {
			yyb1006 = yyj1006 > l
		} else {
			yyb1006 = r.CheckBreak()
		}
		if yyb1006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1014 := z.EncBinary()
		_ = yym1014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1015 := !z.EncBinary()
			yy2arr1015 := z.EncBasicHandle().StructToArray
			var yyq1015 [2]bool
			_, _, _ = yysep1015, yyq1015, yy2arr1015
			const yyr1015 bool = false
			yyq1015[0] = x.DatasetName != ""
			yyq1015[1] = x.DatasetUUID != ""
			var yynn1015 int
			if yyr1015 || yy2arr1015 {
				r.EncodeArrayStart(2)
			} else {
				yynn1015 = 0
				for _, b := range yyq1015 {
					if b {
						yynn1015++
					}
				}
				r.EncodeMapStart(yynn1015)
				yynn1015 = 0
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1015[0] {
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1015[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1015[1] {
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1015[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1022 := z.DecBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1023 := r.ContainerType()
		if yyct1023 == codecSelferValueTypeMap1234 {
			yyl1023 := r.ReadMapStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1023, d)
			}
		} else if yyct1023 == codecSelferValueTypeArray1234 {
			yyl1023 := r.ReadArrayStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1024Slc
	var yyhl1024 bool = l >= 0
	for yyj1024 := 0; ; yyj1024++ {
		if yyhl1024 {
			if yyj1024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1024Slc = r.DecodeBytes(yys1024Slc, true, true)
		yys1024 := string(yys1024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1024 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1024)
		} // end switch yys1024
	} // end for yyj1024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1027 int
	var yyb1027 bool
	var yyhl1027 bool = l >= 0
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj1027++
		if yyhl1027 {
			yyb1027 = yyj1027 > l
		} else {
			yyb1027 = r.CheckBreak()
		}
		if yyb1027 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1027-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1030 := z.EncBinary()
		_ = yym1030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1031 := !z.EncBinary()
			yy2arr1031 := z.EncBasicHandle().StructToArray
			var yyq1031 [2]bool
			_, _, _ = yysep1031, yyq1031, yy2arr1031
			const yyr1031 bool = false
			yyq1031[0] = len(x.Items) != 0
			yyq1031[1] = x.DefaultMode != nil
			var yynn1031 int
			if yyr1031 || yy2arr1031 {
				r.EncodeArrayStart(2)
			} else {
				yynn1031 = 0
				for _, b := range yyq1031 {
					if b {
						yynn1031++
					}
				}
				r.EncodeMapStart(yynn1031)
				yynn1031 = 0
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1034 := z.EncBinary()
						_ = yym1034
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1036 := *x.DefaultMode
						yym1037 := z.EncBinary()
						_ = yym1037
						if false {
						} else {
							r.EncodeInt(int64(yy1036))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1038 := *x.DefaultMode
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							r.EncodeInt(int64(yy1038))
						}
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1040 := z.DecBinary()
	_ = yym1040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1041 := r.ContainerType()
		if yyct1041 == codecSelferValueTypeMap1234 {
			yyl1041 := r.ReadMapStart()
			if yyl1041 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1041, d)
			}
		} else if yyct1041 == codecSelferValueTypeArray1234 {
			yyl1041 := r.ReadArrayStart()
			if yyl1041 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1042Slc
	var yyhl1042 bool = l >= 0
	for yyj1042 := 0; ; yyj1042++ {
		if yyhl1042 {
			if yyj1042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1042Slc = r.DecodeBytes(yys1042Slc, true, true)
		yys1042 := string(yys1042Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1042 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1043 := &x.Items
				yym1044 := z.DecBinary()
				_ = yym1044
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1043), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1046 := z.DecBinary()
				_ = yym1046
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1042)
		} // end switch yys1042
	} // end for yyj1042
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1047 int
	var yyb1047 bool
	var yyhl1047 bool = l >= 0
	yyj1047++
	if yyhl1047 {
		yyb1047 = yyj1047 > l
	} else {
		yyb1047 = r.CheckBreak()
	}
	if yyb1047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1048 := &x.Items
		yym1049 := z.DecBinary()
		_ = yym1049
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1048), d)
		}
	}
	yyj1047++
	if yyhl1047 {
		yyb1047 = yyj1047 > l
	} else {
		yyb1047 = r.CheckBreak()
	}
	if yyb1047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1051 := z.DecBinary()
		_ = yym1051
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1047++
		if yyhl1047 {
			yyb1047 = yyj1047 > l
		} else {
			yyb1047 = r.CheckBreak()
		}
		if yyb1047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1052 := z.EncBinary()
		_ = yym1052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1053 := !z.EncBinary()
			yy2arr1053 := z.EncBasicHandle().StructToArray
			var yyq1053 [4]bool
			_, _, _ = yysep1053, yyq1053, yy2arr1053
			const yyr1053 bool = false
			yyq1053[1] = x.FieldRef != nil
			yyq1053[2] = x.ResourceFieldRef != nil
			yyq1053[3] = x.Mode != nil
			var yynn1053 int
			if yyr1053 || yy2arr1053 {
				r.EncodeArrayStart(4)
			} else {
				yynn1053 = 1
				for _, b := range yyq1053 {
					if b {
						yynn1053++
					}
				}
				r.EncodeMapStart(yynn1053)
				yynn1053 = 0
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1053[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1053[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1060 := *x.Mode
						yym1061 := z.EncBinary()
						_ = yym1061
						if false {
						} else {
							r.EncodeInt(int64(yy1060))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1053[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1062 := *x.Mode
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							r.EncodeInt(int64(yy1062))
						}
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1064 := z.DecBinary()
	_ = yym1064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1065 := r.ContainerType()
		if yyct1065 == codecSelferValueTypeMap1234 {
			yyl1065 := r.ReadMapStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1065, d)
			}
		} else if yyct1065 == codecSelferValueTypeArray1234 {
			yyl1065 := r.ReadArrayStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1066Slc
	var yyhl1066 bool = l >= 0
	for yyj1066 := 0; ; yyj1066++ {
		if yyhl1066 {
			if yyj1066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1066Slc = r.DecodeBytes(yys1066Slc, true, true)
		yys1066 := string(yys1066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1066 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1066)
		} // end switch yys1066
	} // end for yyj1066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1072 int
	var yyb1072 bool
	var yyhl1072 bool = l >= 0
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1077 := z.DecBinary()
		_ = yym1077
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1072++
		if yyhl1072 {
			yyb1072 = yyj1072 > l
		} else {
			yyb1072 = r.CheckBreak()
		}
		if yyb1072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1078 := z.EncBinary()
		_ = yym1078
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1079 := !z.EncBinary()
			yy2arr1079 := z.EncBasicHandle().StructToArray
			var yyq1079 [3]bool
			_, _, _ = yysep1079, yyq1079, yy2arr1079
			const yyr1079 bool = false
			yyq1079[2] = x.ReadOnly != false
			var yynn1079 int
			if yyr1079 || yy2arr1079 {
				r.EncodeArrayStart(3)
			} else {
				yynn1079 = 2
				for _, b := range yyq1079 {
					if b {
						yynn1079++
					}
				}
				r.EncodeMapStart(yynn1079)
				yynn1079 = 0
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1082 := z.EncBinary()
				_ = yym1082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1084 := z.EncBinary()
				_ = yym1084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[2] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1079[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1089 := z.DecBinary()
	_ = yym1089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1090 := r.ContainerType()
		if yyct1090 == codecSelferValueTypeMap1234 {
			yyl1090 := r.ReadMapStart()
			if yyl1090 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1090, d)
			}
		} else if yyct1090 == codecSelferValueTypeArray1234 {
			yyl1090 := r.ReadArrayStart()
			if yyl1090 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1090, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1091Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1091Slc
	var yyhl1091 bool = l >= 0
	for yyj1091 := 0; ; yyj1091++ {
		if yyhl1091 {
			if yyj1091 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1091Slc = r.DecodeBytes(yys1091Slc, true, true)
		yys1091 := string(yys1091Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1091 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1091)
		} // end switch yys1091
	} // end for yyj1091
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1095 int
	var yyb1095 bool
	var yyhl1095 bool = l >= 0
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1095++
		if yyhl1095 {
			yyb1095 = yyj1095 > l
		} else {
			yyb1095 = r.CheckBreak()
		}
		if yyb1095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1099 := z.EncBinary()
		_ = yym1099
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1100 := !z.EncBinary()
			yy2arr1100 := z.EncBasicHandle().StructToArray
			var yyq1100 [2]bool
			_, _, _ = yysep1100, yyq1100, yy2arr1100
			const yyr1100 bool = false
			yyq1100[1] = x.FSType != ""
			var yynn1100 int
			if yyr1100 || yy2arr1100 {
				r.EncodeArrayStart(2)
			} else {
				yynn1100 = 1
				for _, b := range yyq1100 {
					if b {
						yynn1100++
					}
				}
				r.EncodeMapStart(yynn1100)
				yynn1100 = 0
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1103 := z.EncBinary()
				_ = yym1103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1100[1] {
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1100[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1106 := z.EncBinary()
					_ = yym1106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1107 := z.DecBinary()
	_ = yym1107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1108 := r.ContainerType()
		if yyct1108 == codecSelferValueTypeMap1234 {
			yyl1108 := r.ReadMapStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1108, d)
			}
		} else if yyct1108 == codecSelferValueTypeArray1234 {
			yyl1108 := r.ReadArrayStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1109Slc
	var yyhl1109 bool = l >= 0
	for yyj1109 := 0; ; yyj1109++ {
		if yyhl1109 {
			if yyj1109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1109Slc = r.DecodeBytes(yys1109Slc, true, true)
		yys1109 := string(yys1109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1109 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1109)
		} // end switch yys1109
	} // end for yyj1109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1112 int
	var yyb1112 bool
	var yyhl1112 bool = l >= 0
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1112++
		if yyhl1112 {
			yyb1112 = yyj1112 > l
		} else {
			yyb1112 = r.CheckBreak()
		}
		if yyb1112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1115 := z.EncBinary()
		_ = yym1115
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1116 := !z.EncBinary()
			yy2arr1116 := z.EncBasicHandle().StructToArray
			var yyq1116 [2]bool
			_, _, _ = yysep1116, yyq1116, yy2arr1116
			const yyr1116 bool = false
			yyq1116[1] = x.FSType != ""
			var yynn1116 int
			if yyr1116 || yy2arr1116 {
				r.EncodeArrayStart(2)
			} else {
				yynn1116 = 1
				for _, b := range yyq1116 {
					if b {
						yynn1116++
					}
				}
				r.EncodeMapStart(yynn1116)
				yynn1116 = 0
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1118 := z.EncBinary()
				_ = yym1118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1119 := z.EncBinary()
				_ = yym1119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1116[1] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1116[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1123 := z.DecBinary()
	_ = yym1123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1124 := r.ContainerType()
		if yyct1124 == codecSelferValueTypeMap1234 {
			yyl1124 := r.ReadMapStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1124, d)
			}
		} else if yyct1124 == codecSelferValueTypeArray1234 {
			yyl1124 := r.ReadArrayStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1125Slc
	var yyhl1125 bool = l >= 0
	for yyj1125 := 0; ; yyj1125++ {
		if yyhl1125 {
			if yyj1125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1125Slc = r.DecodeBytes(yys1125Slc, true, true)
		yys1125 := string(yys1125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1125 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1125)
		} // end switch yys1125
	} // end for yyj1125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1128 int
	var yyb1128 bool
	var yyhl1128 bool = l >= 0
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1128++
		if yyhl1128 {
			yyb1128 = yyj1128 > l
		} else {
			yyb1128 = r.CheckBreak()
		}
		if yyb1128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PortworxVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1131 := z.EncBinary()
		_ = yym1131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1132 := !z.EncBinary()
			yy2arr1132 := z.EncBasicHandle().StructToArray
			var yyq1132 [3]bool
			_, _, _ = yysep1132, yyq1132, yy2arr1132
			const yyr1132 bool = false
			var yynn1132 int
			if yyr1132 || yy2arr1132 {
				r.EncodeArrayStart(3)
			} else {
				yynn1132 = 3
				for _, b := range yyq1132 {
					if b {
						yynn1132++
					}
				}
				r.EncodeMapStart(yynn1132)
				yynn1132 = 0
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1134 := z.EncBinary()
				_ = yym1134
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("VolumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1137 := z.EncBinary()
				_ = yym1137
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FSType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1138 := z.EncBinary()
				_ = yym1138
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1140 := z.EncBinary()
				_ = yym1140
				if false {
				} else {
					r.EncodeBool(bool(x.ReadOnly))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ReadOnly"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1141 := z.EncBinary()
				_ = yym1141
				if false {
				} else {
					r.EncodeBool(bool(x.ReadOnly))
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PortworxVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1142 := z.DecBinary()
	_ = yym1142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1143 := r.ContainerType()
		if yyct1143 == codecSelferValueTypeMap1234 {
			yyl1143 := r.ReadMapStart()
			if yyl1143 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1143, d)
			}
		} else if yyct1143 == codecSelferValueTypeArray1234 {
			yyl1143 := r.ReadArrayStart()
			if yyl1143 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PortworxVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1144Slc
	var yyhl1144 bool = l >= 0
	for yyj1144 := 0; ; yyj1144++ {
		if yyhl1144 {
			if yyj1144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1144Slc = r.DecodeBytes(yys1144Slc, true, true)
		yys1144 := string(yys1144Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1144 {
		case "VolumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "FSType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "ReadOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1144)
		} // end switch yys1144
	} // end for yyj1144
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PortworxVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1148 int
	var yyb1148 bool
	var yyhl1148 bool = l >= 0
	yyj1148++
	if yyhl1148 {
		yyb1148 = yyj1148 > l
	} else {
		yyb1148 = r.CheckBreak()
	}
	if yyb1148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj1148++
	if yyhl1148 {
		yyb1148 = yyj1148 > l
	} else {
		yyb1148 = r.CheckBreak()
	}
	if yyb1148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1148++
	if yyhl1148 {
		yyb1148 = yyj1148 > l
	} else {
		yyb1148 = r.CheckBreak()
	}
	if yyb1148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1148++
		if yyhl1148 {
			yyb1148 = yyj1148 > l
		} else {
			yyb1148 = r.CheckBreak()
		}
		if yyb1148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1152 := z.EncBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [5]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[2] = x.CachingMode != nil
			yyq1155[3] = x.FSType != nil
			yyq1155[4] = x.ReadOnly != nil
			var yynn1155 int
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(5)
			} else {
				yynn1155 = 2
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
				yynn1155 = 0
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1157 := z.EncBinary()
				_ = yym1157
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1158 := z.EncBinary()
				_ = yym1158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1160 := z.EncBinary()
				_ = yym1160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1161 := z.EncBinary()
				_ = yym1161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1155[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1163 := *x.CachingMode
						yy1163.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1164 := *x.CachingMode
						yy1164.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1155[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1166 := *x.FSType
						yym1167 := z.EncBinary()
						_ = yym1167
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1166))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1168 := *x.FSType
						yym1169 := z.EncBinary()
						_ = yym1169
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1168))
						}
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1155[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1171 := *x.ReadOnly
						yym1172 := z.EncBinary()
						_ = yym1172
						if false {
						} else {
							r.EncodeBool(bool(yy1171))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1173 := *x.ReadOnly
						yym1174 := z.EncBinary()
						_ = yym1174
						if false {
						} else {
							r.EncodeBool(bool(yy1173))
						}
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1175 := z.DecBinary()
	_ = yym1175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1176 := r.ContainerType()
		if yyct1176 == codecSelferValueTypeMap1234 {
			yyl1176 := r.ReadMapStart()
			if yyl1176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1176, d)
			}
		} else if yyct1176 == codecSelferValueTypeArray1234 {
			yyl1176 := r.ReadArrayStart()
			if yyl1176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1177Slc
	var yyhl1177 bool = l >= 0
	for yyj1177 := 0; ; yyj1177++ {
		if yyhl1177 {
			if yyj1177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1177Slc = r.DecodeBytes(yys1177Slc, true, true)
		yys1177 := string(yys1177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1177 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1182 := z.DecBinary()
				_ = yym1182
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1184 := z.DecBinary()
				_ = yym1184
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1177)
		} // end switch yys1177
	} // end for yyj1177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1185 int
	var yyb1185 bool
	var yyhl1185 bool = l >= 0
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1190 := z.DecBinary()
		_ = yym1190
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1192 := z.DecBinary()
		_ = yym1192
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1185++
		if yyhl1185 {
			yyb1185 = yyj1185 > l
		} else {
			yyb1185 = r.CheckBreak()
		}
		if yyb1185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1193 := z.EncBinary()
		_ = yym1193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1194 := !z.EncBinary()
			yy2arr1194 := z.EncBasicHandle().StructToArray
			var yyq1194 [3]bool
			_, _, _ = yysep1194, yyq1194, yy2arr1194
			const yyr1194 bool = false
			yyq1194[1] = len(x.Items) != 0
			yyq1194[2] = x.DefaultMode != nil
			var yynn1194 int
			if yyr1194 || yy2arr1194 {
				r.EncodeArrayStart(3)
			} else {
				yynn1194 = 1
				for _, b := range yyq1194 {
					if b {
						yynn1194++
					}
				}
				r.EncodeMapStart(yynn1194)
				yynn1194 = 0
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1197 := z.EncBinary()
				_ = yym1197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1199 := z.EncBinary()
						_ = yym1199
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1200 := z.EncBinary()
						_ = yym1200
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1202 := *x.DefaultMode
						yym1203 := z.EncBinary()
						_ = yym1203
						if false {
						} else {
							r.EncodeInt(int64(yy1202))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1194[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1204 := *x.DefaultMode
						yym1205 := z.EncBinary()
						_ = yym1205
						if false {
						} else {
							r.EncodeInt(int64(yy1204))
						}
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1207 := r.ContainerType()
		if yyct1207 == codecSelferValueTypeMap1234 {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if yyct1207 == codecSelferValueTypeArray1234 {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1208 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1210 := &x.Items
				yym1211 := z.DecBinary()
				_ = yym1211
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1210), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1213 := z.DecBinary()
				_ = yym1213
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1214 int
	var yyb1214 bool
	var yyhl1214 bool = l >= 0
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1216 := &x.Items
		yym1217 := z.DecBinary()
		_ = yym1217
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1216), d)
		}
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1219 := z.DecBinary()
		_ = yym1219
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1214++
		if yyhl1214 {
			yyb1214 = yyj1214 > l
		} else {
			yyb1214 = r.CheckBreak()
		}
		if yyb1214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1220 := z.EncBinary()
		_ = yym1220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1221 := !z.EncBinary()
			yy2arr1221 := z.EncBasicHandle().StructToArray
			var yyq1221 [3]bool
			_, _, _ = yysep1221, yyq1221, yy2arr1221
			const yyr1221 bool = false
			yyq1221[2] = x.Mode != nil
			var yynn1221 int
			if yyr1221 || yy2arr1221 {
				r.EncodeArrayStart(3)
			} else {
				yynn1221 = 2
				for _, b := range yyq1221 {
					if b {
						yynn1221++
					}
				}
				r.EncodeMapStart(yynn1221)
				yynn1221 = 0
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1223 := z.EncBinary()
				_ = yym1223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1224 := z.EncBinary()
				_ = yym1224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1226 := z.EncBinary()
				_ = yym1226
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1229 := *x.Mode
						yym1230 := z.EncBinary()
						_ = yym1230
						if false {
						} else {
							r.EncodeInt(int64(yy1229))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1231 := *x.Mode
						yym1232 := z.EncBinary()
						_ = yym1232
						if false {
						} else {
							r.EncodeInt(int64(yy1231))
						}
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1233 := z.DecBinary()
	_ = yym1233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1234 := r.ContainerType()
		if yyct1234 == codecSelferValueTypeMap1234 {
			yyl1234 := r.ReadMapStart()
			if yyl1234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1234, d)
			}
		} else if yyct1234 == codecSelferValueTypeArray1234 {
			yyl1234 := r.ReadArrayStart()
			if yyl1234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1235Slc
	var yyhl1235 bool = l >= 0
	for yyj1235 := 0; ; yyj1235++ {
		if yyhl1235 {
			if yyj1235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1235Slc = r.DecodeBytes(yys1235Slc, true, true)
		yys1235 := string(yys1235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1235 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1239 := z.DecBinary()
				_ = yym1239
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1235)
		} // end switch yys1235
	} // end for yyj1235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1240 int
	var yyb1240 bool
	var yyhl1240 bool = l >= 0
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1244 := z.DecBinary()
		_ = yym1244
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1240++
		if yyhl1240 {
			yyb1240 = yyj1240 > l
		} else {
			yyb1240 = r.CheckBreak()
		}
		if yyb1240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1245 := z.EncBinary()
		_ = yym1245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1246 := !z.EncBinary()
			yy2arr1246 := z.EncBasicHandle().StructToArray
			var yyq1246 [5]bool
			_, _, _ = yysep1246, yyq1246, yy2arr1246
			const yyr1246 bool = false
			yyq1246[0] = x.Name != ""
			yyq1246[1] = x.HostPort != 0
			yyq1246[3] = x.Protocol != ""
			yyq1246[4] = x.HostIP != ""
			var yynn1246 int
			if yyr1246 || yy2arr1246 {
				r.EncodeArrayStart(5)
			} else {
				yynn1246 = 1
				for _, b := range yyq1246 {
					if b {
						yynn1246++
					}
				}
				r.EncodeMapStart(yynn1246)
				yynn1246 = 0
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[0] {
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1246[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[1] {
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1246[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1254 := z.EncBinary()
				_ = yym1254
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1255 := z.EncBinary()
				_ = yym1255
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1246[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1246[4] {
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1246[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1246 || yy2arr1246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1260 := z.DecBinary()
	_ = yym1260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1261 := r.ContainerType()
		if yyct1261 == codecSelferValueTypeMap1234 {
			yyl1261 := r.ReadMapStart()
			if yyl1261 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1261, d)
			}
		} else if yyct1261 == codecSelferValueTypeArray1234 {
			yyl1261 := r.ReadArrayStart()
			if yyl1261 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1262Slc
	var yyhl1262 bool = l >= 0
	for yyj1262 := 0; ; yyj1262++ {
		if yyhl1262 {
			if yyj1262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1262Slc = r.DecodeBytes(yys1262Slc, true, true)
		yys1262 := string(yys1262Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1262 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1262)
		} // end switch yys1262
	} // end for yyj1262
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1268 int
	var yyb1268 bool
	var yyhl1268 bool = l >= 0
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1268++
		if yyhl1268 {
			yyb1268 = yyj1268 > l
		} else {
			yyb1268 = r.CheckBreak()
		}
		if yyb1268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1274 := z.EncBinary()
		_ = yym1274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1275 := !z.EncBinary()
			yy2arr1275 := z.EncBasicHandle().StructToArray
			var yyq1275 [4]bool
			_, _, _ = yysep1275, yyq1275, yy2arr1275
			const yyr1275 bool = false
			yyq1275[1] = x.ReadOnly != false
			yyq1275[3] = x.SubPath != ""
			var yynn1275 int
			if yyr1275 || yy2arr1275 {
				r.EncodeArrayStart(4)
			} else {
				yynn1275 = 2
				for _, b := range yyq1275 {
					if b {
						yynn1275++
					}
				}
				r.EncodeMapStart(yynn1275)
				yynn1275 = 0
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1277 := z.EncBinary()
				_ = yym1277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1275[1] {
					yym1280 := z.EncBinary()
					_ = yym1280
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1275[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1281 := z.EncBinary()
					_ = yym1281
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1283 := z.EncBinary()
				_ = yym1283
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1284 := z.EncBinary()
				_ = yym1284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1275[3] {
					yym1286 := z.EncBinary()
					_ = yym1286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1275[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1287 := z.EncBinary()
					_ = yym1287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1288 := z.DecBinary()
	_ = yym1288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1289 := r.ContainerType()
		if yyct1289 == codecSelferValueTypeMap1234 {
			yyl1289 := r.ReadMapStart()
			if yyl1289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1289, d)
			}
		} else if yyct1289 == codecSelferValueTypeArray1234 {
			yyl1289 := r.ReadArrayStart()
			if yyl1289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1290Slc
	var yyhl1290 bool = l >= 0
	for yyj1290 := 0; ; yyj1290++ {
		if yyhl1290 {
			if yyj1290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1290Slc = r.DecodeBytes(yys1290Slc, true, true)
		yys1290 := string(yys1290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1290 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1290)
		} // end switch yys1290
	} // end for yyj1290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1295 int
	var yyb1295 bool
	var yyhl1295 bool = l >= 0
	yyj1295++
	if yyhl1295 {
		yyb1295 = yyj1295 > l
	} else {
		yyb1295 = r.CheckBreak()
	}
	if yyb1295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1295++
	if yyhl1295 {
		yyb1295 = yyj1295 > l
	} else {
		yyb1295 = r.CheckBreak()
	}
	if yyb1295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1295++
	if yyhl1295 {
		yyb1295 = yyj1295 > l
	} else {
		yyb1295 = r.CheckBreak()
	}
	if yyb1295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1295++
	if yyhl1295 {
		yyb1295 = yyj1295 > l
	} else {
		yyb1295 = r.CheckBreak()
	}
	if yyb1295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1295++
		if yyhl1295 {
			yyb1295 = yyj1295 > l
		} else {
			yyb1295 = r.CheckBreak()
		}
		if yyb1295 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1295-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1300 := z.EncBinary()
		_ = yym1300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1301 := !z.EncBinary()
			yy2arr1301 := z.EncBasicHandle().StructToArray
			var yyq1301 [3]bool
			_, _, _ = yysep1301, yyq1301, yy2arr1301
			const yyr1301 bool = false
			yyq1301[1] = x.Value != ""
			yyq1301[2] = x.ValueFrom != nil
			var yynn1301 int
			if yyr1301 || yy2arr1301 {
				r.EncodeArrayStart(3)
			} else {
				yynn1301 = 1
				for _, b := range yyq1301 {
					if b {
						yynn1301++
					}
				}
				r.EncodeMapStart(yynn1301)
				yynn1301 = 0
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1303 := z.EncBinary()
				_ = yym1303
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[1] {
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1301[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1301[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1309 := z.DecBinary()
	_ = yym1309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1310 := r.ContainerType()
		if yyct1310 == codecSelferValueTypeMap1234 {
			yyl1310 := r.ReadMapStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1310, d)
			}
		} else if yyct1310 == codecSelferValueTypeArray1234 {
			yyl1310 := r.ReadArrayStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1311Slc
	var yyhl1311 bool = l >= 0
	for yyj1311 := 0; ; yyj1311++ {
		if yyhl1311 {
			if yyj1311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1311Slc = r.DecodeBytes(yys1311Slc, true, true)
		yys1311 := string(yys1311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1311 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1311)
		} // end switch yys1311
	} // end for yyj1311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1315 int
	var yyb1315 bool
	var yyhl1315 bool = l >= 0
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1315++
		if yyhl1315 {
			yyb1315 = yyj1315 > l
		} else {
			yyb1315 = r.CheckBreak()
		}
		if yyb1315 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1315-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1319 := z.EncBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1320 := !z.EncBinary()
			yy2arr1320 := z.EncBasicHandle().StructToArray
			var yyq1320 [4]bool
			_, _, _ = yysep1320, yyq1320, yy2arr1320
			const yyr1320 bool = false
			yyq1320[0] = x.FieldRef != nil
			yyq1320[1] = x.ResourceFieldRef != nil
			yyq1320[2] = x.ConfigMapKeyRef != nil
			yyq1320[3] = x.SecretKeyRef != nil
			var yynn1320 int
			if yyr1320 || yy2arr1320 {
				r.EncodeArrayStart(4)
			} else {
				yynn1320 = 0
				for _, b := range yyq1320 {
					if b {
						yynn1320++
					}
				}
				r.EncodeMapStart(yynn1320)
				yynn1320 = 0
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1320[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1325 := z.DecBinary()
	_ = yym1325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1326 := r.ContainerType()
		if yyct1326 == codecSelferValueTypeMap1234 {
			yyl1326 := r.ReadMapStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1326, d)
			}
		} else if yyct1326 == codecSelferValueTypeArray1234 {
			yyl1326 := r.ReadArrayStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1327Slc
	var yyhl1327 bool = l >= 0
	for yyj1327 := 0; ; yyj1327++ {
		if yyhl1327 {
			if yyj1327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1327Slc = r.DecodeBytes(yys1327Slc, true, true)
		yys1327 := string(yys1327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1327 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1327)
		} // end switch yys1327
	} // end for yyj1327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1332 int
	var yyb1332 bool
	var yyhl1332 bool = l >= 0
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1332++
		if yyhl1332 {
			yyb1332 = yyj1332 > l
		} else {
			yyb1332 = r.CheckBreak()
		}
		if yyb1332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1337 := z.EncBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1338 := !z.EncBinary()
			yy2arr1338 := z.EncBasicHandle().StructToArray
			var yyq1338 [2]bool
			_, _, _ = yysep1338, yyq1338, yy2arr1338
			const yyr1338 bool = false
			var yynn1338 int
			if yyr1338 || yy2arr1338 {
				r.EncodeArrayStart(2)
			} else {
				yynn1338 = 2
				for _, b := range yyq1338 {
					if b {
						yynn1338++
					}
				}
				r.EncodeMapStart(yynn1338)
				yynn1338 = 0
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1340 := z.EncBinary()
				_ = yym1340
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1341 := z.EncBinary()
				_ = yym1341
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1343 := z.EncBinary()
				_ = yym1343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1344 := z.EncBinary()
				_ = yym1344
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1345 := z.DecBinary()
	_ = yym1345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1346 := r.ContainerType()
		if yyct1346 == codecSelferValueTypeMap1234 {
			yyl1346 := r.ReadMapStart()
			if yyl1346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1346, d)
			}
		} else if yyct1346 == codecSelferValueTypeArray1234 {
			yyl1346 := r.ReadArrayStart()
			if yyl1346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1347Slc
	var yyhl1347 bool = l >= 0
	for yyj1347 := 0; ; yyj1347++ {
		if yyhl1347 {
			if yyj1347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1347Slc = r.DecodeBytes(yys1347Slc, true, true)
		yys1347 := string(yys1347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1347 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1347)
		} // end switch yys1347
	} // end for yyj1347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1350 int
	var yyb1350 bool
	var yyhl1350 bool = l >= 0
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1350++
		if yyhl1350 {
			yyb1350 = yyj1350 > l
		} else {
			yyb1350 = r.CheckBreak()
		}
		if yyb1350 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1350-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1353 := z.EncBinary()
		_ = yym1353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1354 := !z.EncBinary()
			yy2arr1354 := z.EncBasicHandle().StructToArray
			var yyq1354 [3]bool
			_, _, _ = yysep1354, yyq1354, yy2arr1354
			const yyr1354 bool = false
			yyq1354[0] = x.ContainerName != ""
			yyq1354[2] = true
			var yynn1354 int
			if yyr1354 || yy2arr1354 {
				r.EncodeArrayStart(3)
			} else {
				yynn1354 = 1
				for _, b := range yyq1354 {
					if b {
						yynn1354++
					}
				}
				r.EncodeMapStart(yynn1354)
				yynn1354 = 0
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[0] {
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1359 := z.EncBinary()
				_ = yym1359
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1360 := z.EncBinary()
				_ = yym1360
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[2] {
					yy1362 := &x.Divisor
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1362) {
					} else if !yym1363 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1362)
					} else {
						z.EncFallback(yy1362)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1364 := &x.Divisor
					yym1365 := z.EncBinary()
					_ = yym1365
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1364) {
					} else if !yym1365 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1364)
					} else {
						z.EncFallback(yy1364)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1366 := z.DecBinary()
	_ = yym1366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1367 := r.ContainerType()
		if yyct1367 == codecSelferValueTypeMap1234 {
			yyl1367 := r.ReadMapStart()
			if yyl1367 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1367, d)
			}
		} else if yyct1367 == codecSelferValueTypeArray1234 {
			yyl1367 := r.ReadArrayStart()
			if yyl1367 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1368Slc
	var yyhl1368 bool = l >= 0
	for yyj1368 := 0; ; yyj1368++ {
		if yyhl1368 {
			if yyj1368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1368Slc = r.DecodeBytes(yys1368Slc, true, true)
		yys1368 := string(yys1368Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1368 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1371 := &x.Divisor
				yym1372 := z.DecBinary()
				_ = yym1372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1371) {
				} else if !yym1372 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1371)
				} else {
					z.DecFallback(yyv1371, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1368)
		} // end switch yys1368
	} // end for yyj1368
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1373 int
	var yyb1373 bool
	var yyhl1373 bool = l >= 0
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1376 := &x.Divisor
		yym1377 := z.DecBinary()
		_ = yym1377
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1376) {
		} else if !yym1377 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1376)
		} else {
			z.DecFallback(yyv1376, false)
		}
	}
	for {
		yyj1373++
		if yyhl1373 {
			yyb1373 = yyj1373 > l
		} else {
			yyb1373 = r.CheckBreak()
		}
		if yyb1373 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1373-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1378 := z.EncBinary()
		_ = yym1378
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1379 := !z.EncBinary()
			yy2arr1379 := z.EncBasicHandle().StructToArray
			var yyq1379 [2]bool
			_, _, _ = yysep1379, yyq1379, yy2arr1379
			const yyr1379 bool = false
			var yynn1379 int
			if yyr1379 || yy2arr1379 {
				r.EncodeArrayStart(2)
			} else {
				yynn1379 = 2
				for _, b := range yyq1379 {
					if b {
						yynn1379++
					}
				}
				r.EncodeMapStart(yynn1379)
				yynn1379 = 0
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1381 := z.EncBinary()
				_ = yym1381
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1382 := z.EncBinary()
				_ = yym1382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1384 := z.EncBinary()
				_ = yym1384
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1385 := z.EncBinary()
				_ = yym1385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1386 := z.DecBinary()
	_ = yym1386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1387 := r.ContainerType()
		if yyct1387 == codecSelferValueTypeMap1234 {
			yyl1387 := r.ReadMapStart()
			if yyl1387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1387, d)
			}
		} else if yyct1387 == codecSelferValueTypeArray1234 {
			yyl1387 := r.ReadArrayStart()
			if yyl1387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1388Slc
	var yyhl1388 bool = l >= 0
	for yyj1388 := 0; ; yyj1388++ {
		if yyhl1388 {
			if yyj1388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1388Slc = r.DecodeBytes(yys1388Slc, true, true)
		yys1388 := string(yys1388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1388 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1388)
		} // end switch yys1388
	} // end for yyj1388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1391 int
	var yyb1391 bool
	var yyhl1391 bool = l >= 0
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1391++
		if yyhl1391 {
			yyb1391 = yyj1391 > l
		} else {
			yyb1391 = r.CheckBreak()
		}
		if yyb1391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1394 := z.EncBinary()
		_ = yym1394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1395 := !z.EncBinary()
			yy2arr1395 := z.EncBasicHandle().StructToArray
			var yyq1395 [2]bool
			_, _, _ = yysep1395, yyq1395, yy2arr1395
			const yyr1395 bool = false
			var yynn1395 int
			if yyr1395 || yy2arr1395 {
				r.EncodeArrayStart(2)
			} else {
				yynn1395 = 2
				for _, b := range yyq1395 {
					if b {
						yynn1395++
					}
				}
				r.EncodeMapStart(yynn1395)
				yynn1395 = 0
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1397 := z.EncBinary()
				_ = yym1397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1398 := z.EncBinary()
				_ = yym1398
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1400 := z.EncBinary()
				_ = yym1400
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1401 := z.EncBinary()
				_ = yym1401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1407 int
	var yyb1407 bool
	var yyhl1407 bool = l >= 0
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1407++
		if yyhl1407 {
			yyb1407 = yyj1407 > l
		} else {
			yyb1407 = r.CheckBreak()
		}
		if yyb1407 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1407-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1410 := z.EncBinary()
		_ = yym1410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1411 := !z.EncBinary()
			yy2arr1411 := z.EncBasicHandle().StructToArray
			var yyq1411 [2]bool
			_, _, _ = yysep1411, yyq1411, yy2arr1411
			const yyr1411 bool = false
			var yynn1411 int
			if yyr1411 || yy2arr1411 {
				r.EncodeArrayStart(2)
			} else {
				yynn1411 = 2
				for _, b := range yyq1411 {
					if b {
						yynn1411++
					}
				}
				r.EncodeMapStart(yynn1411)
				yynn1411 = 0
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1413 := z.EncBinary()
				_ = yym1413
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1414 := z.EncBinary()
				_ = yym1414
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1416 := z.EncBinary()
				_ = yym1416
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1417 := z.EncBinary()
				_ = yym1417
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1418 := z.DecBinary()
	_ = yym1418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1419 := r.ContainerType()
		if yyct1419 == codecSelferValueTypeMap1234 {
			yyl1419 := r.ReadMapStart()
			if yyl1419 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1419, d)
			}
		} else if yyct1419 == codecSelferValueTypeArray1234 {
			yyl1419 := r.ReadArrayStart()
			if yyl1419 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1419, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1420Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1420Slc
	var yyhl1420 bool = l >= 0
	for yyj1420 := 0; ; yyj1420++ {
		if yyhl1420 {
			if yyj1420 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1420Slc = r.DecodeBytes(yys1420Slc, true, true)
		yys1420 := string(yys1420Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1420 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1420)
		} // end switch yys1420
	} // end for yyj1420
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1423 int
	var yyb1423 bool
	var yyhl1423 bool = l >= 0
	yyj1423++
	if yyhl1423 {
		yyb1423 = yyj1423 > l
	} else {
		yyb1423 = r.CheckBreak()
	}
	if yyb1423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1423++
	if yyhl1423 {
		yyb1423 = yyj1423 > l
	} else {
		yyb1423 = r.CheckBreak()
	}
	if yyb1423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1423++
		if yyhl1423 {
			yyb1423 = yyj1423 > l
		} else {
			yyb1423 = r.CheckBreak()
		}
		if yyb1423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1426 := z.EncBinary()
		_ = yym1426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1427 := !z.EncBinary()
			yy2arr1427 := z.EncBasicHandle().StructToArray
			var yyq1427 [5]bool
			_, _, _ = yysep1427, yyq1427, yy2arr1427
			const yyr1427 bool = false
			yyq1427[0] = x.Path != ""
			yyq1427[1] = true
			yyq1427[2] = x.Host != ""
			yyq1427[3] = x.Scheme != ""
			yyq1427[4] = len(x.HTTPHeaders) != 0
			var yynn1427 int
			if yyr1427 || yy2arr1427 {
				r.EncodeArrayStart(5)
			} else {
				yynn1427 = 0
				for _, b := range yyq1427 {
					if b {
						yynn1427++
					}
				}
				r.EncodeMapStart(yynn1427)
				yynn1427 = 0
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[0] {
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1427[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1430 := z.EncBinary()
					_ = yym1430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[1] {
					yy1432 := &x.Port
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1432) {
					} else if !yym1433 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1432)
					} else {
						z.EncFallback(yy1432)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1427[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1434 := &x.Port
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1434) {
					} else if !yym1435 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1434)
					} else {
						z.EncFallback(yy1434)
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[2] {
					yym1437 := z.EncBinary()
					_ = yym1437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1427[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1438 := z.EncBinary()
					_ = yym1438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1427[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1441 := z.EncBinary()
						_ = yym1441
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1427[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1442 := z.EncBinary()
						_ = yym1442
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1443 := z.DecBinary()
	_ = yym1443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1444 := r.ContainerType()
		if yyct1444 == codecSelferValueTypeMap1234 {
			yyl1444 := r.ReadMapStart()
			if yyl1444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1444, d)
			}
		} else if yyct1444 == codecSelferValueTypeArray1234 {
			yyl1444 := r.ReadArrayStart()
			if yyl1444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1445Slc
	var yyhl1445 bool = l >= 0
	for yyj1445 := 0; ; yyj1445++ {
		if yyhl1445 {
			if yyj1445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1445Slc = r.DecodeBytes(yys1445Slc, true, true)
		yys1445 := string(yys1445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1445 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1447 := &x.Port
				yym1448 := z.DecBinary()
				_ = yym1448
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1447) {
				} else if !yym1448 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1447)
				} else {
					z.DecFallback(yyv1447, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1451 := &x.HTTPHeaders
				yym1452 := z.DecBinary()
				_ = yym1452
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1451), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1445)
		} // end switch yys1445
	} // end for yyj1445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1453 int
	var yyb1453 bool
	var yyhl1453 bool = l >= 0
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1455 := &x.Port
		yym1456 := z.DecBinary()
		_ = yym1456
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1455) {
		} else if !yym1456 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1455)
		} else {
			z.DecFallback(yyv1455, false)
		}
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1459 := &x.HTTPHeaders
		yym1460 := z.DecBinary()
		_ = yym1460
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1459), d)
		}
	}
	for {
		yyj1453++
		if yyhl1453 {
			yyb1453 = yyj1453 > l
		} else {
			yyb1453 = r.CheckBreak()
		}
		if yyb1453 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1453-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1461 := z.EncBinary()
	_ = yym1461
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1462 := z.DecBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1463 := z.EncBinary()
		_ = yym1463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1464 := !z.EncBinary()
			yy2arr1464 := z.EncBasicHandle().StructToArray
			var yyq1464 [1]bool
			_, _, _ = yysep1464, yyq1464, yy2arr1464
			const yyr1464 bool = false
			yyq1464[0] = true
			var yynn1464 int
			if yyr1464 || yy2arr1464 {
				r.EncodeArrayStart(1)
			} else {
				yynn1464 = 0
				for _, b := range yyq1464 {
					if b {
						yynn1464++
					}
				}
				r.EncodeMapStart(yynn1464)
				yynn1464 = 0
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[0] {
					yy1466 := &x.Port
					yym1467 := z.EncBinary()
					_ = yym1467
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1466) {
					} else if !yym1467 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1466)
					} else {
						z.EncFallback(yy1466)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1468 := &x.Port
					yym1469 := z.EncBinary()
					_ = yym1469
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1468) {
					} else if !yym1469 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1468)
					} else {
						z.EncFallback(yy1468)
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1470 := z.DecBinary()
	_ = yym1470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1471 := r.ContainerType()
		if yyct1471 == codecSelferValueTypeMap1234 {
			yyl1471 := r.ReadMapStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1471, d)
			}
		} else if yyct1471 == codecSelferValueTypeArray1234 {
			yyl1471 := r.ReadArrayStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1472Slc
	var yyhl1472 bool = l >= 0
	for yyj1472 := 0; ; yyj1472++ {
		if yyhl1472 {
			if yyj1472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1472Slc = r.DecodeBytes(yys1472Slc, true, true)
		yys1472 := string(yys1472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1472 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1473 := &x.Port
				yym1474 := z.DecBinary()
				_ = yym1474
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1473) {
				} else if !yym1474 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1473)
				} else {
					z.DecFallback(yyv1473, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1472)
		} // end switch yys1472
	} // end for yyj1472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1475 int
	var yyb1475 bool
	var yyhl1475 bool = l >= 0
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1476 := &x.Port
		yym1477 := z.DecBinary()
		_ = yym1477
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1476) {
		} else if !yym1477 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1476)
		} else {
			z.DecFallback(yyv1476, false)
		}
	}
	for {
		yyj1475++
		if yyhl1475 {
			yyb1475 = yyj1475 > l
		} else {
			yyb1475 = r.CheckBreak()
		}
		if yyb1475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1478 := z.EncBinary()
		_ = yym1478
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1479 := !z.EncBinary()
			yy2arr1479 := z.EncBasicHandle().StructToArray
			var yyq1479 [1]bool
			_, _, _ = yysep1479, yyq1479, yy2arr1479
			const yyr1479 bool = false
			yyq1479[0] = len(x.Command) != 0
			var yynn1479 int
			if yyr1479 || yy2arr1479 {
				r.EncodeArrayStart(1)
			} else {
				yynn1479 = 0
				for _, b := range yyq1479 {
					if b {
						yynn1479++
					}
				}
				r.EncodeMapStart(yynn1479)
				yynn1479 = 0
			}
			if yyr1479 || yy2arr1479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1479[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1481 := z.EncBinary()
						_ = yym1481
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1479[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1482 := z.EncBinary()
						_ = yym1482
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1479 || yy2arr1479 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1483 := z.DecBinary()
	_ = yym1483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1484 := r.ContainerType()
		if yyct1484 == codecSelferValueTypeMap1234 {
			yyl1484 := r.ReadMapStart()
			if yyl1484 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1484, d)
			}
		} else if yyct1484 == codecSelferValueTypeArray1234 {
			yyl1484 := r.ReadArrayStart()
			if yyl1484 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1485Slc
	var yyhl1485 bool = l >= 0
	for yyj1485 := 0; ; yyj1485++ {
		if yyhl1485 {
			if yyj1485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1485Slc = r.DecodeBytes(yys1485Slc, true, true)
		yys1485 := string(yys1485Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1485 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1486 := &x.Command
				yym1487 := z.DecBinary()
				_ = yym1487
				if false {
				} else {
					z.F.DecSliceStringX(yyv1486, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1485)
		} // end switch yys1485
	} // end for yyj1485
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1488 int
	var yyb1488 bool
	var yyhl1488 bool = l >= 0
	yyj1488++
	if yyhl1488 {
		yyb1488 = yyj1488 > l
	} else {
		yyb1488 = r.CheckBreak()
	}
	if yyb1488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1489 := &x.Command
		yym1490 := z.DecBinary()
		_ = yym1490
		if false {
		} else {
			z.F.DecSliceStringX(yyv1489, false, d)
		}
	}
	for {
		yyj1488++
		if yyhl1488 {
			yyb1488 = yyj1488 > l
		} else {
			yyb1488 = r.CheckBreak()
		}
		if yyb1488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1491 := z.EncBinary()
		_ = yym1491
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1492 := !z.EncBinary()
			yy2arr1492 := z.EncBasicHandle().StructToArray
			var yyq1492 [8]bool
			_, _, _ = yysep1492, yyq1492, yy2arr1492
			const yyr1492 bool = false
			yyq1492[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1492[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1492[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1492[3] = x.InitialDelaySeconds != 0
			yyq1492[4] = x.TimeoutSeconds != 0
			yyq1492[5] = x.PeriodSeconds != 0
			yyq1492[6] = x.SuccessThreshold != 0
			yyq1492[7] = x.FailureThreshold != 0
			var yynn1492 int
			if yyr1492 || yy2arr1492 {
				r.EncodeArrayStart(8)
			} else {
				yynn1492 = 0
				for _, b := range yyq1492 {
					if b {
						yynn1492++
					}
				}
				r.EncodeMapStart(yynn1492)
				yynn1492 = 0
			}
			var yyn1493 bool
			if x.Handler.Exec == nil {
				yyn1493 = true
				goto LABEL1493
			}
		LABEL1493:
			if yyr1492 || yy2arr1492 {
				if yyn1493 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1492[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1492[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1493 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1494 bool
			if x.Handler.HTTPGet == nil {
				yyn1494 = true
				goto LABEL1494
			}
		LABEL1494:
			if yyr1492 || yy2arr1492 {
				if yyn1494 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1492[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1492[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1494 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1495 bool
			if x.Handler.TCPSocket == nil {
				yyn1495 = true
				goto LABEL1495
			}
		LABEL1495:
			if yyr1492 || yy2arr1492 {
				if yyn1495 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1492[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1492[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1495 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[3] {
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1492[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[4] {
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1492[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[5] {
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1492[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[6] {
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1492[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[7] {
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1492[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1511 := z.DecBinary()
	_ = yym1511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1512 := r.ContainerType()
		if yyct1512 == codecSelferValueTypeMap1234 {
			yyl1512 := r.ReadMapStart()
			if yyl1512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1512, d)
			}
		} else if yyct1512 == codecSelferValueTypeArray1234 {
			yyl1512 := r.ReadArrayStart()
			if yyl1512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1513Slc
	var yyhl1513 bool = l >= 0
	for yyj1513 := 0; ; yyj1513++ {
		if yyhl1513 {
			if yyj1513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1513Slc = r.DecodeBytes(yys1513Slc, true, true)
		yys1513 := string(yys1513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1513 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1513)
		} // end switch yys1513
	} // end for yyj1513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1522 int
	var yyb1522 bool
	var yyhl1522 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1522++
		if yyhl1522 {
			yyb1522 = yyj1522 > l
		} else {
			yyb1522 = r.CheckBreak()
		}
		if yyb1522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1531 := z.EncBinary()
	_ = yym1531
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1532 := z.DecBinary()
	_ = yym1532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1533 := z.EncBinary()
	_ = yym1533
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1534 := z.DecBinary()
	_ = yym1534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1535 := z.EncBinary()
		_ = yym1535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1536 := !z.EncBinary()
			yy2arr1536 := z.EncBasicHandle().StructToArray
			var yyq1536 [2]bool
			_, _, _ = yysep1536, yyq1536, yy2arr1536
			const yyr1536 bool = false
			yyq1536[0] = len(x.Add) != 0
			yyq1536[1] = len(x.Drop) != 0
			var yynn1536 int
			if yyr1536 || yy2arr1536 {
				r.EncodeArrayStart(2)
			} else {
				yynn1536 = 0
				for _, b := range yyq1536 {
					if b {
						yynn1536++
					}
				}
				r.EncodeMapStart(yynn1536)
				yynn1536 = 0
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1536[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1539 := z.EncBinary()
						_ = yym1539
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1541 := z.EncBinary()
						_ = yym1541
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1542 := z.EncBinary()
						_ = yym1542
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1543 := z.DecBinary()
	_ = yym1543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1544 := r.ContainerType()
		if yyct1544 == codecSelferValueTypeMap1234 {
			yyl1544 := r.ReadMapStart()
			if yyl1544 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1544, d)
			}
		} else if yyct1544 == codecSelferValueTypeArray1234 {
			yyl1544 := r.ReadArrayStart()
			if yyl1544 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1544, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1545Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1545Slc
	var yyhl1545 bool = l >= 0
	for yyj1545 := 0; ; yyj1545++ {
		if yyhl1545 {
			if yyj1545 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1545Slc = r.DecodeBytes(yys1545Slc, true, true)
		yys1545 := string(yys1545Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1545 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1546 := &x.Add
				yym1547 := z.DecBinary()
				_ = yym1547
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1546), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1548 := &x.Drop
				yym1549 := z.DecBinary()
				_ = yym1549
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1548), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1545)
		} // end switch yys1545
	} // end for yyj1545
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1550 int
	var yyb1550 bool
	var yyhl1550 bool = l >= 0
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1551 := &x.Add
		yym1552 := z.DecBinary()
		_ = yym1552
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1551), d)
		}
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1553 := &x.Drop
		yym1554 := z.DecBinary()
		_ = yym1554
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1553), d)
		}
	}
	for {
		yyj1550++
		if yyhl1550 {
			yyb1550 = yyj1550 > l
		} else {
			yyb1550 = r.CheckBreak()
		}
		if yyb1550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1555 := z.EncBinary()
		_ = yym1555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1556 := !z.EncBinary()
			yy2arr1556 := z.EncBasicHandle().StructToArray
			var yyq1556 [2]bool
			_, _, _ = yysep1556, yyq1556, yy2arr1556
			const yyr1556 bool = false
			yyq1556[0] = len(x.Limits) != 0
			yyq1556[1] = len(x.Requests) != 0
			var yynn1556 int
			if yyr1556 || yy2arr1556 {
				r.EncodeArrayStart(2)
			} else {
				yynn1556 = 0
				for _, b := range yyq1556 {
					if b {
						yynn1556++
					}
				}
				r.EncodeMapStart(yynn1556)
				yynn1556 = 0
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1556[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1556[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1556 || yy2arr1556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1559 := z.DecBinary()
	_ = yym1559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1560 := r.ContainerType()
		if yyct1560 == codecSelferValueTypeMap1234 {
			yyl1560 := r.ReadMapStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1560, d)
			}
		} else if yyct1560 == codecSelferValueTypeArray1234 {
			yyl1560 := r.ReadArrayStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1561Slc
	var yyhl1561 bool = l >= 0
	for yyj1561 := 0; ; yyj1561++ {
		if yyhl1561 {
			if yyj1561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1561Slc = r.DecodeBytes(yys1561Slc, true, true)
		yys1561 := string(yys1561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1561 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1562 := &x.Limits
				yyv1562.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1563 := &x.Requests
				yyv1563.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1561)
		} // end switch yys1561
	} // end for yyj1561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1564 int
	var yyb1564 bool
	var yyhl1564 bool = l >= 0
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1565 := &x.Limits
		yyv1565.CodecDecodeSelf(d)
	}
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1566 := &x.Requests
		yyv1566.CodecDecodeSelf(d)
	}
	for {
		yyj1564++
		if yyhl1564 {
			yyb1564 = yyj1564 > l
		} else {
			yyb1564 = r.CheckBreak()
		}
		if yyb1564 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1564-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1567 := z.EncBinary()
		_ = yym1567
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1568 := !z.EncBinary()
			yy2arr1568 := z.EncBasicHandle().StructToArray
			var yyq1568 [18]bool
			_, _, _ = yysep1568, yyq1568, yy2arr1568
			const yyr1568 bool = false
			yyq1568[2] = len(x.Command) != 0
			yyq1568[3] = len(x.Args) != 0
			yyq1568[4] = x.WorkingDir != ""
			yyq1568[5] = len(x.Ports) != 0
			yyq1568[6] = len(x.Env) != 0
			yyq1568[7] = true
			yyq1568[8] = len(x.VolumeMounts) != 0
			yyq1568[9] = x.LivenessProbe != nil
			yyq1568[10] = x.ReadinessProbe != nil
			yyq1568[11] = x.Lifecycle != nil
			yyq1568[12] = x.TerminationMessagePath != ""
			yyq1568[14] = x.SecurityContext != nil
			yyq1568[15] = x.Stdin != false
			yyq1568[16] = x.StdinOnce != false
			yyq1568[17] = x.TTY != false
			var yynn1568 int
			if yyr1568 || yy2arr1568 {
				r.EncodeArrayStart(18)
			} else {
				yynn1568 = 3
				for _, b := range yyq1568 {
					if b {
						yynn1568++
					}
				}
				r.EncodeMapStart(yynn1568)
				yynn1568 = 0
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1570 := z.EncBinary()
				_ = yym1570
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1571 := z.EncBinary()
				_ = yym1571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1573 := z.EncBinary()
				_ = yym1573
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1574 := z.EncBinary()
				_ = yym1574
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1576 := z.EncBinary()
						_ = yym1576
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1577 := z.EncBinary()
						_ = yym1577
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1579 := z.EncBinary()
						_ = yym1579
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1580 := z.EncBinary()
						_ = yym1580
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[4] {
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1568[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1583 := z.EncBinary()
					_ = yym1583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1585 := z.EncBinary()
						_ = yym1585
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1586 := z.EncBinary()
						_ = yym1586
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1588 := z.EncBinary()
						_ = yym1588
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1589 := z.EncBinary()
						_ = yym1589
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[7] {
					yy1591 := &x.Resources
					yy1591.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1592 := &x.Resources
					yy1592.CodecEncodeSelf(e)
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1594 := z.EncBinary()
						_ = yym1594
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1595 := z.EncBinary()
						_ = yym1595
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[12] {
					yym1600 := z.EncBinary()
					_ = yym1600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1568[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1601 := z.EncBinary()
					_ = yym1601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1568[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[15] {
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1568[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[16] {
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1568[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1568[17] {
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1568[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1568 || yy2arr1568 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1613 := z.DecBinary()
	_ = yym1613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1614 := r.ContainerType()
		if yyct1614 == codecSelferValueTypeMap1234 {
			yyl1614 := r.ReadMapStart()
			if yyl1614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1614, d)
			}
		} else if yyct1614 == codecSelferValueTypeArray1234 {
			yyl1614 := r.ReadArrayStart()
			if yyl1614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1615Slc
	var yyhl1615 bool = l >= 0
	for yyj1615 := 0; ; yyj1615++ {
		if yyhl1615 {
			if yyj1615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1615Slc = r.DecodeBytes(yys1615Slc, true, true)
		yys1615 := string(yys1615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1615 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1618 := &x.Command
				yym1619 := z.DecBinary()
				_ = yym1619
				if false {
				} else {
					z.F.DecSliceStringX(yyv1618, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1620 := &x.Args
				yym1621 := z.DecBinary()
				_ = yym1621
				if false {
				} else {
					z.F.DecSliceStringX(yyv1620, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1623 := &x.Ports
				yym1624 := z.DecBinary()
				_ = yym1624
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1623), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1625 := &x.Env
				yym1626 := z.DecBinary()
				_ = yym1626
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1625), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1627 := &x.Resources
				yyv1627.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1628 := &x.VolumeMounts
				yym1629 := z.DecBinary()
				_ = yym1629
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1628), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1615)
		} // end switch yys1615
	} // end for yyj1615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1639 int
	var yyb1639 bool
	var yyhl1639 bool = l >= 0
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1642 := &x.Command
		yym1643 := z.DecBinary()
		_ = yym1643
		if false {
		} else {
			z.F.DecSliceStringX(yyv1642, false, d)
		}
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1644 := &x.Args
		yym1645 := z.DecBinary()
		_ = yym1645
		if false {
		} else {
			z.F.DecSliceStringX(yyv1644, false, d)
		}
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1647 := &x.Ports
		yym1648 := z.DecBinary()
		_ = yym1648
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1647), d)
		}
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1649 := &x.Env
		yym1650 := z.DecBinary()
		_ = yym1650
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1649), d)
		}
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1651 := &x.Resources
		yyv1651.CodecDecodeSelf(d)
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1652 := &x.VolumeMounts
		yym1653 := z.DecBinary()
		_ = yym1653
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1652), d)
		}
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1639++
	if yyhl1639 {
		yyb1639 = yyj1639 > l
	} else {
		yyb1639 = r.CheckBreak()
	}
	if yyb1639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1639++
		if yyhl1639 {
			yyb1639 = yyj1639 > l
		} else {
			yyb1639 = r.CheckBreak()
		}
		if yyb1639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1663 := z.EncBinary()
		_ = yym1663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1664 := !z.EncBinary()
			yy2arr1664 := z.EncBasicHandle().StructToArray
			var yyq1664 [3]bool
			_, _, _ = yysep1664, yyq1664, yy2arr1664
			const yyr1664 bool = false
			yyq1664[0] = x.Exec != nil
			yyq1664[1] = x.HTTPGet != nil
			yyq1664[2] = x.TCPSocket != nil
			var yynn1664 int
			if yyr1664 || yy2arr1664 {
				r.EncodeArrayStart(3)
			} else {
				yynn1664 = 0
				for _, b := range yyq1664 {
					if b {
						yynn1664++
					}
				}
				r.EncodeMapStart(yynn1664)
				yynn1664 = 0
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1669 := r.ContainerType()
		if yyct1669 == codecSelferValueTypeMap1234 {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if yyct1669 == codecSelferValueTypeArray1234 {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1670 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1674 int
	var yyb1674 bool
	var yyhl1674 bool = l >= 0
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1674++
		if yyhl1674 {
			yyb1674 = yyj1674 > l
		} else {
			yyb1674 = r.CheckBreak()
		}
		if yyb1674 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1674-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1678 := z.EncBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1679 := !z.EncBinary()
			yy2arr1679 := z.EncBasicHandle().StructToArray
			var yyq1679 [2]bool
			_, _, _ = yysep1679, yyq1679, yy2arr1679
			const yyr1679 bool = false
			yyq1679[0] = x.PostStart != nil
			yyq1679[1] = x.PreStop != nil
			var yynn1679 int
			if yyr1679 || yy2arr1679 {
				r.EncodeArrayStart(2)
			} else {
				yynn1679 = 0
				for _, b := range yyq1679 {
					if b {
						yynn1679++
					}
				}
				r.EncodeMapStart(yynn1679)
				yynn1679 = 0
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1682 := z.DecBinary()
	_ = yym1682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1683 := r.ContainerType()
		if yyct1683 == codecSelferValueTypeMap1234 {
			yyl1683 := r.ReadMapStart()
			if yyl1683 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1683, d)
			}
		} else if yyct1683 == codecSelferValueTypeArray1234 {
			yyl1683 := r.ReadArrayStart()
			if yyl1683 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1684Slc
	var yyhl1684 bool = l >= 0
	for yyj1684 := 0; ; yyj1684++ {
		if yyhl1684 {
			if yyj1684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1684Slc = r.DecodeBytes(yys1684Slc, true, true)
		yys1684 := string(yys1684Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1684 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1684)
		} // end switch yys1684
	} // end for yyj1684
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1687 int
	var yyb1687 bool
	var yyhl1687 bool = l >= 0
	yyj1687++
	if yyhl1687 {
		yyb1687 = yyj1687 > l
	} else {
		yyb1687 = r.CheckBreak()
	}
	if yyb1687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1687++
	if yyhl1687 {
		yyb1687 = yyj1687 > l
	} else {
		yyb1687 = r.CheckBreak()
	}
	if yyb1687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1687++
		if yyhl1687 {
			yyb1687 = yyj1687 > l
		} else {
			yyb1687 = r.CheckBreak()
		}
		if yyb1687 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1687-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1690 := z.EncBinary()
	_ = yym1690
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1691 := z.DecBinary()
	_ = yym1691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1692 := z.EncBinary()
		_ = yym1692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1693 := !z.EncBinary()
			yy2arr1693 := z.EncBasicHandle().StructToArray
			var yyq1693 [2]bool
			_, _, _ = yysep1693, yyq1693, yy2arr1693
			const yyr1693 bool = false
			yyq1693[0] = x.Reason != ""
			yyq1693[1] = x.Message != ""
			var yynn1693 int
			if yyr1693 || yy2arr1693 {
				r.EncodeArrayStart(2)
			} else {
				yynn1693 = 0
				for _, b := range yyq1693 {
					if b {
						yynn1693++
					}
				}
				r.EncodeMapStart(yynn1693)
				yynn1693 = 0
			}
			if yyr1693 || yy2arr1693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1693[0] {
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1693[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1693 || yy2arr1693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1693[1] {
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1693[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1699 := z.EncBinary()
					_ = yym1699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1693 || yy2arr1693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1700 := z.DecBinary()
	_ = yym1700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1701 := r.ContainerType()
		if yyct1701 == codecSelferValueTypeMap1234 {
			yyl1701 := r.ReadMapStart()
			if yyl1701 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1701, d)
			}
		} else if yyct1701 == codecSelferValueTypeArray1234 {
			yyl1701 := r.ReadArrayStart()
			if yyl1701 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1702Slc
	var yyhl1702 bool = l >= 0
	for yyj1702 := 0; ; yyj1702++ {
		if yyhl1702 {
			if yyj1702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1702Slc = r.DecodeBytes(yys1702Slc, true, true)
		yys1702 := string(yys1702Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1702 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1702)
		} // end switch yys1702
	} // end for yyj1702
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1705 int
	var yyb1705 bool
	var yyhl1705 bool = l >= 0
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1705++
		if yyhl1705 {
			yyb1705 = yyj1705 > l
		} else {
			yyb1705 = r.CheckBreak()
		}
		if yyb1705 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1705-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1708 := z.EncBinary()
		_ = yym1708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1709 := !z.EncBinary()
			yy2arr1709 := z.EncBasicHandle().StructToArray
			var yyq1709 [1]bool
			_, _, _ = yysep1709, yyq1709, yy2arr1709
			const yyr1709 bool = false
			yyq1709[0] = true
			var yynn1709 int
			if yyr1709 || yy2arr1709 {
				r.EncodeArrayStart(1)
			} else {
				yynn1709 = 0
				for _, b := range yyq1709 {
					if b {
						yynn1709++
					}
				}
				r.EncodeMapStart(yynn1709)
				yynn1709 = 0
			}
			if yyr1709 || yy2arr1709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1709[0] {
					yy1711 := &x.StartedAt
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1711) {
					} else if yym1712 {
						z.EncBinaryMarshal(yy1711)
					} else if !yym1712 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1711)
					} else {
						z.EncFallback(yy1711)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1709[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1713 := &x.StartedAt
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1713) {
					} else if yym1714 {
						z.EncBinaryMarshal(yy1713)
					} else if !yym1714 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1713)
					} else {
						z.EncFallback(yy1713)
					}
				}
			}
			if yyr1709 || yy2arr1709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1715 := z.DecBinary()
	_ = yym1715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1716 := r.ContainerType()
		if yyct1716 == codecSelferValueTypeMap1234 {
			yyl1716 := r.ReadMapStart()
			if yyl1716 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1716, d)
			}
		} else if yyct1716 == codecSelferValueTypeArray1234 {
			yyl1716 := r.ReadArrayStart()
			if yyl1716 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1716, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1717Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1717Slc
	var yyhl1717 bool = l >= 0
	for yyj1717 := 0; ; yyj1717++ {
		if yyhl1717 {
			if yyj1717 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1717Slc = r.DecodeBytes(yys1717Slc, true, true)
		yys1717 := string(yys1717Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1717 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1718 := &x.StartedAt
				yym1719 := z.DecBinary()
				_ = yym1719
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1718) {
				} else if yym1719 {
					z.DecBinaryUnmarshal(yyv1718)
				} else if !yym1719 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1718)
				} else {
					z.DecFallback(yyv1718, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1717)
		} // end switch yys1717
	} // end for yyj1717
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1720 int
	var yyb1720 bool
	var yyhl1720 bool = l >= 0
	yyj1720++
	if yyhl1720 {
		yyb1720 = yyj1720 > l
	} else {
		yyb1720 = r.CheckBreak()
	}
	if yyb1720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1721 := &x.StartedAt
		yym1722 := z.DecBinary()
		_ = yym1722
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1721) {
		} else if yym1722 {
			z.DecBinaryUnmarshal(yyv1721)
		} else if !yym1722 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1721)
		} else {
			z.DecFallback(yyv1721, false)
		}
	}
	for {
		yyj1720++
		if yyhl1720 {
			yyb1720 = yyj1720 > l
		} else {
			yyb1720 = r.CheckBreak()
		}
		if yyb1720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1723 := z.EncBinary()
		_ = yym1723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1724 := !z.EncBinary()
			yy2arr1724 := z.EncBasicHandle().StructToArray
			var yyq1724 [7]bool
			_, _, _ = yysep1724, yyq1724, yy2arr1724
			const yyr1724 bool = false
			yyq1724[1] = x.Signal != 0
			yyq1724[2] = x.Reason != ""
			yyq1724[3] = x.Message != ""
			yyq1724[4] = true
			yyq1724[5] = true
			yyq1724[6] = x.ContainerID != ""
			var yynn1724 int
			if yyr1724 || yy2arr1724 {
				r.EncodeArrayStart(7)
			} else {
				yynn1724 = 1
				for _, b := range yyq1724 {
					if b {
						yynn1724++
					}
				}
				r.EncodeMapStart(yynn1724)
				yynn1724 = 0
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1726 := z.EncBinary()
				_ = yym1726
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1727 := z.EncBinary()
				_ = yym1727
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[1] {
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1730 := z.EncBinary()
					_ = yym1730
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[2] {
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1724[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[3] {
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1724[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[4] {
					yy1738 := &x.StartedAt
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1738) {
					} else if yym1739 {
						z.EncBinaryMarshal(yy1738)
					} else if !yym1739 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1738)
					} else {
						z.EncFallback(yy1738)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1740 := &x.StartedAt
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1740) {
					} else if yym1741 {
						z.EncBinaryMarshal(yy1740)
					} else if !yym1741 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1740)
					} else {
						z.EncFallback(yy1740)
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[5] {
					yy1743 := &x.FinishedAt
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1743) {
					} else if yym1744 {
						z.EncBinaryMarshal(yy1743)
					} else if !yym1744 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1743)
					} else {
						z.EncFallback(yy1743)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1745 := &x.FinishedAt
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1745) {
					} else if yym1746 {
						z.EncBinaryMarshal(yy1745)
					} else if !yym1746 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1745)
					} else {
						z.EncFallback(yy1745)
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[6] {
					yym1748 := z.EncBinary()
					_ = yym1748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1724[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1749 := z.EncBinary()
					_ = yym1749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1750 := z.DecBinary()
	_ = yym1750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1751 := r.ContainerType()
		if yyct1751 == codecSelferValueTypeMap1234 {
			yyl1751 := r.ReadMapStart()
			if yyl1751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1751, d)
			}
		} else if yyct1751 == codecSelferValueTypeArray1234 {
			yyl1751 := r.ReadArrayStart()
			if yyl1751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1752Slc
	var yyhl1752 bool = l >= 0
	for yyj1752 := 0; ; yyj1752++ {
		if yyhl1752 {
			if yyj1752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1752Slc = r.DecodeBytes(yys1752Slc, true, true)
		yys1752 := string(yys1752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1752 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1757 := &x.StartedAt
				yym1758 := z.DecBinary()
				_ = yym1758
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1757) {
				} else if yym1758 {
					z.DecBinaryUnmarshal(yyv1757)
				} else if !yym1758 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1757)
				} else {
					z.DecFallback(yyv1757, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1759 := &x.FinishedAt
				yym1760 := z.DecBinary()
				_ = yym1760
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1759) {
				} else if yym1760 {
					z.DecBinaryUnmarshal(yyv1759)
				} else if !yym1760 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1759)
				} else {
					z.DecFallback(yyv1759, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1752)
		} // end switch yys1752
	} // end for yyj1752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1762 int
	var yyb1762 bool
	var yyhl1762 bool = l >= 0
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1767 := &x.StartedAt
		yym1768 := z.DecBinary()
		_ = yym1768
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1767) {
		} else if yym1768 {
			z.DecBinaryUnmarshal(yyv1767)
		} else if !yym1768 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1767)
		} else {
			z.DecFallback(yyv1767, false)
		}
	}
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1769 := &x.FinishedAt
		yym1770 := z.DecBinary()
		_ = yym1770
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1769) {
		} else if yym1770 {
			z.DecBinaryUnmarshal(yyv1769)
		} else if !yym1770 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1769)
		} else {
			z.DecFallback(yyv1769, false)
		}
	}
	yyj1762++
	if yyhl1762 {
		yyb1762 = yyj1762 > l
	} else {
		yyb1762 = r.CheckBreak()
	}
	if yyb1762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1762++
		if yyhl1762 {
			yyb1762 = yyj1762 > l
		} else {
			yyb1762 = r.CheckBreak()
		}
		if yyb1762 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1762-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1772 := z.EncBinary()
		_ = yym1772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1773 := !z.EncBinary()
			yy2arr1773 := z.EncBasicHandle().StructToArray
			var yyq1773 [3]bool
			_, _, _ = yysep1773, yyq1773, yy2arr1773
			const yyr1773 bool = false
			yyq1773[0] = x.Waiting != nil
			yyq1773[1] = x.Running != nil
			yyq1773[2] = x.Terminated != nil
			var yynn1773 int
			if yyr1773 || yy2arr1773 {
				r.EncodeArrayStart(3)
			} else {
				yynn1773 = 0
				for _, b := range yyq1773 {
					if b {
						yynn1773++
					}
				}
				r.EncodeMapStart(yynn1773)
				yynn1773 = 0
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1773[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1773[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1773[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1773[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1773[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1773[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1777 := z.DecBinary()
	_ = yym1777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1778 := r.ContainerType()
		if yyct1778 == codecSelferValueTypeMap1234 {
			yyl1778 := r.ReadMapStart()
			if yyl1778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1778, d)
			}
		} else if yyct1778 == codecSelferValueTypeArray1234 {
			yyl1778 := r.ReadArrayStart()
			if yyl1778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1779Slc
	var yyhl1779 bool = l >= 0
	for yyj1779 := 0; ; yyj1779++ {
		if yyhl1779 {
			if yyj1779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1779Slc = r.DecodeBytes(yys1779Slc, true, true)
		yys1779 := string(yys1779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1779 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1779)
		} // end switch yys1779
	} // end for yyj1779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1783 int
	var yyb1783 bool
	var yyhl1783 bool = l >= 0
	yyj1783++
	if yyhl1783 {
		yyb1783 = yyj1783 > l
	} else {
		yyb1783 = r.CheckBreak()
	}
	if yyb1783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1783++
	if yyhl1783 {
		yyb1783 = yyj1783 > l
	} else {
		yyb1783 = r.CheckBreak()
	}
	if yyb1783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1783++
	if yyhl1783 {
		yyb1783 = yyj1783 > l
	} else {
		yyb1783 = r.CheckBreak()
	}
	if yyb1783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1783++
		if yyhl1783 {
			yyb1783 = yyj1783 > l
		} else {
			yyb1783 = r.CheckBreak()
		}
		if yyb1783 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1783-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1787 := z.EncBinary()
		_ = yym1787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1788 := !z.EncBinary()
			yy2arr1788 := z.EncBasicHandle().StructToArray
			var yyq1788 [8]bool
			_, _, _ = yysep1788, yyq1788, yy2arr1788
			const yyr1788 bool = false
			yyq1788[1] = true
			yyq1788[2] = true
			yyq1788[7] = x.ContainerID != ""
			var yynn1788 int
			if yyr1788 || yy2arr1788 {
				r.EncodeArrayStart(8)
			} else {
				yynn1788 = 5
				for _, b := range yyq1788 {
					if b {
						yynn1788++
					}
				}
				r.EncodeMapStart(yynn1788)
				yynn1788 = 0
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1790 := z.EncBinary()
				_ = yym1790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1791 := z.EncBinary()
				_ = yym1791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[1] {
					yy1793 := &x.State
					yy1793.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1794 := &x.State
					yy1794.CodecEncodeSelf(e)
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[2] {
					yy1796 := &x.LastTerminationState
					yy1796.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1797 := &x.LastTerminationState
					yy1797.CodecEncodeSelf(e)
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1799 := z.EncBinary()
				_ = yym1799
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1800 := z.EncBinary()
				_ = yym1800
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1802 := z.EncBinary()
				_ = yym1802
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1803 := z.EncBinary()
				_ = yym1803
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1805 := z.EncBinary()
				_ = yym1805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1806 := z.EncBinary()
				_ = yym1806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1808 := z.EncBinary()
				_ = yym1808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1809 := z.EncBinary()
				_ = yym1809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[7] {
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1788[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1812 := z.EncBinary()
					_ = yym1812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1813 := z.DecBinary()
	_ = yym1813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1814 := r.ContainerType()
		if yyct1814 == codecSelferValueTypeMap1234 {
			yyl1814 := r.ReadMapStart()
			if yyl1814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1814, d)
			}
		} else if yyct1814 == codecSelferValueTypeArray1234 {
			yyl1814 := r.ReadArrayStart()
			if yyl1814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1815Slc
	var yyhl1815 bool = l >= 0
	for yyj1815 := 0; ; yyj1815++ {
		if yyhl1815 {
			if yyj1815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1815Slc = r.DecodeBytes(yys1815Slc, true, true)
		yys1815 := string(yys1815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1815 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1817 := &x.State
				yyv1817.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1818 := &x.LastTerminationState
				yyv1818.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1815)
		} // end switch yys1815
	} // end for yyj1815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1824 int
	var yyb1824 bool
	var yyhl1824 bool = l >= 0
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1826 := &x.State
		yyv1826.CodecDecodeSelf(d)
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1827 := &x.LastTerminationState
		yyv1827.CodecDecodeSelf(d)
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1824++
		if yyhl1824 {
			yyb1824 = yyj1824 > l
		} else {
			yyb1824 = r.CheckBreak()
		}
		if yyb1824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1833 := z.EncBinary()
	_ = yym1833
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1834 := z.DecBinary()
	_ = yym1834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1835 := z.EncBinary()
	_ = yym1835
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1836 := z.DecBinary()
	_ = yym1836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1837 := z.EncBinary()
		_ = yym1837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1838 := !z.EncBinary()
			yy2arr1838 := z.EncBasicHandle().StructToArray
			var yyq1838 [6]bool
			_, _, _ = yysep1838, yyq1838, yy2arr1838
			const yyr1838 bool = false
			yyq1838[2] = true
			yyq1838[3] = true
			yyq1838[4] = x.Reason != ""
			yyq1838[5] = x.Message != ""
			var yynn1838 int
			if yyr1838 || yy2arr1838 {
				r.EncodeArrayStart(6)
			} else {
				yynn1838 = 2
				for _, b := range yyq1838 {
					if b {
						yynn1838++
					}
				}
				r.EncodeMapStart(yynn1838)
				yynn1838 = 0
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[2] {
					yy1842 := &x.LastProbeTime
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1842) {
					} else if yym1843 {
						z.EncBinaryMarshal(yy1842)
					} else if !yym1843 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1842)
					} else {
						z.EncFallback(yy1842)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1844 := &x.LastProbeTime
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1844) {
					} else if yym1845 {
						z.EncBinaryMarshal(yy1844)
					} else if !yym1845 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1844)
					} else {
						z.EncFallback(yy1844)
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[3] {
					yy1847 := &x.LastTransitionTime
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1847) {
					} else if yym1848 {
						z.EncBinaryMarshal(yy1847)
					} else if !yym1848 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1847)
					} else {
						z.EncFallback(yy1847)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1849 := &x.LastTransitionTime
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1849) {
					} else if yym1850 {
						z.EncBinaryMarshal(yy1849)
					} else if !yym1850 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1849)
					} else {
						z.EncFallback(yy1849)
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[4] {
					yym1852 := z.EncBinary()
					_ = yym1852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1838[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[5] {
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1838[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1856 := z.EncBinary()
					_ = yym1856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1857 := z.DecBinary()
	_ = yym1857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1858 := r.ContainerType()
		if yyct1858 == codecSelferValueTypeMap1234 {
			yyl1858 := r.ReadMapStart()
			if yyl1858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1858, d)
			}
		} else if yyct1858 == codecSelferValueTypeArray1234 {
			yyl1858 := r.ReadArrayStart()
			if yyl1858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1859Slc
	var yyhl1859 bool = l >= 0
	for yyj1859 := 0; ; yyj1859++ {
		if yyhl1859 {
			if yyj1859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1859Slc = r.DecodeBytes(yys1859Slc, true, true)
		yys1859 := string(yys1859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1859 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1862 := &x.LastProbeTime
				yym1863 := z.DecBinary()
				_ = yym1863
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1862) {
				} else if yym1863 {
					z.DecBinaryUnmarshal(yyv1862)
				} else if !yym1863 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1862)
				} else {
					z.DecFallback(yyv1862, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1864 := &x.LastTransitionTime
				yym1865 := z.DecBinary()
				_ = yym1865
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1864) {
				} else if yym1865 {
					z.DecBinaryUnmarshal(yyv1864)
				} else if !yym1865 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1864)
				} else {
					z.DecFallback(yyv1864, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1859)
		} // end switch yys1859
	} // end for yyj1859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1868 int
	var yyb1868 bool
	var yyhl1868 bool = l >= 0
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1871 := &x.LastProbeTime
		yym1872 := z.DecBinary()
		_ = yym1872
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1871) {
		} else if yym1872 {
			z.DecBinaryUnmarshal(yyv1871)
		} else if !yym1872 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1871)
		} else {
			z.DecFallback(yyv1871, false)
		}
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1873 := &x.LastTransitionTime
		yym1874 := z.DecBinary()
		_ = yym1874
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1873) {
		} else if yym1874 {
			z.DecBinaryUnmarshal(yyv1873)
		} else if !yym1874 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1873)
		} else {
			z.DecFallback(yyv1873, false)
		}
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1868++
		if yyhl1868 {
			yyb1868 = yyj1868 > l
		} else {
			yyb1868 = r.CheckBreak()
		}
		if yyb1868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1877 := z.EncBinary()
	_ = yym1877
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1878 := z.DecBinary()
	_ = yym1878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1879 := z.EncBinary()
		_ = yym1879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1880 := !z.EncBinary()
			yy2arr1880 := z.EncBasicHandle().StructToArray
			var yyq1880 [4]bool
			_, _, _ = yysep1880, yyq1880, yy2arr1880
			const yyr1880 bool = false
			yyq1880[0] = x.Kind != ""
			yyq1880[1] = x.APIVersion != ""
			yyq1880[2] = true
			var yynn1880 int
			if yyr1880 || yy2arr1880 {
				r.EncodeArrayStart(4)
			} else {
				yynn1880 = 1
				for _, b := range yyq1880 {
					if b {
						yynn1880++
					}
				}
				r.EncodeMapStart(yynn1880)
				yynn1880 = 0
			}
			if yyr1880 || yy2arr1880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1880[0] {
					yym1882 := z.EncBinary()
					_ = yym1882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1880[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1883 := z.EncBinary()
					_ = yym1883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1880[1] {
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1880[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1886 := z.EncBinary()
					_ = yym1886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1880[2] {
					yy1888 := &x.ListMeta
					yym1889 := z.EncBinary()
					_ = yym1889
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1888) {
					} else {
						z.EncFallback(yy1888)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1880[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1890 := &x.ListMeta
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1890) {
					} else {
						z.EncFallback(yy1890)
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1893 := z.EncBinary()
					_ = yym1893
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1895 := z.DecBinary()
	_ = yym1895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1896 := r.ContainerType()
		if yyct1896 == codecSelferValueTypeMap1234 {
			yyl1896 := r.ReadMapStart()
			if yyl1896 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1896, d)
			}
		} else if yyct1896 == codecSelferValueTypeArray1234 {
			yyl1896 := r.ReadArrayStart()
			if yyl1896 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1896, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1897Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1897Slc
	var yyhl1897 bool = l >= 0
	for yyj1897 := 0; ; yyj1897++ {
		if yyhl1897 {
			if yyj1897 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1897Slc = r.DecodeBytes(yys1897Slc, true, true)
		yys1897 := string(yys1897Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1897 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1900 := &x.ListMeta
				yym1901 := z.DecBinary()
				_ = yym1901
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1900) {
				} else {
					z.DecFallback(yyv1900, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1902 := &x.Items
				yym1903 := z.DecBinary()
				_ = yym1903
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1902), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1897)
		} // end switch yys1897
	} // end for yyj1897
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1904 int
	var yyb1904 bool
	var yyhl1904 bool = l >= 0
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1907 := &x.ListMeta
		yym1908 := z.DecBinary()
		_ = yym1908
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1907) {
		} else {
			z.DecFallback(yyv1907, false)
		}
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1909 := &x.Items
		yym1910 := z.DecBinary()
		_ = yym1910
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1909), d)
		}
	}
	for {
		yyj1904++
		if yyhl1904 {
			yyb1904 = yyj1904 > l
		} else {
			yyb1904 = r.CheckBreak()
		}
		if yyb1904 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1904-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1911 := z.EncBinary()
	_ = yym1911
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1913 := z.EncBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1914 := !z.EncBinary()
			yy2arr1914 := z.EncBasicHandle().StructToArray
			var yyq1914 [1]bool
			_, _, _ = yysep1914, yyq1914, yy2arr1914
			const yyr1914 bool = false
			var yynn1914 int
			if yyr1914 || yy2arr1914 {
				r.EncodeArrayStart(1)
			} else {
				yynn1914 = 1
				for _, b := range yyq1914 {
					if b {
						yynn1914++
					}
				}
				r.EncodeMapStart(yynn1914)
				yynn1914 = 0
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1918 := z.DecBinary()
	_ = yym1918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1919 := r.ContainerType()
		if yyct1919 == codecSelferValueTypeMap1234 {
			yyl1919 := r.ReadMapStart()
			if yyl1919 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1919, d)
			}
		} else if yyct1919 == codecSelferValueTypeArray1234 {
			yyl1919 := r.ReadArrayStart()
			if yyl1919 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1920Slc
	var yyhl1920 bool = l >= 0
	for yyj1920 := 0; ; yyj1920++ {
		if yyhl1920 {
			if yyj1920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1920Slc = r.DecodeBytes(yys1920Slc, true, true)
		yys1920 := string(yys1920Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1920 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1921 := &x.NodeSelectorTerms
				yym1922 := z.DecBinary()
				_ = yym1922
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1921), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1920)
		} // end switch yys1920
	} // end for yyj1920
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1923 int
	var yyb1923 bool
	var yyhl1923 bool = l >= 0
	yyj1923++
	if yyhl1923 {
		yyb1923 = yyj1923 > l
	} else {
		yyb1923 = r.CheckBreak()
	}
	if yyb1923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1924 := &x.NodeSelectorTerms
		yym1925 := z.DecBinary()
		_ = yym1925
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1924), d)
		}
	}
	for {
		yyj1923++
		if yyhl1923 {
			yyb1923 = yyj1923 > l
		} else {
			yyb1923 = r.CheckBreak()
		}
		if yyb1923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1926 := z.EncBinary()
		_ = yym1926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1927 := !z.EncBinary()
			yy2arr1927 := z.EncBasicHandle().StructToArray
			var yyq1927 [1]bool
			_, _, _ = yysep1927, yyq1927, yy2arr1927
			const yyr1927 bool = false
			var yynn1927 int
			if yyr1927 || yy2arr1927 {
				r.EncodeArrayStart(1)
			} else {
				yynn1927 = 1
				for _, b := range yyq1927 {
					if b {
						yynn1927++
					}
				}
				r.EncodeMapStart(yynn1927)
				yynn1927 = 0
			}
			if yyr1927 || yy2arr1927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1929 := z.EncBinary()
					_ = yym1929
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1927 || yy2arr1927 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1931 := z.DecBinary()
	_ = yym1931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1932 := r.ContainerType()
		if yyct1932 == codecSelferValueTypeMap1234 {
			yyl1932 := r.ReadMapStart()
			if yyl1932 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1932, d)
			}
		} else if yyct1932 == codecSelferValueTypeArray1234 {
			yyl1932 := r.ReadArrayStart()
			if yyl1932 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1933Slc
	var yyhl1933 bool = l >= 0
	for yyj1933 := 0; ; yyj1933++ {
		if yyhl1933 {
			if yyj1933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1933Slc = r.DecodeBytes(yys1933Slc, true, true)
		yys1933 := string(yys1933Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1933 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1934 := &x.MatchExpressions
				yym1935 := z.DecBinary()
				_ = yym1935
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1934), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1933)
		} // end switch yys1933
	} // end for yyj1933
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1936 int
	var yyb1936 bool
	var yyhl1936 bool = l >= 0
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1937 := &x.MatchExpressions
		yym1938 := z.DecBinary()
		_ = yym1938
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1937), d)
		}
	}
	for {
		yyj1936++
		if yyhl1936 {
			yyb1936 = yyj1936 > l
		} else {
			yyb1936 = r.CheckBreak()
		}
		if yyb1936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1939 := z.EncBinary()
		_ = yym1939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1940 := !z.EncBinary()
			yy2arr1940 := z.EncBasicHandle().StructToArray
			var yyq1940 [3]bool
			_, _, _ = yysep1940, yyq1940, yy2arr1940
			const yyr1940 bool = false
			yyq1940[2] = len(x.Values) != 0
			var yynn1940 int
			if yyr1940 || yy2arr1940 {
				r.EncodeArrayStart(3)
			} else {
				yynn1940 = 2
				for _, b := range yyq1940 {
					if b {
						yynn1940++
					}
				}
				r.EncodeMapStart(yynn1940)
				yynn1940 = 0
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1942 := z.EncBinary()
				_ = yym1942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1943 := z.EncBinary()
				_ = yym1943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1940[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1946 := z.EncBinary()
						_ = yym1946
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1940[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1947 := z.EncBinary()
						_ = yym1947
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1948 := z.DecBinary()
	_ = yym1948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1949 := r.ContainerType()
		if yyct1949 == codecSelferValueTypeMap1234 {
			yyl1949 := r.ReadMapStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1949, d)
			}
		} else if yyct1949 == codecSelferValueTypeArray1234 {
			yyl1949 := r.ReadArrayStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1950Slc
	var yyhl1950 bool = l >= 0
	for yyj1950 := 0; ; yyj1950++ {
		if yyhl1950 {
			if yyj1950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1950Slc = r.DecodeBytes(yys1950Slc, true, true)
		yys1950 := string(yys1950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1950 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1953 := &x.Values
				yym1954 := z.DecBinary()
				_ = yym1954
				if false {
				} else {
					z.F.DecSliceStringX(yyv1953, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1950)
		} // end switch yys1950
	} // end for yyj1950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1955 int
	var yyb1955 bool
	var yyhl1955 bool = l >= 0
	yyj1955++
	if yyhl1955 {
		yyb1955 = yyj1955 > l
	} else {
		yyb1955 = r.CheckBreak()
	}
	if yyb1955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1955++
	if yyhl1955 {
		yyb1955 = yyj1955 > l
	} else {
		yyb1955 = r.CheckBreak()
	}
	if yyb1955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1955++
	if yyhl1955 {
		yyb1955 = yyj1955 > l
	} else {
		yyb1955 = r.CheckBreak()
	}
	if yyb1955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1958 := &x.Values
		yym1959 := z.DecBinary()
		_ = yym1959
		if false {
		} else {
			z.F.DecSliceStringX(yyv1958, false, d)
		}
	}
	for {
		yyj1955++
		if yyhl1955 {
			yyb1955 = yyj1955 > l
		} else {
			yyb1955 = r.CheckBreak()
		}
		if yyb1955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1960 := z.EncBinary()
	_ = yym1960
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1961 := z.DecBinary()
	_ = yym1961
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1962 := z.EncBinary()
		_ = yym1962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1963 := !z.EncBinary()
			yy2arr1963 := z.EncBasicHandle().StructToArray
			var yyq1963 [3]bool
			_, _, _ = yysep1963, yyq1963, yy2arr1963
			const yyr1963 bool = false
			yyq1963[0] = x.NodeAffinity != nil
			yyq1963[1] = x.PodAffinity != nil
			yyq1963[2] = x.PodAntiAffinity != nil
			var yynn1963 int
			if yyr1963 || yy2arr1963 {
				r.EncodeArrayStart(3)
			} else {
				yynn1963 = 0
				for _, b := range yyq1963 {
					if b {
						yynn1963++
					}
				}
				r.EncodeMapStart(yynn1963)
				yynn1963 = 0
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1963[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1963 || yy2arr1963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1967 := z.DecBinary()
	_ = yym1967
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1968 := r.ContainerType()
		if yyct1968 == codecSelferValueTypeMap1234 {
			yyl1968 := r.ReadMapStart()
			if yyl1968 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1968, d)
			}
		} else if yyct1968 == codecSelferValueTypeArray1234 {
			yyl1968 := r.ReadArrayStart()
			if yyl1968 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1968, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1969Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1969Slc
	var yyhl1969 bool = l >= 0
	for yyj1969 := 0; ; yyj1969++ {
		if yyhl1969 {
			if yyj1969 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1969Slc = r.DecodeBytes(yys1969Slc, true, true)
		yys1969 := string(yys1969Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1969 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1969)
		} // end switch yys1969
	} // end for yyj1969
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1973 int
	var yyb1973 bool
	var yyhl1973 bool = l >= 0
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1973++
	if yyhl1973 {
		yyb1973 = yyj1973 > l
	} else {
		yyb1973 = r.CheckBreak()
	}
	if yyb1973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1973++
		if yyhl1973 {
			yyb1973 = yyj1973 > l
		} else {
			yyb1973 = r.CheckBreak()
		}
		if yyb1973 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1973-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1977 := z.EncBinary()
		_ = yym1977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1978 := !z.EncBinary()
			yy2arr1978 := z.EncBasicHandle().StructToArray
			var yyq1978 [2]bool
			_, _, _ = yysep1978, yyq1978, yy2arr1978
			const yyr1978 bool = false
			yyq1978[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1978[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1978 int
			if yyr1978 || yy2arr1978 {
				r.EncodeArrayStart(2)
			} else {
				yynn1978 = 0
				for _, b := range yyq1978 {
					if b {
						yynn1978++
					}
				}
				r.EncodeMapStart(yynn1978)
				yynn1978 = 0
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1980 := z.EncBinary()
						_ = yym1980
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1981 := z.EncBinary()
						_ = yym1981
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1983 := z.EncBinary()
						_ = yym1983
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1984 := z.EncBinary()
						_ = yym1984
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1985 := z.DecBinary()
	_ = yym1985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1986 := r.ContainerType()
		if yyct1986 == codecSelferValueTypeMap1234 {
			yyl1986 := r.ReadMapStart()
			if yyl1986 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1986, d)
			}
		} else if yyct1986 == codecSelferValueTypeArray1234 {
			yyl1986 := r.ReadArrayStart()
			if yyl1986 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1987Slc
	var yyhl1987 bool = l >= 0
	for yyj1987 := 0; ; yyj1987++ {
		if yyhl1987 {
			if yyj1987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1987Slc = r.DecodeBytes(yys1987Slc, true, true)
		yys1987 := string(yys1987Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1987 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1988 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1989 := z.DecBinary()
				_ = yym1989
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1988), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1990 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1991 := z.DecBinary()
				_ = yym1991
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1990), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1987)
		} // end switch yys1987
	} // end for yyj1987
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1992 int
	var yyb1992 bool
	var yyhl1992 bool = l >= 0
	yyj1992++
	if yyhl1992 {
		yyb1992 = yyj1992 > l
	} else {
		yyb1992 = r.CheckBreak()
	}
	if yyb1992 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1993 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1994 := z.DecBinary()
		_ = yym1994
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1993), d)
		}
	}
	yyj1992++
	if yyhl1992 {
		yyb1992 = yyj1992 > l
	} else {
		yyb1992 = r.CheckBreak()
	}
	if yyb1992 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1995 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1996 := z.DecBinary()
		_ = yym1996
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1995), d)
		}
	}
	for {
		yyj1992++
		if yyhl1992 {
			yyb1992 = yyj1992 > l
		} else {
			yyb1992 = r.CheckBreak()
		}
		if yyb1992 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1992-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1997 := z.EncBinary()
		_ = yym1997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1998 := !z.EncBinary()
			yy2arr1998 := z.EncBasicHandle().StructToArray
			var yyq1998 [2]bool
			_, _, _ = yysep1998, yyq1998, yy2arr1998
			const yyr1998 bool = false
			yyq1998[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1998[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1998 int
			if yyr1998 || yy2arr1998 {
				r.EncodeArrayStart(2)
			} else {
				yynn1998 = 0
				for _, b := range yyq1998 {
					if b {
						yynn1998++
					}
				}
				r.EncodeMapStart(yynn1998)
				yynn1998 = 0
			}
			if yyr1998 || yy2arr1998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1998[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2000 := z.EncBinary()
						_ = yym2000
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1998[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2001 := z.EncBinary()
						_ = yym2001
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1998 || yy2arr1998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1998[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2003 := z.EncBinary()
						_ = yym2003
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1998[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2004 := z.EncBinary()
						_ = yym2004
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1998 || yy2arr1998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2005 := z.DecBinary()
	_ = yym2005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2006 := r.ContainerType()
		if yyct2006 == codecSelferValueTypeMap1234 {
			yyl2006 := r.ReadMapStart()
			if yyl2006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2006, d)
			}
		} else if yyct2006 == codecSelferValueTypeArray1234 {
			yyl2006 := r.ReadArrayStart()
			if yyl2006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2007Slc
	var yyhl2007 bool = l >= 0
	for yyj2007 := 0; ; yyj2007++ {
		if yyhl2007 {
			if yyj2007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2007Slc = r.DecodeBytes(yys2007Slc, true, true)
		yys2007 := string(yys2007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2007 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2008 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym2009 := z.DecBinary()
				_ = yym2009
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2008), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2010 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2011 := z.DecBinary()
				_ = yym2011
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2007)
		} // end switch yys2007
	} // end for yyj2007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2012 int
	var yyb2012 bool
	var yyhl2012 bool = l >= 0
	yyj2012++
	if yyhl2012 {
		yyb2012 = yyj2012 > l
	} else {
		yyb2012 = r.CheckBreak()
	}
	if yyb2012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2013 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym2014 := z.DecBinary()
		_ = yym2014
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2013), d)
		}
	}
	yyj2012++
	if yyhl2012 {
		yyb2012 = yyj2012 > l
	} else {
		yyb2012 = r.CheckBreak()
	}
	if yyb2012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2015 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2016 := z.DecBinary()
		_ = yym2016
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2015), d)
		}
	}
	for {
		yyj2012++
		if yyhl2012 {
			yyb2012 = yyj2012 > l
		} else {
			yyb2012 = r.CheckBreak()
		}
		if yyb2012 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2012-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2017 := z.EncBinary()
		_ = yym2017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2018 := !z.EncBinary()
			yy2arr2018 := z.EncBasicHandle().StructToArray
			var yyq2018 [2]bool
			_, _, _ = yysep2018, yyq2018, yy2arr2018
			const yyr2018 bool = false
			var yynn2018 int
			if yyr2018 || yy2arr2018 {
				r.EncodeArrayStart(2)
			} else {
				yynn2018 = 2
				for _, b := range yyq2018 {
					if b {
						yynn2018++
					}
				}
				r.EncodeMapStart(yynn2018)
				yynn2018 = 0
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2020 := z.EncBinary()
				_ = yym2020
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2021 := z.EncBinary()
				_ = yym2021
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2023 := &x.PodAffinityTerm
				yy2023.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2024 := &x.PodAffinityTerm
				yy2024.CodecEncodeSelf(e)
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2025 := z.DecBinary()
	_ = yym2025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2026 := r.ContainerType()
		if yyct2026 == codecSelferValueTypeMap1234 {
			yyl2026 := r.ReadMapStart()
			if yyl2026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2026, d)
			}
		} else if yyct2026 == codecSelferValueTypeArray1234 {
			yyl2026 := r.ReadArrayStart()
			if yyl2026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2027Slc
	var yyhl2027 bool = l >= 0
	for yyj2027 := 0; ; yyj2027++ {
		if yyhl2027 {
			if yyj2027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2027Slc = r.DecodeBytes(yys2027Slc, true, true)
		yys2027 := string(yys2027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2027 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv2029 := &x.PodAffinityTerm
				yyv2029.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2027)
		} // end switch yys2027
	} // end for yyj2027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2030 int
	var yyb2030 bool
	var yyhl2030 bool = l >= 0
	yyj2030++
	if yyhl2030 {
		yyb2030 = yyj2030 > l
	} else {
		yyb2030 = r.CheckBreak()
	}
	if yyb2030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2030++
	if yyhl2030 {
		yyb2030 = yyj2030 > l
	} else {
		yyb2030 = r.CheckBreak()
	}
	if yyb2030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv2032 := &x.PodAffinityTerm
		yyv2032.CodecDecodeSelf(d)
	}
	for {
		yyj2030++
		if yyhl2030 {
			yyb2030 = yyj2030 > l
		} else {
			yyb2030 = r.CheckBreak()
		}
		if yyb2030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2033 := z.EncBinary()
		_ = yym2033
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2034 := !z.EncBinary()
			yy2arr2034 := z.EncBasicHandle().StructToArray
			var yyq2034 [3]bool
			_, _, _ = yysep2034, yyq2034, yy2arr2034
			const yyr2034 bool = false
			yyq2034[0] = x.LabelSelector != nil
			yyq2034[2] = x.TopologyKey != ""
			var yynn2034 int
			if yyr2034 || yy2arr2034 {
				r.EncodeArrayStart(3)
			} else {
				yynn2034 = 1
				for _, b := range yyq2034 {
					if b {
						yynn2034++
					}
				}
				r.EncodeMapStart(yynn2034)
				yynn2034 = 0
			}
			if yyr2034 || yy2arr2034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2034[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2036 := z.EncBinary()
						_ = yym2036
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2034[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr2034 || yy2arr2034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2039 := z.EncBinary()
					_ = yym2039
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr2034 || yy2arr2034 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2034[2] {
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2034[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr2034 || yy2arr2034 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2044 := z.DecBinary()
	_ = yym2044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2045 := r.ContainerType()
		if yyct2045 == codecSelferValueTypeMap1234 {
			yyl2045 := r.ReadMapStart()
			if yyl2045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2045, d)
			}
		} else if yyct2045 == codecSelferValueTypeArray1234 {
			yyl2045 := r.ReadArrayStart()
			if yyl2045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2046Slc
	var yyhl2046 bool = l >= 0
	for yyj2046 := 0; ; yyj2046++ {
		if yyhl2046 {
			if yyj2046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2046Slc = r.DecodeBytes(yys2046Slc, true, true)
		yys2046 := string(yys2046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2046 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym2048 := z.DecBinary()
				_ = yym2048
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2049 := &x.Namespaces
				yym2050 := z.DecBinary()
				_ = yym2050
				if false {
				} else {
					z.F.DecSliceStringX(yyv2049, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2046)
		} // end switch yys2046
	} // end for yyj2046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2052 int
	var yyb2052 bool
	var yyhl2052 bool = l >= 0
	yyj2052++
	if yyhl2052 {
		yyb2052 = yyj2052 > l
	} else {
		yyb2052 = r.CheckBreak()
	}
	if yyb2052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym2054 := z.DecBinary()
		_ = yym2054
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj2052++
	if yyhl2052 {
		yyb2052 = yyj2052 > l
	} else {
		yyb2052 = r.CheckBreak()
	}
	if yyb2052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2055 := &x.Namespaces
		yym2056 := z.DecBinary()
		_ = yym2056
		if false {
		} else {
			z.F.DecSliceStringX(yyv2055, false, d)
		}
	}
	yyj2052++
	if yyhl2052 {
		yyb2052 = yyj2052 > l
	} else {
		yyb2052 = r.CheckBreak()
	}
	if yyb2052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj2052++
		if yyhl2052 {
			yyb2052 = yyj2052 > l
		} else {
			yyb2052 = r.CheckBreak()
		}
		if yyb2052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2058 := z.EncBinary()
		_ = yym2058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2059 := !z.EncBinary()
			yy2arr2059 := z.EncBasicHandle().StructToArray
			var yyq2059 [2]bool
			_, _, _ = yysep2059, yyq2059, yy2arr2059
			const yyr2059 bool = false
			yyq2059[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2059[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2059 int
			if yyr2059 || yy2arr2059 {
				r.EncodeArrayStart(2)
			} else {
				yynn2059 = 0
				for _, b := range yyq2059 {
					if b {
						yynn2059++
					}
				}
				r.EncodeMapStart(yynn2059)
				yynn2059 = 0
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2059[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2062 := z.EncBinary()
						_ = yym2062
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2059[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2063 := z.EncBinary()
						_ = yym2063
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2064 := z.DecBinary()
	_ = yym2064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2065 := r.ContainerType()
		if yyct2065 == codecSelferValueTypeMap1234 {
			yyl2065 := r.ReadMapStart()
			if yyl2065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2065, d)
			}
		} else if yyct2065 == codecSelferValueTypeArray1234 {
			yyl2065 := r.ReadArrayStart()
			if yyl2065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2066Slc
	var yyhl2066 bool = l >= 0
	for yyj2066 := 0; ; yyj2066++ {
		if yyhl2066 {
			if yyj2066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2066Slc = r.DecodeBytes(yys2066Slc, true, true)
		yys2066 := string(yys2066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2066 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2068 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2069 := z.DecBinary()
				_ = yym2069
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2068), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2066)
		} // end switch yys2066
	} // end for yyj2066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2070 int
	var yyb2070 bool
	var yyhl2070 bool = l >= 0
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2070++
	if yyhl2070 {
		yyb2070 = yyj2070 > l
	} else {
		yyb2070 = r.CheckBreak()
	}
	if yyb2070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2072 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2072), d)
		}
	}
	for {
		yyj2070++
		if yyhl2070 {
			yyb2070 = yyj2070 > l
		} else {
			yyb2070 = r.CheckBreak()
		}
		if yyb2070 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2070-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2074 := z.EncBinary()
		_ = yym2074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2075 := !z.EncBinary()
			yy2arr2075 := z.EncBasicHandle().StructToArray
			var yyq2075 [2]bool
			_, _, _ = yysep2075, yyq2075, yy2arr2075
			const yyr2075 bool = false
			var yynn2075 int
			if yyr2075 || yy2arr2075 {
				r.EncodeArrayStart(2)
			} else {
				yynn2075 = 2
				for _, b := range yyq2075 {
					if b {
						yynn2075++
					}
				}
				r.EncodeMapStart(yynn2075)
				yynn2075 = 0
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2077 := z.EncBinary()
				_ = yym2077
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2078 := z.EncBinary()
				_ = yym2078
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2080 := &x.Preference
				yy2080.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2081 := &x.Preference
				yy2081.CodecEncodeSelf(e)
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2082 := z.DecBinary()
	_ = yym2082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2083 := r.ContainerType()
		if yyct2083 == codecSelferValueTypeMap1234 {
			yyl2083 := r.ReadMapStart()
			if yyl2083 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2083, d)
			}
		} else if yyct2083 == codecSelferValueTypeArray1234 {
			yyl2083 := r.ReadArrayStart()
			if yyl2083 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2083, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2084Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2084Slc
	var yyhl2084 bool = l >= 0
	for yyj2084 := 0; ; yyj2084++ {
		if yyhl2084 {
			if yyj2084 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2084Slc = r.DecodeBytes(yys2084Slc, true, true)
		yys2084 := string(yys2084Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2084 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2086 := &x.Preference
				yyv2086.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2084)
		} // end switch yys2084
	} // end for yyj2084
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2087 int
	var yyb2087 bool
	var yyhl2087 bool = l >= 0
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2089 := &x.Preference
		yyv2089.CodecDecodeSelf(d)
	}
	for {
		yyj2087++
		if yyhl2087 {
			yyb2087 = yyj2087 > l
		} else {
			yyb2087 = r.CheckBreak()
		}
		if yyb2087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2090 := z.EncBinary()
		_ = yym2090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2091 := !z.EncBinary()
			yy2arr2091 := z.EncBasicHandle().StructToArray
			var yyq2091 [3]bool
			_, _, _ = yysep2091, yyq2091, yy2arr2091
			const yyr2091 bool = false
			yyq2091[1] = x.Value != ""
			var yynn2091 int
			if yyr2091 || yy2arr2091 {
				r.EncodeArrayStart(3)
			} else {
				yynn2091 = 2
				for _, b := range yyq2091 {
					if b {
						yynn2091++
					}
				}
				r.EncodeMapStart(yynn2091)
				yynn2091 = 0
			}
			if yyr2091 || yy2arr2091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2093 := z.EncBinary()
				_ = yym2093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2094 := z.EncBinary()
				_ = yym2094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2091 || yy2arr2091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2091[1] {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2091[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2091 || yy2arr2091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2091 || yy2arr2091 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2099 := z.DecBinary()
	_ = yym2099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2100 := r.ContainerType()
		if yyct2100 == codecSelferValueTypeMap1234 {
			yyl2100 := r.ReadMapStart()
			if yyl2100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2100, d)
			}
		} else if yyct2100 == codecSelferValueTypeArray1234 {
			yyl2100 := r.ReadArrayStart()
			if yyl2100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2101Slc
	var yyhl2101 bool = l >= 0
	for yyj2101 := 0; ; yyj2101++ {
		if yyhl2101 {
			if yyj2101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2101Slc = r.DecodeBytes(yys2101Slc, true, true)
		yys2101 := string(yys2101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2101 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2101)
		} // end switch yys2101
	} // end for yyj2101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2105 int
	var yyb2105 bool
	var yyhl2105 bool = l >= 0
	yyj2105++
	if yyhl2105 {
		yyb2105 = yyj2105 > l
	} else {
		yyb2105 = r.CheckBreak()
	}
	if yyb2105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2105++
	if yyhl2105 {
		yyb2105 = yyj2105 > l
	} else {
		yyb2105 = r.CheckBreak()
	}
	if yyb2105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2105++
	if yyhl2105 {
		yyb2105 = yyj2105 > l
	} else {
		yyb2105 = r.CheckBreak()
	}
	if yyb2105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2105++
		if yyhl2105 {
			yyb2105 = yyj2105 > l
		} else {
			yyb2105 = r.CheckBreak()
		}
		if yyb2105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2109 := z.EncBinary()
	_ = yym2109
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2110 := z.DecBinary()
	_ = yym2110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2111 := z.EncBinary()
		_ = yym2111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2112 := !z.EncBinary()
			yy2arr2112 := z.EncBasicHandle().StructToArray
			var yyq2112 [4]bool
			_, _, _ = yysep2112, yyq2112, yy2arr2112
			const yyr2112 bool = false
			yyq2112[0] = x.Key != ""
			yyq2112[1] = x.Operator != ""
			yyq2112[2] = x.Value != ""
			yyq2112[3] = x.Effect != ""
			var yynn2112 int
			if yyr2112 || yy2arr2112 {
				r.EncodeArrayStart(4)
			} else {
				yynn2112 = 0
				for _, b := range yyq2112 {
					if b {
						yynn2112++
					}
				}
				r.EncodeMapStart(yynn2112)
				yynn2112 = 0
			}
			if yyr2112 || yy2arr2112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2112[0] {
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2112[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2112 || yy2arr2112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2112[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2112[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2112 || yy2arr2112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2112[2] {
					yym2118 := z.EncBinary()
					_ = yym2118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2112 || yy2arr2112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2112[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2112[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2112 || yy2arr2112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2121 := z.DecBinary()
	_ = yym2121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2122 := r.ContainerType()
		if yyct2122 == codecSelferValueTypeMap1234 {
			yyl2122 := r.ReadMapStart()
			if yyl2122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2122, d)
			}
		} else if yyct2122 == codecSelferValueTypeArray1234 {
			yyl2122 := r.ReadArrayStart()
			if yyl2122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2123Slc
	var yyhl2123 bool = l >= 0
	for yyj2123 := 0; ; yyj2123++ {
		if yyhl2123 {
			if yyj2123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2123Slc = r.DecodeBytes(yys2123Slc, true, true)
		yys2123 := string(yys2123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2123 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2123)
		} // end switch yys2123
	} // end for yyj2123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2128 int
	var yyb2128 bool
	var yyhl2128 bool = l >= 0
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2128++
		if yyhl2128 {
			yyb2128 = yyj2128 > l
		} else {
			yyb2128 = r.CheckBreak()
		}
		if yyb2128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2133 := z.EncBinary()
	_ = yym2133
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2134 := z.DecBinary()
	_ = yym2134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2135 := z.EncBinary()
		_ = yym2135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2136 := !z.EncBinary()
			yy2arr2136 := z.EncBasicHandle().StructToArray
			var yyq2136 [13]bool
			_, _, _ = yysep2136, yyq2136, yy2arr2136
			const yyr2136 bool = false
			yyq2136[2] = x.RestartPolicy != ""
			yyq2136[3] = x.TerminationGracePeriodSeconds != nil
			yyq2136[4] = x.ActiveDeadlineSeconds != nil
			yyq2136[5] = x.DNSPolicy != ""
			yyq2136[6] = len(x.NodeSelector) != 0
			yyq2136[8] = x.NodeName != ""
			yyq2136[9] = x.SecurityContext != nil
			yyq2136[10] = len(x.ImagePullSecrets) != 0
			yyq2136[11] = x.Hostname != ""
			yyq2136[12] = x.Subdomain != ""
			var yynn2136 int
			if yyr2136 || yy2arr2136 {
				r.EncodeArrayStart(13)
			} else {
				yynn2136 = 3
				for _, b := range yyq2136 {
					if b {
						yynn2136++
					}
				}
				r.EncodeMapStart(yynn2136)
				yynn2136 = 0
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2138 := z.EncBinary()
					_ = yym2138
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2139 := z.EncBinary()
					_ = yym2139
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2136[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2145 := *x.TerminationGracePeriodSeconds
						yym2146 := z.EncBinary()
						_ = yym2146
						if false {
						} else {
							r.EncodeInt(int64(yy2145))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2136[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2147 := *x.TerminationGracePeriodSeconds
						yym2148 := z.EncBinary()
						_ = yym2148
						if false {
						} else {
							r.EncodeInt(int64(yy2147))
						}
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2150 := *x.ActiveDeadlineSeconds
						yym2151 := z.EncBinary()
						_ = yym2151
						if false {
						} else {
							r.EncodeInt(int64(yy2150))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2136[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2152 := *x.ActiveDeadlineSeconds
						yym2153 := z.EncBinary()
						_ = yym2153
						if false {
						} else {
							r.EncodeInt(int64(yy2152))
						}
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2136[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2156 := z.EncBinary()
						_ = yym2156
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2136[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2157 := z.EncBinary()
						_ = yym2157
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2159 := z.EncBinary()
				_ = yym2159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2160 := z.EncBinary()
				_ = yym2160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[8] {
					yym2162 := z.EncBinary()
					_ = yym2162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2136[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2136[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2166 := z.EncBinary()
						_ = yym2166
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2136[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2167 := z.EncBinary()
						_ = yym2167
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[11] {
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2136[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2170 := z.EncBinary()
					_ = yym2170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2136[12] {
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2136[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2173 := z.EncBinary()
					_ = yym2173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2136 || yy2arr2136 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2174 := z.DecBinary()
	_ = yym2174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2175 := r.ContainerType()
		if yyct2175 == codecSelferValueTypeMap1234 {
			yyl2175 := r.ReadMapStart()
			if yyl2175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2175, d)
			}
		} else if yyct2175 == codecSelferValueTypeArray1234 {
			yyl2175 := r.ReadArrayStart()
			if yyl2175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2176Slc
	var yyhl2176 bool = l >= 0
	for yyj2176 := 0; ; yyj2176++ {
		if yyhl2176 {
			if yyj2176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2176Slc = r.DecodeBytes(yys2176Slc, true, true)
		yys2176 := string(yys2176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2176 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2177 := &x.Volumes
				yym2178 := z.DecBinary()
				_ = yym2178
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2177), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2179 := &x.Containers
				yym2180 := z.DecBinary()
				_ = yym2180
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2179), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2183 := z.DecBinary()
				_ = yym2183
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2185 := z.DecBinary()
				_ = yym2185
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2187 := &x.NodeSelector
				yym2188 := z.DecBinary()
				_ = yym2188
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2187, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2192 := &x.ImagePullSecrets
				yym2193 := z.DecBinary()
				_ = yym2193
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2192), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2176)
		} // end switch yys2176
	} // end for yyj2176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2196 int
	var yyb2196 bool
	var yyhl2196 bool = l >= 0
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2197 := &x.Volumes
		yym2198 := z.DecBinary()
		_ = yym2198
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2197), d)
		}
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2199 := &x.Containers
		yym2200 := z.DecBinary()
		_ = yym2200
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2199), d)
		}
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2203 := z.DecBinary()
		_ = yym2203
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2205 := z.DecBinary()
		_ = yym2205
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2207 := &x.NodeSelector
		yym2208 := z.DecBinary()
		_ = yym2208
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2207, false, d)
		}
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2212 := &x.ImagePullSecrets
		yym2213 := z.DecBinary()
		_ = yym2213
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2212), d)
		}
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2196++
		if yyhl2196 {
			yyb2196 = yyj2196 > l
		} else {
			yyb2196 = r.CheckBreak()
		}
		if yyb2196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2216 := z.EncBinary()
		_ = yym2216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2217 := !z.EncBinary()
			yy2arr2217 := z.EncBasicHandle().StructToArray
			var yyq2217 [2]bool
			_, _, _ = yysep2217, yyq2217, yy2arr2217
			const yyr2217 bool = false
			var yynn2217 int
			if yyr2217 || yy2arr2217 {
				r.EncodeArrayStart(2)
			} else {
				yynn2217 = 2
				for _, b := range yyq2217 {
					if b {
						yynn2217++
					}
				}
				r.EncodeMapStart(yynn2217)
				yynn2217 = 0
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2219 := z.EncBinary()
				_ = yym2219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2220 := z.EncBinary()
				_ = yym2220
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2222 := z.EncBinary()
				_ = yym2222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2223 := z.EncBinary()
				_ = yym2223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2224 := z.DecBinary()
	_ = yym2224
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2225 := r.ContainerType()
		if yyct2225 == codecSelferValueTypeMap1234 {
			yyl2225 := r.ReadMapStart()
			if yyl2225 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2225, d)
			}
		} else if yyct2225 == codecSelferValueTypeArray1234 {
			yyl2225 := r.ReadArrayStart()
			if yyl2225 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2225, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2226Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2226Slc
	var yyhl2226 bool = l >= 0
	for yyj2226 := 0; ; yyj2226++ {
		if yyhl2226 {
			if yyj2226 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2226Slc = r.DecodeBytes(yys2226Slc, true, true)
		yys2226 := string(yys2226Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2226 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2226)
		} // end switch yys2226
	} // end for yyj2226
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2229 int
	var yyb2229 bool
	var yyhl2229 bool = l >= 0
	yyj2229++
	if yyhl2229 {
		yyb2229 = yyj2229 > l
	} else {
		yyb2229 = r.CheckBreak()
	}
	if yyb2229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2229++
	if yyhl2229 {
		yyb2229 = yyj2229 > l
	} else {
		yyb2229 = r.CheckBreak()
	}
	if yyb2229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2229++
		if yyhl2229 {
			yyb2229 = yyj2229 > l
		} else {
			yyb2229 = r.CheckBreak()
		}
		if yyb2229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2232 := z.EncBinary()
		_ = yym2232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2233 := !z.EncBinary()
			yy2arr2233 := z.EncBasicHandle().StructToArray
			var yyq2233 [8]bool
			_, _, _ = yysep2233, yyq2233, yy2arr2233
			const yyr2233 bool = false
			yyq2233[0] = x.HostNetwork != false
			yyq2233[1] = x.HostPID != false
			yyq2233[2] = x.HostIPC != false
			yyq2233[3] = x.SELinuxOptions != nil
			yyq2233[4] = x.RunAsUser != nil
			yyq2233[5] = x.RunAsNonRoot != nil
			yyq2233[6] = len(x.SupplementalGroups) != 0
			yyq2233[7] = x.FSGroup != nil
			var yynn2233 int
			if yyr2233 || yy2arr2233 {
				r.EncodeArrayStart(8)
			} else {
				yynn2233 = 0
				for _, b := range yyq2233 {
					if b {
						yynn2233++
					}
				}
				r.EncodeMapStart(yynn2233)
				yynn2233 = 0
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[0] {
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2233[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2236 := z.EncBinary()
					_ = yym2236
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[1] {
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2233[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[2] {
					yym2241 := z.EncBinary()
					_ = yym2241
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2233[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2242 := z.EncBinary()
					_ = yym2242
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2245 := *x.RunAsUser
						yym2246 := z.EncBinary()
						_ = yym2246
						if false {
						} else {
							r.EncodeInt(int64(yy2245))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2247 := *x.RunAsUser
						yym2248 := z.EncBinary()
						_ = yym2248
						if false {
						} else {
							r.EncodeInt(int64(yy2247))
						}
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2250 := *x.RunAsNonRoot
						yym2251 := z.EncBinary()
						_ = yym2251
						if false {
						} else {
							r.EncodeBool(bool(yy2250))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2252 := *x.RunAsNonRoot
						yym2253 := z.EncBinary()
						_ = yym2253
						if false {
						} else {
							r.EncodeBool(bool(yy2252))
						}
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2255 := z.EncBinary()
						_ = yym2255
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2256 := z.EncBinary()
						_ = yym2256
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2233[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2258 := *x.FSGroup
						yym2259 := z.EncBinary()
						_ = yym2259
						if false {
						} else {
							r.EncodeInt(int64(yy2258))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2233[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2260 := *x.FSGroup
						yym2261 := z.EncBinary()
						_ = yym2261
						if false {
						} else {
							r.EncodeInt(int64(yy2260))
						}
					}
				}
			}
			if yyr2233 || yy2arr2233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2262 := z.DecBinary()
	_ = yym2262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2263 := r.ContainerType()
		if yyct2263 == codecSelferValueTypeMap1234 {
			yyl2263 := r.ReadMapStart()
			if yyl2263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2263, d)
			}
		} else if yyct2263 == codecSelferValueTypeArray1234 {
			yyl2263 := r.ReadArrayStart()
			if yyl2263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2264Slc
	var yyhl2264 bool = l >= 0
	for yyj2264 := 0; ; yyj2264++ {
		if yyhl2264 {
			if yyj2264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2264Slc = r.DecodeBytes(yys2264Slc, true, true)
		yys2264 := string(yys2264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2264 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2270 := z.DecBinary()
				_ = yym2270
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2272 := z.DecBinary()
				_ = yym2272
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2273 := &x.SupplementalGroups
				yym2274 := z.DecBinary()
				_ = yym2274
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2273, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2276 := z.DecBinary()
				_ = yym2276
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2264)
		} // end switch yys2264
	} // end for yyj2264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2277 int
	var yyb2277 bool
	var yyhl2277 bool = l >= 0
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2283 := z.DecBinary()
		_ = yym2283
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2285 := z.DecBinary()
		_ = yym2285
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2286 := &x.SupplementalGroups
		yym2287 := z.DecBinary()
		_ = yym2287
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2286, false, d)
		}
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2289 := z.DecBinary()
		_ = yym2289
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2277++
		if yyhl2277 {
			yyb2277 = yyj2277 > l
		} else {
			yyb2277 = r.CheckBreak()
		}
		if yyb2277 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2277-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2290 := z.EncBinary()
		_ = yym2290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2291 := !z.EncBinary()
			yy2arr2291 := z.EncBasicHandle().StructToArray
			var yyq2291 [8]bool
			_, _, _ = yysep2291, yyq2291, yy2arr2291
			const yyr2291 bool = false
			yyq2291[0] = x.Phase != ""
			yyq2291[1] = len(x.Conditions) != 0
			yyq2291[2] = x.Message != ""
			yyq2291[3] = x.Reason != ""
			yyq2291[4] = x.HostIP != ""
			yyq2291[5] = x.PodIP != ""
			yyq2291[6] = x.StartTime != nil
			yyq2291[7] = len(x.ContainerStatuses) != 0
			var yynn2291 int
			if yyr2291 || yy2arr2291 {
				r.EncodeArrayStart(8)
			} else {
				yynn2291 = 0
				for _, b := range yyq2291 {
					if b {
						yynn2291++
					}
				}
				r.EncodeMapStart(yynn2291)
				yynn2291 = 0
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2291[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2294 := z.EncBinary()
						_ = yym2294
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2295 := z.EncBinary()
						_ = yym2295
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[2] {
					yym2297 := z.EncBinary()
					_ = yym2297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2291[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[3] {
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2291[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[4] {
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2291[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2304 := z.EncBinary()
					_ = yym2304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[5] {
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2291[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2309 := z.EncBinary()
						_ = yym2309
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2309 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2309 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2310 := z.EncBinary()
						_ = yym2310
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2310 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2310 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2291[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2312 := z.EncBinary()
						_ = yym2312
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2291[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2313 := z.EncBinary()
						_ = yym2313
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2291 || yy2arr2291 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2314 := z.DecBinary()
	_ = yym2314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2315 := r.ContainerType()
		if yyct2315 == codecSelferValueTypeMap1234 {
			yyl2315 := r.ReadMapStart()
			if yyl2315 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2315, d)
			}
		} else if yyct2315 == codecSelferValueTypeArray1234 {
			yyl2315 := r.ReadArrayStart()
			if yyl2315 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2316Slc
	var yyhl2316 bool = l >= 0
	for yyj2316 := 0; ; yyj2316++ {
		if yyhl2316 {
			if yyj2316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2316Slc = r.DecodeBytes(yys2316Slc, true, true)
		yys2316 := string(yys2316Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2316 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2318 := &x.Conditions
				yym2319 := z.DecBinary()
				_ = yym2319
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2318), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2325 := z.DecBinary()
				_ = yym2325
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2325 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2325 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2326 := &x.ContainerStatuses
				yym2327 := z.DecBinary()
				_ = yym2327
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2326), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2316)
		} // end switch yys2316
	} // end for yyj2316
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2328 int
	var yyb2328 bool
	var yyhl2328 bool = l >= 0
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2330 := &x.Conditions
		yym2331 := z.DecBinary()
		_ = yym2331
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2330), d)
		}
	}
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2337 := z.DecBinary()
		_ = yym2337
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2337 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2337 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2328++
	if yyhl2328 {
		yyb2328 = yyj2328 > l
	} else {
		yyb2328 = r.CheckBreak()
	}
	if yyb2328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2338 := &x.ContainerStatuses
		yym2339 := z.DecBinary()
		_ = yym2339
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2338), d)
		}
	}
	for {
		yyj2328++
		if yyhl2328 {
			yyb2328 = yyj2328 > l
		} else {
			yyb2328 = r.CheckBreak()
		}
		if yyb2328 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2328-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2340 := z.EncBinary()
		_ = yym2340
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2341 := !z.EncBinary()
			yy2arr2341 := z.EncBasicHandle().StructToArray
			var yyq2341 [4]bool
			_, _, _ = yysep2341, yyq2341, yy2arr2341
			const yyr2341 bool = false
			yyq2341[0] = x.Kind != ""
			yyq2341[1] = x.APIVersion != ""
			yyq2341[2] = true
			yyq2341[3] = true
			var yynn2341 int
			if yyr2341 || yy2arr2341 {
				r.EncodeArrayStart(4)
			} else {
				yynn2341 = 0
				for _, b := range yyq2341 {
					if b {
						yynn2341++
					}
				}
				r.EncodeMapStart(yynn2341)
				yynn2341 = 0
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2341[0] {
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2341[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2341[1] {
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2341[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2347 := z.EncBinary()
					_ = yym2347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2341[2] {
					yy2349 := &x.ObjectMeta
					yy2349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2341[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2350 := &x.ObjectMeta
					yy2350.CodecEncodeSelf(e)
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2341[3] {
					yy2352 := &x.Status
					yy2352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2341[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2353 := &x.Status
					yy2353.CodecEncodeSelf(e)
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2354 := z.DecBinary()
	_ = yym2354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2355 := r.ContainerType()
		if yyct2355 == codecSelferValueTypeMap1234 {
			yyl2355 := r.ReadMapStart()
			if yyl2355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2355, d)
			}
		} else if yyct2355 == codecSelferValueTypeArray1234 {
			yyl2355 := r.ReadArrayStart()
			if yyl2355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2356Slc
	var yyhl2356 bool = l >= 0
	for yyj2356 := 0; ; yyj2356++ {
		if yyhl2356 {
			if yyj2356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2356Slc = r.DecodeBytes(yys2356Slc, true, true)
		yys2356 := string(yys2356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2359 := &x.ObjectMeta
				yyv2359.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2360 := &x.Status
				yyv2360.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2356)
		} // end switch yys2356
	} // end for yyj2356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2361 int
	var yyb2361 bool
	var yyhl2361 bool = l >= 0
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2364 := &x.ObjectMeta
		yyv2364.CodecDecodeSelf(d)
	}
	yyj2361++
	if yyhl2361 {
		yyb2361 = yyj2361 > l
	} else {
		yyb2361 = r.CheckBreak()
	}
	if yyb2361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2365 := &x.Status
		yyv2365.CodecDecodeSelf(d)
	}
	for {
		yyj2361++
		if yyhl2361 {
			yyb2361 = yyj2361 > l
		} else {
			yyb2361 = r.CheckBreak()
		}
		if yyb2361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2366 := z.EncBinary()
		_ = yym2366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2367 := !z.EncBinary()
			yy2arr2367 := z.EncBasicHandle().StructToArray
			var yyq2367 [5]bool
			_, _, _ = yysep2367, yyq2367, yy2arr2367
			const yyr2367 bool = false
			yyq2367[0] = x.Kind != ""
			yyq2367[1] = x.APIVersion != ""
			yyq2367[2] = true
			yyq2367[3] = true
			yyq2367[4] = true
			var yynn2367 int
			if yyr2367 || yy2arr2367 {
				r.EncodeArrayStart(5)
			} else {
				yynn2367 = 0
				for _, b := range yyq2367 {
					if b {
						yynn2367++
					}
				}
				r.EncodeMapStart(yynn2367)
				yynn2367 = 0
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[0] {
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2370 := z.EncBinary()
					_ = yym2370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[1] {
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2373 := z.EncBinary()
					_ = yym2373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[2] {
					yy2375 := &x.ObjectMeta
					yy2375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2367[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2376 := &x.ObjectMeta
					yy2376.CodecEncodeSelf(e)
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[3] {
					yy2378 := &x.Spec
					yy2378.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2367[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2379 := &x.Spec
					yy2379.CodecEncodeSelf(e)
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[4] {
					yy2381 := &x.Status
					yy2381.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2367[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2382 := &x.Status
					yy2382.CodecEncodeSelf(e)
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2383 := z.DecBinary()
	_ = yym2383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2384 := r.ContainerType()
		if yyct2384 == codecSelferValueTypeMap1234 {
			yyl2384 := r.ReadMapStart()
			if yyl2384 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2384, d)
			}
		} else if yyct2384 == codecSelferValueTypeArray1234 {
			yyl2384 := r.ReadArrayStart()
			if yyl2384 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2385Slc
	var yyhl2385 bool = l >= 0
	for yyj2385 := 0; ; yyj2385++ {
		if yyhl2385 {
			if yyj2385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2385Slc = r.DecodeBytes(yys2385Slc, true, true)
		yys2385 := string(yys2385Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2385 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2388 := &x.ObjectMeta
				yyv2388.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2389 := &x.Spec
				yyv2389.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2390 := &x.Status
				yyv2390.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2385)
		} // end switch yys2385
	} // end for yyj2385
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2391 int
	var yyb2391 bool
	var yyhl2391 bool = l >= 0
	yyj2391++
	if yyhl2391 {
		yyb2391 = yyj2391 > l
	} else {
		yyb2391 = r.CheckBreak()
	}
	if yyb2391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2391++
	if yyhl2391 {
		yyb2391 = yyj2391 > l
	} else {
		yyb2391 = r.CheckBreak()
	}
	if yyb2391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2391++
	if yyhl2391 {
		yyb2391 = yyj2391 > l
	} else {
		yyb2391 = r.CheckBreak()
	}
	if yyb2391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2394 := &x.ObjectMeta
		yyv2394.CodecDecodeSelf(d)
	}
	yyj2391++
	if yyhl2391 {
		yyb2391 = yyj2391 > l
	} else {
		yyb2391 = r.CheckBreak()
	}
	if yyb2391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2395 := &x.Spec
		yyv2395.CodecDecodeSelf(d)
	}
	yyj2391++
	if yyhl2391 {
		yyb2391 = yyj2391 > l
	} else {
		yyb2391 = r.CheckBreak()
	}
	if yyb2391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2396 := &x.Status
		yyv2396.CodecDecodeSelf(d)
	}
	for {
		yyj2391++
		if yyhl2391 {
			yyb2391 = yyj2391 > l
		} else {
			yyb2391 = r.CheckBreak()
		}
		if yyb2391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2397 := z.EncBinary()
		_ = yym2397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2398 := !z.EncBinary()
			yy2arr2398 := z.EncBasicHandle().StructToArray
			var yyq2398 [2]bool
			_, _, _ = yysep2398, yyq2398, yy2arr2398
			const yyr2398 bool = false
			yyq2398[0] = true
			yyq2398[1] = true
			var yynn2398 int
			if yyr2398 || yy2arr2398 {
				r.EncodeArrayStart(2)
			} else {
				yynn2398 = 0
				for _, b := range yyq2398 {
					if b {
						yynn2398++
					}
				}
				r.EncodeMapStart(yynn2398)
				yynn2398 = 0
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[0] {
					yy2400 := &x.ObjectMeta
					yy2400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2398[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2401 := &x.ObjectMeta
					yy2401.CodecEncodeSelf(e)
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[1] {
					yy2403 := &x.Spec
					yy2403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2398[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2404 := &x.Spec
					yy2404.CodecEncodeSelf(e)
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2405 := z.DecBinary()
	_ = yym2405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2406 := r.ContainerType()
		if yyct2406 == codecSelferValueTypeMap1234 {
			yyl2406 := r.ReadMapStart()
			if yyl2406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2406, d)
			}
		} else if yyct2406 == codecSelferValueTypeArray1234 {
			yyl2406 := r.ReadArrayStart()
			if yyl2406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2407Slc
	var yyhl2407 bool = l >= 0
	for yyj2407 := 0; ; yyj2407++ {
		if yyhl2407 {
			if yyj2407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2407Slc = r.DecodeBytes(yys2407Slc, true, true)
		yys2407 := string(yys2407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2407 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2408 := &x.ObjectMeta
				yyv2408.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2409 := &x.Spec
				yyv2409.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2407)
		} // end switch yys2407
	} // end for yyj2407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2410 int
	var yyb2410 bool
	var yyhl2410 bool = l >= 0
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2411 := &x.ObjectMeta
		yyv2411.CodecDecodeSelf(d)
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2412 := &x.Spec
		yyv2412.CodecDecodeSelf(d)
	}
	for {
		yyj2410++
		if yyhl2410 {
			yyb2410 = yyj2410 > l
		} else {
			yyb2410 = r.CheckBreak()
		}
		if yyb2410 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2410-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2413 := z.EncBinary()
		_ = yym2413
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2414 := !z.EncBinary()
			yy2arr2414 := z.EncBasicHandle().StructToArray
			var yyq2414 [4]bool
			_, _, _ = yysep2414, yyq2414, yy2arr2414
			const yyr2414 bool = false
			yyq2414[0] = x.Kind != ""
			yyq2414[1] = x.APIVersion != ""
			yyq2414[2] = true
			yyq2414[3] = true
			var yynn2414 int
			if yyr2414 || yy2arr2414 {
				r.EncodeArrayStart(4)
			} else {
				yynn2414 = 0
				for _, b := range yyq2414 {
					if b {
						yynn2414++
					}
				}
				r.EncodeMapStart(yynn2414)
				yynn2414 = 0
			}
			if yyr2414 || yy2arr2414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2414[0] {
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2414[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2414 || yy2arr2414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2414[1] {
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2414[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2414 || yy2arr2414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2414[2] {
					yy2422 := &x.ObjectMeta
					yy2422.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2414[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2423 := &x.ObjectMeta
					yy2423.CodecEncodeSelf(e)
				}
			}
			if yyr2414 || yy2arr2414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2414[3] {
					yy2425 := &x.Template
					yy2425.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2414[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2426 := &x.Template
					yy2426.CodecEncodeSelf(e)
				}
			}
			if yyr2414 || yy2arr2414 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2427 := z.DecBinary()
	_ = yym2427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2428 := r.ContainerType()
		if yyct2428 == codecSelferValueTypeMap1234 {
			yyl2428 := r.ReadMapStart()
			if yyl2428 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2428, d)
			}
		} else if yyct2428 == codecSelferValueTypeArray1234 {
			yyl2428 := r.ReadArrayStart()
			if yyl2428 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2428, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2429Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2429Slc
	var yyhl2429 bool = l >= 0
	for yyj2429 := 0; ; yyj2429++ {
		if yyhl2429 {
			if yyj2429 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2429Slc = r.DecodeBytes(yys2429Slc, true, true)
		yys2429 := string(yys2429Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2429 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2432 := &x.ObjectMeta
				yyv2432.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2433 := &x.Template
				yyv2433.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2429)
		} // end switch yys2429
	} // end for yyj2429
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2434 int
	var yyb2434 bool
	var yyhl2434 bool = l >= 0
	yyj2434++
	if yyhl2434 {
		yyb2434 = yyj2434 > l
	} else {
		yyb2434 = r.CheckBreak()
	}
	if yyb2434 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2434++
	if yyhl2434 {
		yyb2434 = yyj2434 > l
	} else {
		yyb2434 = r.CheckBreak()
	}
	if yyb2434 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2434++
	if yyhl2434 {
		yyb2434 = yyj2434 > l
	} else {
		yyb2434 = r.CheckBreak()
	}
	if yyb2434 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2437 := &x.ObjectMeta
		yyv2437.CodecDecodeSelf(d)
	}
	yyj2434++
	if yyhl2434 {
		yyb2434 = yyj2434 > l
	} else {
		yyb2434 = r.CheckBreak()
	}
	if yyb2434 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2438 := &x.Template
		yyv2438.CodecDecodeSelf(d)
	}
	for {
		yyj2434++
		if yyhl2434 {
			yyb2434 = yyj2434 > l
		} else {
			yyb2434 = r.CheckBreak()
		}
		if yyb2434 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2434-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2439 := z.EncBinary()
		_ = yym2439
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2440 := !z.EncBinary()
			yy2arr2440 := z.EncBasicHandle().StructToArray
			var yyq2440 [4]bool
			_, _, _ = yysep2440, yyq2440, yy2arr2440
			const yyr2440 bool = false
			yyq2440[0] = x.Kind != ""
			yyq2440[1] = x.APIVersion != ""
			yyq2440[2] = true
			var yynn2440 int
			if yyr2440 || yy2arr2440 {
				r.EncodeArrayStart(4)
			} else {
				yynn2440 = 1
				for _, b := range yyq2440 {
					if b {
						yynn2440++
					}
				}
				r.EncodeMapStart(yynn2440)
				yynn2440 = 0
			}
			if yyr2440 || yy2arr2440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2440[0] {
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2440[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2440 || yy2arr2440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2440[1] {
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2440[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2440 || yy2arr2440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2440[2] {
					yy2448 := &x.ListMeta
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2448) {
					} else {
						z.EncFallback(yy2448)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2440[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2450 := &x.ListMeta
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2450) {
					} else {
						z.EncFallback(yy2450)
					}
				}
			}
			if yyr2440 || yy2arr2440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2454 := z.EncBinary()
					_ = yym2454
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2440 || yy2arr2440 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2455 := z.DecBinary()
	_ = yym2455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2456 := r.ContainerType()
		if yyct2456 == codecSelferValueTypeMap1234 {
			yyl2456 := r.ReadMapStart()
			if yyl2456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2456, d)
			}
		} else if yyct2456 == codecSelferValueTypeArray1234 {
			yyl2456 := r.ReadArrayStart()
			if yyl2456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2457Slc
	var yyhl2457 bool = l >= 0
	for yyj2457 := 0; ; yyj2457++ {
		if yyhl2457 {
			if yyj2457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2457Slc = r.DecodeBytes(yys2457Slc, true, true)
		yys2457 := string(yys2457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2457 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2460 := &x.ListMeta
				yym2461 := z.DecBinary()
				_ = yym2461
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2460) {
				} else {
					z.DecFallback(yyv2460, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2462 := &x.Items
				yym2463 := z.DecBinary()
				_ = yym2463
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2462), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2457)
		} // end switch yys2457
	} // end for yyj2457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2464 int
	var yyb2464 bool
	var yyhl2464 bool = l >= 0
	yyj2464++
	if yyhl2464 {
		yyb2464 = yyj2464 > l
	} else {
		yyb2464 = r.CheckBreak()
	}
	if yyb2464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2464++
	if yyhl2464 {
		yyb2464 = yyj2464 > l
	} else {
		yyb2464 = r.CheckBreak()
	}
	if yyb2464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2464++
	if yyhl2464 {
		yyb2464 = yyj2464 > l
	} else {
		yyb2464 = r.CheckBreak()
	}
	if yyb2464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2467 := &x.ListMeta
		yym2468 := z.DecBinary()
		_ = yym2468
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2467) {
		} else {
			z.DecFallback(yyv2467, false)
		}
	}
	yyj2464++
	if yyhl2464 {
		yyb2464 = yyj2464 > l
	} else {
		yyb2464 = r.CheckBreak()
	}
	if yyb2464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2469 := &x.Items
		yym2470 := z.DecBinary()
		_ = yym2470
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2469), d)
		}
	}
	for {
		yyj2464++
		if yyhl2464 {
			yyb2464 = yyj2464 > l
		} else {
			yyb2464 = r.CheckBreak()
		}
		if yyb2464 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2464-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2471 := z.EncBinary()
		_ = yym2471
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2472 := !z.EncBinary()
			yy2arr2472 := z.EncBasicHandle().StructToArray
			var yyq2472 [4]bool
			_, _, _ = yysep2472, yyq2472, yy2arr2472
			const yyr2472 bool = false
			yyq2472[1] = x.MinReadySeconds != 0
			yyq2472[3] = x.Template != nil
			var yynn2472 int
			if yyr2472 || yy2arr2472 {
				r.EncodeArrayStart(4)
			} else {
				yynn2472 = 2
				for _, b := range yyq2472 {
					if b {
						yynn2472++
					}
				}
				r.EncodeMapStart(yynn2472)
				yynn2472 = 0
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2474 := z.EncBinary()
				_ = yym2474
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2475 := z.EncBinary()
				_ = yym2475
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2472[1] {
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2472[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2472[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2472[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2472 || yy2arr2472 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2483 := z.DecBinary()
	_ = yym2483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2484 := r.ContainerType()
		if yyct2484 == codecSelferValueTypeMap1234 {
			yyl2484 := r.ReadMapStart()
			if yyl2484 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2484, d)
			}
		} else if yyct2484 == codecSelferValueTypeArray1234 {
			yyl2484 := r.ReadArrayStart()
			if yyl2484 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2485Slc
	var yyhl2485 bool = l >= 0
	for yyj2485 := 0; ; yyj2485++ {
		if yyhl2485 {
			if yyj2485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2485Slc = r.DecodeBytes(yys2485Slc, true, true)
		yys2485 := string(yys2485Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2485 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2488 := &x.Selector
				yym2489 := z.DecBinary()
				_ = yym2489
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2488, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2485)
		} // end switch yys2485
	} // end for yyj2485
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2491 int
	var yyb2491 bool
	var yyhl2491 bool = l >= 0
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2494 := &x.Selector
		yym2495 := z.DecBinary()
		_ = yym2495
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2494, false, d)
		}
	}
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2491++
		if yyhl2491 {
			yyb2491 = yyj2491 > l
		} else {
			yyb2491 = r.CheckBreak()
		}
		if yyb2491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2497 := z.EncBinary()
		_ = yym2497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2498 := !z.EncBinary()
			yy2arr2498 := z.EncBasicHandle().StructToArray
			var yyq2498 [6]bool
			_, _, _ = yysep2498, yyq2498, yy2arr2498
			const yyr2498 bool = false
			yyq2498[1] = x.FullyLabeledReplicas != 0
			yyq2498[2] = x.ReadyReplicas != 0
			yyq2498[3] = x.AvailableReplicas != 0
			yyq2498[4] = x.ObservedGeneration != 0
			yyq2498[5] = len(x.Conditions) != 0
			var yynn2498 int
			if yyr2498 || yy2arr2498 {
				r.EncodeArrayStart(6)
			} else {
				yynn2498 = 1
				for _, b := range yyq2498 {
					if b {
						yynn2498++
					}
				}
				r.EncodeMapStart(yynn2498)
				yynn2498 = 0
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2500 := z.EncBinary()
				_ = yym2500
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2501 := z.EncBinary()
				_ = yym2501
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[1] {
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[2] {
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[3] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[4] {
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2498[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2515 := z.EncBinary()
						_ = yym2515
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2498[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2516 := z.EncBinary()
						_ = yym2516
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2517 := z.DecBinary()
	_ = yym2517
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2518 := r.ContainerType()
		if yyct2518 == codecSelferValueTypeMap1234 {
			yyl2518 := r.ReadMapStart()
			if yyl2518 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2518, d)
			}
		} else if yyct2518 == codecSelferValueTypeArray1234 {
			yyl2518 := r.ReadArrayStart()
			if yyl2518 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2518, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2519Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2519Slc
	var yyhl2519 bool = l >= 0
	for yyj2519 := 0; ; yyj2519++ {
		if yyhl2519 {
			if yyj2519 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2519Slc = r.DecodeBytes(yys2519Slc, true, true)
		yys2519 := string(yys2519Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2519 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2525 := &x.Conditions
				yym2526 := z.DecBinary()
				_ = yym2526
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2525), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2519)
		} // end switch yys2519
	} // end for yyj2519
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2527 int
	var yyb2527 bool
	var yyhl2527 bool = l >= 0
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2533 := &x.Conditions
		yym2534 := z.DecBinary()
		_ = yym2534
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2533), d)
		}
	}
	for {
		yyj2527++
		if yyhl2527 {
			yyb2527 = yyj2527 > l
		} else {
			yyb2527 = r.CheckBreak()
		}
		if yyb2527 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2527-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2535 := z.EncBinary()
	_ = yym2535
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2536 := z.DecBinary()
	_ = yym2536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2537 := z.EncBinary()
		_ = yym2537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2538 := !z.EncBinary()
			yy2arr2538 := z.EncBasicHandle().StructToArray
			var yyq2538 [5]bool
			_, _, _ = yysep2538, yyq2538, yy2arr2538
			const yyr2538 bool = false
			yyq2538[2] = true
			yyq2538[3] = x.Reason != ""
			yyq2538[4] = x.Message != ""
			var yynn2538 int
			if yyr2538 || yy2arr2538 {
				r.EncodeArrayStart(5)
			} else {
				yynn2538 = 2
				for _, b := range yyq2538 {
					if b {
						yynn2538++
					}
				}
				r.EncodeMapStart(yynn2538)
				yynn2538 = 0
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2538[2] {
					yy2542 := &x.LastTransitionTime
					yym2543 := z.EncBinary()
					_ = yym2543
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2542) {
					} else if yym2543 {
						z.EncBinaryMarshal(yy2542)
					} else if !yym2543 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2542)
					} else {
						z.EncFallback(yy2542)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2544 := &x.LastTransitionTime
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2544) {
					} else if yym2545 {
						z.EncBinaryMarshal(yy2544)
					} else if !yym2545 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2544)
					} else {
						z.EncFallback(yy2544)
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2538[3] {
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2538[4] {
					yym2550 := z.EncBinary()
					_ = yym2550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2552 := z.DecBinary()
	_ = yym2552
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2553 := r.ContainerType()
		if yyct2553 == codecSelferValueTypeMap1234 {
			yyl2553 := r.ReadMapStart()
			if yyl2553 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2553, d)
			}
		} else if yyct2553 == codecSelferValueTypeArray1234 {
			yyl2553 := r.ReadArrayStart()
			if yyl2553 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2553, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2554Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2554Slc
	var yyhl2554 bool = l >= 0
	for yyj2554 := 0; ; yyj2554++ {
		if yyhl2554 {
			if yyj2554 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2554Slc = r.DecodeBytes(yys2554Slc, true, true)
		yys2554 := string(yys2554Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2554 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2557 := &x.LastTransitionTime
				yym2558 := z.DecBinary()
				_ = yym2558
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2557) {
				} else if yym2558 {
					z.DecBinaryUnmarshal(yyv2557)
				} else if !yym2558 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2557)
				} else {
					z.DecFallback(yyv2557, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2554)
		} // end switch yys2554
	} // end for yyj2554
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2561 int
	var yyb2561 bool
	var yyhl2561 bool = l >= 0
	yyj2561++
	if yyhl2561 {
		yyb2561 = yyj2561 > l
	} else {
		yyb2561 = r.CheckBreak()
	}
	if yyb2561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2561++
	if yyhl2561 {
		yyb2561 = yyj2561 > l
	} else {
		yyb2561 = r.CheckBreak()
	}
	if yyb2561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2561++
	if yyhl2561 {
		yyb2561 = yyj2561 > l
	} else {
		yyb2561 = r.CheckBreak()
	}
	if yyb2561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2564 := &x.LastTransitionTime
		yym2565 := z.DecBinary()
		_ = yym2565
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2564) {
		} else if yym2565 {
			z.DecBinaryUnmarshal(yyv2564)
		} else if !yym2565 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2564)
		} else {
			z.DecFallback(yyv2564, false)
		}
	}
	yyj2561++
	if yyhl2561 {
		yyb2561 = yyj2561 > l
	} else {
		yyb2561 = r.CheckBreak()
	}
	if yyb2561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2561++
	if yyhl2561 {
		yyb2561 = yyj2561 > l
	} else {
		yyb2561 = r.CheckBreak()
	}
	if yyb2561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2561++
		if yyhl2561 {
			yyb2561 = yyj2561 > l
		} else {
			yyb2561 = r.CheckBreak()
		}
		if yyb2561 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2561-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2568 := z.EncBinary()
		_ = yym2568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2569 := !z.EncBinary()
			yy2arr2569 := z.EncBasicHandle().StructToArray
			var yyq2569 [5]bool
			_, _, _ = yysep2569, yyq2569, yy2arr2569
			const yyr2569 bool = false
			yyq2569[0] = x.Kind != ""
			yyq2569[1] = x.APIVersion != ""
			yyq2569[2] = true
			yyq2569[3] = true
			yyq2569[4] = true
			var yynn2569 int
			if yyr2569 || yy2arr2569 {
				r.EncodeArrayStart(5)
			} else {
				yynn2569 = 0
				for _, b := range yyq2569 {
					if b {
						yynn2569++
					}
				}
				r.EncodeMapStart(yynn2569)
				yynn2569 = 0
			}
			if yyr2569 || yy2arr2569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2569[0] {
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2569[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2569 || yy2arr2569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2569[1] {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2569[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2569 || yy2arr2569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2569[2] {
					yy2577 := &x.ObjectMeta
					yy2577.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2569[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2578 := &x.ObjectMeta
					yy2578.CodecEncodeSelf(e)
				}
			}
			if yyr2569 || yy2arr2569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2569[3] {
					yy2580 := &x.Spec
					yy2580.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2569[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2581 := &x.Spec
					yy2581.CodecEncodeSelf(e)
				}
			}
			if yyr2569 || yy2arr2569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2569[4] {
					yy2583 := &x.Status
					yy2583.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2569[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2584 := &x.Status
					yy2584.CodecEncodeSelf(e)
				}
			}
			if yyr2569 || yy2arr2569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2585 := z.DecBinary()
	_ = yym2585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2586 := r.ContainerType()
		if yyct2586 == codecSelferValueTypeMap1234 {
			yyl2586 := r.ReadMapStart()
			if yyl2586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2586, d)
			}
		} else if yyct2586 == codecSelferValueTypeArray1234 {
			yyl2586 := r.ReadArrayStart()
			if yyl2586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2587Slc
	var yyhl2587 bool = l >= 0
	for yyj2587 := 0; ; yyj2587++ {
		if yyhl2587 {
			if yyj2587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2587Slc = r.DecodeBytes(yys2587Slc, true, true)
		yys2587 := string(yys2587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2587 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2590 := &x.ObjectMeta
				yyv2590.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2591 := &x.Spec
				yyv2591.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2592 := &x.Status
				yyv2592.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2587)
		} // end switch yys2587
	} // end for yyj2587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2593 int
	var yyb2593 bool
	var yyhl2593 bool = l >= 0
	yyj2593++
	if yyhl2593 {
		yyb2593 = yyj2593 > l
	} else {
		yyb2593 = r.CheckBreak()
	}
	if yyb2593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2593++
	if yyhl2593 {
		yyb2593 = yyj2593 > l
	} else {
		yyb2593 = r.CheckBreak()
	}
	if yyb2593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2593++
	if yyhl2593 {
		yyb2593 = yyj2593 > l
	} else {
		yyb2593 = r.CheckBreak()
	}
	if yyb2593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2596 := &x.ObjectMeta
		yyv2596.CodecDecodeSelf(d)
	}
	yyj2593++
	if yyhl2593 {
		yyb2593 = yyj2593 > l
	} else {
		yyb2593 = r.CheckBreak()
	}
	if yyb2593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2597 := &x.Spec
		yyv2597.CodecDecodeSelf(d)
	}
	yyj2593++
	if yyhl2593 {
		yyb2593 = yyj2593 > l
	} else {
		yyb2593 = r.CheckBreak()
	}
	if yyb2593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2598 := &x.Status
		yyv2598.CodecDecodeSelf(d)
	}
	for {
		yyj2593++
		if yyhl2593 {
			yyb2593 = yyj2593 > l
		} else {
			yyb2593 = r.CheckBreak()
		}
		if yyb2593 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2593-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2599 := z.EncBinary()
		_ = yym2599
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2600 := !z.EncBinary()
			yy2arr2600 := z.EncBasicHandle().StructToArray
			var yyq2600 [4]bool
			_, _, _ = yysep2600, yyq2600, yy2arr2600
			const yyr2600 bool = false
			yyq2600[0] = x.Kind != ""
			yyq2600[1] = x.APIVersion != ""
			yyq2600[2] = true
			var yynn2600 int
			if yyr2600 || yy2arr2600 {
				r.EncodeArrayStart(4)
			} else {
				yynn2600 = 1
				for _, b := range yyq2600 {
					if b {
						yynn2600++
					}
				}
				r.EncodeMapStart(yynn2600)
				yynn2600 = 0
			}
			if yyr2600 || yy2arr2600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2600[0] {
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2600[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2600 || yy2arr2600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2600[1] {
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2600[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2600 || yy2arr2600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2600[2] {
					yy2608 := &x.ListMeta
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2608) {
					} else {
						z.EncFallback(yy2608)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2600[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2610 := &x.ListMeta
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2610) {
					} else {
						z.EncFallback(yy2610)
					}
				}
			}
			if yyr2600 || yy2arr2600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2600 || yy2arr2600 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2615 := z.DecBinary()
	_ = yym2615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2616 := r.ContainerType()
		if yyct2616 == codecSelferValueTypeMap1234 {
			yyl2616 := r.ReadMapStart()
			if yyl2616 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2616, d)
			}
		} else if yyct2616 == codecSelferValueTypeArray1234 {
			yyl2616 := r.ReadArrayStart()
			if yyl2616 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2617Slc
	var yyhl2617 bool = l >= 0
	for yyj2617 := 0; ; yyj2617++ {
		if yyhl2617 {
			if yyj2617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2617Slc = r.DecodeBytes(yys2617Slc, true, true)
		yys2617 := string(yys2617Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2617 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2620 := &x.ListMeta
				yym2621 := z.DecBinary()
				_ = yym2621
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2620) {
				} else {
					z.DecFallback(yyv2620, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2622 := &x.Items
				yym2623 := z.DecBinary()
				_ = yym2623
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2622), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2617)
		} // end switch yys2617
	} // end for yyj2617
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2624 int
	var yyb2624 bool
	var yyhl2624 bool = l >= 0
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2627 := &x.ListMeta
		yym2628 := z.DecBinary()
		_ = yym2628
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2627) {
		} else {
			z.DecFallback(yyv2627, false)
		}
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2629 := &x.Items
		yym2630 := z.DecBinary()
		_ = yym2630
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2629), d)
		}
	}
	for {
		yyj2624++
		if yyhl2624 {
			yyb2624 = yyj2624 > l
		} else {
			yyb2624 = r.CheckBreak()
		}
		if yyb2624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2631 := z.EncBinary()
		_ = yym2631
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2632 := !z.EncBinary()
			yy2arr2632 := z.EncBasicHandle().StructToArray
			var yyq2632 [4]bool
			_, _, _ = yysep2632, yyq2632, yy2arr2632
			const yyr2632 bool = false
			yyq2632[0] = x.Kind != ""
			yyq2632[1] = x.APIVersion != ""
			yyq2632[2] = true
			var yynn2632 int
			if yyr2632 || yy2arr2632 {
				r.EncodeArrayStart(4)
			} else {
				yynn2632 = 1
				for _, b := range yyq2632 {
					if b {
						yynn2632++
					}
				}
				r.EncodeMapStart(yynn2632)
				yynn2632 = 0
			}
			if yyr2632 || yy2arr2632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2632[0] {
					yym2634 := z.EncBinary()
					_ = yym2634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2632[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2632[1] {
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2632[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2632[2] {
					yy2640 := &x.ListMeta
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2640) {
					} else {
						z.EncFallback(yy2640)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2632[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2642 := &x.ListMeta
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2642) {
					} else {
						z.EncFallback(yy2642)
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2632 || yy2arr2632 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2647 := z.DecBinary()
	_ = yym2647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2648 := r.ContainerType()
		if yyct2648 == codecSelferValueTypeMap1234 {
			yyl2648 := r.ReadMapStart()
			if yyl2648 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2648, d)
			}
		} else if yyct2648 == codecSelferValueTypeArray1234 {
			yyl2648 := r.ReadArrayStart()
			if yyl2648 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2648, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2649Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2649Slc
	var yyhl2649 bool = l >= 0
	for yyj2649 := 0; ; yyj2649++ {
		if yyhl2649 {
			if yyj2649 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2649Slc = r.DecodeBytes(yys2649Slc, true, true)
		yys2649 := string(yys2649Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2649 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2652 := &x.ListMeta
				yym2653 := z.DecBinary()
				_ = yym2653
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2652) {
				} else {
					z.DecFallback(yyv2652, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2654 := &x.Items
				yym2655 := z.DecBinary()
				_ = yym2655
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2654), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2649)
		} // end switch yys2649
	} // end for yyj2649
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2656 int
	var yyb2656 bool
	var yyhl2656 bool = l >= 0
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2659 := &x.ListMeta
		yym2660 := z.DecBinary()
		_ = yym2660
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2659) {
		} else {
			z.DecFallback(yyv2659, false)
		}
	}
	yyj2656++
	if yyhl2656 {
		yyb2656 = yyj2656 > l
	} else {
		yyb2656 = r.CheckBreak()
	}
	if yyb2656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2661 := &x.Items
		yym2662 := z.DecBinary()
		_ = yym2662
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2661), d)
		}
	}
	for {
		yyj2656++
		if yyhl2656 {
			yyb2656 = yyj2656 > l
		} else {
			yyb2656 = r.CheckBreak()
		}
		if yyb2656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2663 := z.EncBinary()
	_ = yym2663
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2664 := z.DecBinary()
	_ = yym2664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2665 := z.EncBinary()
	_ = yym2665
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2666 := z.DecBinary()
	_ = yym2666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2667 := z.EncBinary()
		_ = yym2667
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2668 := !z.EncBinary()
			yy2arr2668 := z.EncBasicHandle().StructToArray
			var yyq2668 [1]bool
			_, _, _ = yysep2668, yyq2668, yy2arr2668
			const yyr2668 bool = false
			yyq2668[0] = true
			var yynn2668 int
			if yyr2668 || yy2arr2668 {
				r.EncodeArrayStart(1)
			} else {
				yynn2668 = 0
				for _, b := range yyq2668 {
					if b {
						yynn2668++
					}
				}
				r.EncodeMapStart(yynn2668)
				yynn2668 = 0
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2668[0] {
					yy2670 := &x.LoadBalancer
					yy2670.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2668[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2671 := &x.LoadBalancer
					yy2671.CodecEncodeSelf(e)
				}
			}
			if yyr2668 || yy2arr2668 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2672 := z.DecBinary()
	_ = yym2672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2673 := r.ContainerType()
		if yyct2673 == codecSelferValueTypeMap1234 {
			yyl2673 := r.ReadMapStart()
			if yyl2673 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2673, d)
			}
		} else if yyct2673 == codecSelferValueTypeArray1234 {
			yyl2673 := r.ReadArrayStart()
			if yyl2673 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2674Slc
	var yyhl2674 bool = l >= 0
	for yyj2674 := 0; ; yyj2674++ {
		if yyhl2674 {
			if yyj2674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2674Slc = r.DecodeBytes(yys2674Slc, true, true)
		yys2674 := string(yys2674Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2674 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2675 := &x.LoadBalancer
				yyv2675.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2674)
		} // end switch yys2674
	} // end for yyj2674
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2676 int
	var yyb2676 bool
	var yyhl2676 bool = l >= 0
	yyj2676++
	if yyhl2676 {
		yyb2676 = yyj2676 > l
	} else {
		yyb2676 = r.CheckBreak()
	}
	if yyb2676 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2677 := &x.LoadBalancer
		yyv2677.CodecDecodeSelf(d)
	}
	for {
		yyj2676++
		if yyhl2676 {
			yyb2676 = yyj2676 > l
		} else {
			yyb2676 = r.CheckBreak()
		}
		if yyb2676 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2676-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2678 := z.EncBinary()
		_ = yym2678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2679 := !z.EncBinary()
			yy2arr2679 := z.EncBasicHandle().StructToArray
			var yyq2679 [1]bool
			_, _, _ = yysep2679, yyq2679, yy2arr2679
			const yyr2679 bool = false
			yyq2679[0] = len(x.Ingress) != 0
			var yynn2679 int
			if yyr2679 || yy2arr2679 {
				r.EncodeArrayStart(1)
			} else {
				yynn2679 = 0
				for _, b := range yyq2679 {
					if b {
						yynn2679++
					}
				}
				r.EncodeMapStart(yynn2679)
				yynn2679 = 0
			}
			if yyr2679 || yy2arr2679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2679[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2681 := z.EncBinary()
						_ = yym2681
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2679[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2682 := z.EncBinary()
						_ = yym2682
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2679 || yy2arr2679 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2684 := r.ContainerType()
		if yyct2684 == codecSelferValueTypeMap1234 {
			yyl2684 := r.ReadMapStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2684, d)
			}
		} else if yyct2684 == codecSelferValueTypeArray1234 {
			yyl2684 := r.ReadArrayStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2685Slc
	var yyhl2685 bool = l >= 0
	for yyj2685 := 0; ; yyj2685++ {
		if yyhl2685 {
			if yyj2685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2685Slc = r.DecodeBytes(yys2685Slc, true, true)
		yys2685 := string(yys2685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2685 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2686 := &x.Ingress
				yym2687 := z.DecBinary()
				_ = yym2687
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2686), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2685)
		} // end switch yys2685
	} // end for yyj2685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2688 int
	var yyb2688 bool
	var yyhl2688 bool = l >= 0
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2689 := &x.Ingress
		yym2690 := z.DecBinary()
		_ = yym2690
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2689), d)
		}
	}
	for {
		yyj2688++
		if yyhl2688 {
			yyb2688 = yyj2688 > l
		} else {
			yyb2688 = r.CheckBreak()
		}
		if yyb2688 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2688-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2691 := z.EncBinary()
		_ = yym2691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2692 := !z.EncBinary()
			yy2arr2692 := z.EncBasicHandle().StructToArray
			var yyq2692 [2]bool
			_, _, _ = yysep2692, yyq2692, yy2arr2692
			const yyr2692 bool = false
			yyq2692[0] = x.IP != ""
			yyq2692[1] = x.Hostname != ""
			var yynn2692 int
			if yyr2692 || yy2arr2692 {
				r.EncodeArrayStart(2)
			} else {
				yynn2692 = 0
				for _, b := range yyq2692 {
					if b {
						yynn2692++
					}
				}
				r.EncodeMapStart(yynn2692)
				yynn2692 = 0
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2692[0] {
					yym2694 := z.EncBinary()
					_ = yym2694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2692[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2692[1] {
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2692[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2699 := z.DecBinary()
	_ = yym2699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2700 := r.ContainerType()
		if yyct2700 == codecSelferValueTypeMap1234 {
			yyl2700 := r.ReadMapStart()
			if yyl2700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2700, d)
			}
		} else if yyct2700 == codecSelferValueTypeArray1234 {
			yyl2700 := r.ReadArrayStart()
			if yyl2700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2701Slc
	var yyhl2701 bool = l >= 0
	for yyj2701 := 0; ; yyj2701++ {
		if yyhl2701 {
			if yyj2701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2701Slc = r.DecodeBytes(yys2701Slc, true, true)
		yys2701 := string(yys2701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2701 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2701)
		} // end switch yys2701
	} // end for yyj2701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2704 int
	var yyb2704 bool
	var yyhl2704 bool = l >= 0
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2704++
		if yyhl2704 {
			yyb2704 = yyj2704 > l
		} else {
			yyb2704 = r.CheckBreak()
		}
		if yyb2704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2707 := z.EncBinary()
		_ = yym2707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2708 := !z.EncBinary()
			yy2arr2708 := z.EncBasicHandle().StructToArray
			var yyq2708 [9]bool
			_, _, _ = yysep2708, yyq2708, yy2arr2708
			const yyr2708 bool = false
			yyq2708[0] = x.Type != ""
			yyq2708[3] = x.ClusterIP != ""
			yyq2708[5] = len(x.ExternalIPs) != 0
			yyq2708[6] = x.LoadBalancerIP != ""
			yyq2708[7] = x.SessionAffinity != ""
			yyq2708[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2708 int
			if yyr2708 || yy2arr2708 {
				r.EncodeArrayStart(9)
			} else {
				yynn2708 = 3
				for _, b := range yyq2708 {
					if b {
						yynn2708++
					}
				}
				r.EncodeMapStart(yynn2708)
				yynn2708 = 0
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[3] {
					yym2717 := z.EncBinary()
					_ = yym2717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2720 := z.EncBinary()
				_ = yym2720
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2721 := z.EncBinary()
				_ = yym2721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2723 := z.EncBinary()
						_ = yym2723
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2708[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2724 := z.EncBinary()
						_ = yym2724
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[6] {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2708[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2708[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2730 := z.EncBinary()
						_ = yym2730
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2708[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2731 := z.EncBinary()
						_ = yym2731
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2708 || yy2arr2708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2732 := z.DecBinary()
	_ = yym2732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2733 := r.ContainerType()
		if yyct2733 == codecSelferValueTypeMap1234 {
			yyl2733 := r.ReadMapStart()
			if yyl2733 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2733, d)
			}
		} else if yyct2733 == codecSelferValueTypeArray1234 {
			yyl2733 := r.ReadArrayStart()
			if yyl2733 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2734Slc
	var yyhl2734 bool = l >= 0
	for yyj2734 := 0; ; yyj2734++ {
		if yyhl2734 {
			if yyj2734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2734Slc = r.DecodeBytes(yys2734Slc, true, true)
		yys2734 := string(yys2734Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2734 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2736 := &x.Ports
				yym2737 := z.DecBinary()
				_ = yym2737
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2736), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2738 := &x.Selector
				yym2739 := z.DecBinary()
				_ = yym2739
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2738, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2742 := &x.ExternalIPs
				yym2743 := z.DecBinary()
				_ = yym2743
				if false {
				} else {
					z.F.DecSliceStringX(yyv2742, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2746 := &x.LoadBalancerSourceRanges
				yym2747 := z.DecBinary()
				_ = yym2747
				if false {
				} else {
					z.F.DecSliceStringX(yyv2746, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2734)
		} // end switch yys2734
	} // end for yyj2734
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2748 int
	var yyb2748 bool
	var yyhl2748 bool = l >= 0
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2750 := &x.Ports
		yym2751 := z.DecBinary()
		_ = yym2751
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2750), d)
		}
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2752 := &x.Selector
		yym2753 := z.DecBinary()
		_ = yym2753
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2752, false, d)
		}
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2756 := &x.ExternalIPs
		yym2757 := z.DecBinary()
		_ = yym2757
		if false {
		} else {
			z.F.DecSliceStringX(yyv2756, false, d)
		}
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2748++
	if yyhl2748 {
		yyb2748 = yyj2748 > l
	} else {
		yyb2748 = r.CheckBreak()
	}
	if yyb2748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2760 := &x.LoadBalancerSourceRanges
		yym2761 := z.DecBinary()
		_ = yym2761
		if false {
		} else {
			z.F.DecSliceStringX(yyv2760, false, d)
		}
	}
	for {
		yyj2748++
		if yyhl2748 {
			yyb2748 = yyj2748 > l
		} else {
			yyb2748 = r.CheckBreak()
		}
		if yyb2748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2762 := z.EncBinary()
		_ = yym2762
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2763 := !z.EncBinary()
			yy2arr2763 := z.EncBasicHandle().StructToArray
			var yyq2763 [5]bool
			_, _, _ = yysep2763, yyq2763, yy2arr2763
			const yyr2763 bool = false
			var yynn2763 int
			if yyr2763 || yy2arr2763 {
				r.EncodeArrayStart(5)
			} else {
				yynn2763 = 5
				for _, b := range yyq2763 {
					if b {
						yynn2763++
					}
				}
				r.EncodeMapStart(yynn2763)
				yynn2763 = 0
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2765 := z.EncBinary()
				_ = yym2765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2766 := z.EncBinary()
				_ = yym2766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2769 := z.EncBinary()
				_ = yym2769
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2770 := z.EncBinary()
				_ = yym2770
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2772 := &x.TargetPort
				yym2773 := z.EncBinary()
				_ = yym2773
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2772) {
				} else if !yym2773 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2772)
				} else {
					z.EncFallback(yy2772)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2774 := &x.TargetPort
				yym2775 := z.EncBinary()
				_ = yym2775
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2774) {
				} else if !yym2775 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2774)
				} else {
					z.EncFallback(yy2774)
				}
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2777 := z.EncBinary()
				_ = yym2777
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2778 := z.EncBinary()
				_ = yym2778
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2763 || yy2arr2763 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2779 := z.DecBinary()
	_ = yym2779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2780 := r.ContainerType()
		if yyct2780 == codecSelferValueTypeMap1234 {
			yyl2780 := r.ReadMapStart()
			if yyl2780 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2780, d)
			}
		} else if yyct2780 == codecSelferValueTypeArray1234 {
			yyl2780 := r.ReadArrayStart()
			if yyl2780 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2780, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2781Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2781Slc
	var yyhl2781 bool = l >= 0
	for yyj2781 := 0; ; yyj2781++ {
		if yyhl2781 {
			if yyj2781 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2781Slc = r.DecodeBytes(yys2781Slc, true, true)
		yys2781 := string(yys2781Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2781 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2785 := &x.TargetPort
				yym2786 := z.DecBinary()
				_ = yym2786
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2785) {
				} else if !yym2786 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2785)
				} else {
					z.DecFallback(yyv2785, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2781)
		} // end switch yys2781
	} // end for yyj2781
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2788 int
	var yyb2788 bool
	var yyhl2788 bool = l >= 0
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2792 := &x.TargetPort
		yym2793 := z.DecBinary()
		_ = yym2793
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2792) {
		} else if !yym2793 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2792)
		} else {
			z.DecFallback(yyv2792, false)
		}
	}
	yyj2788++
	if yyhl2788 {
		yyb2788 = yyj2788 > l
	} else {
		yyb2788 = r.CheckBreak()
	}
	if yyb2788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2788++
		if yyhl2788 {
			yyb2788 = yyj2788 > l
		} else {
			yyb2788 = r.CheckBreak()
		}
		if yyb2788 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2788-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2795 := z.EncBinary()
		_ = yym2795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2796 := !z.EncBinary()
			yy2arr2796 := z.EncBasicHandle().StructToArray
			var yyq2796 [5]bool
			_, _, _ = yysep2796, yyq2796, yy2arr2796
			const yyr2796 bool = false
			yyq2796[0] = x.Kind != ""
			yyq2796[1] = x.APIVersion != ""
			yyq2796[2] = true
			yyq2796[3] = true
			yyq2796[4] = true
			var yynn2796 int
			if yyr2796 || yy2arr2796 {
				r.EncodeArrayStart(5)
			} else {
				yynn2796 = 0
				for _, b := range yyq2796 {
					if b {
						yynn2796++
					}
				}
				r.EncodeMapStart(yynn2796)
				yynn2796 = 0
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[0] {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[1] {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[2] {
					yy2804 := &x.ObjectMeta
					yy2804.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2805 := &x.ObjectMeta
					yy2805.CodecEncodeSelf(e)
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[3] {
					yy2807 := &x.Spec
					yy2807.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2808 := &x.Spec
					yy2808.CodecEncodeSelf(e)
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[4] {
					yy2810 := &x.Status
					yy2810.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2811 := &x.Status
					yy2811.CodecEncodeSelf(e)
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2812 := z.DecBinary()
	_ = yym2812
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2813 := r.ContainerType()
		if yyct2813 == codecSelferValueTypeMap1234 {
			yyl2813 := r.ReadMapStart()
			if yyl2813 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2813, d)
			}
		} else if yyct2813 == codecSelferValueTypeArray1234 {
			yyl2813 := r.ReadArrayStart()
			if yyl2813 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2813, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2814Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2814Slc
	var yyhl2814 bool = l >= 0
	for yyj2814 := 0; ; yyj2814++ {
		if yyhl2814 {
			if yyj2814 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2814Slc = r.DecodeBytes(yys2814Slc, true, true)
		yys2814 := string(yys2814Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2814 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2817 := &x.ObjectMeta
				yyv2817.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2818 := &x.Spec
				yyv2818.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2819 := &x.Status
				yyv2819.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2814)
		} // end switch yys2814
	} // end for yyj2814
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2820 int
	var yyb2820 bool
	var yyhl2820 bool = l >= 0
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2823 := &x.ObjectMeta
		yyv2823.CodecDecodeSelf(d)
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2824 := &x.Spec
		yyv2824.CodecDecodeSelf(d)
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2825 := &x.Status
		yyv2825.CodecDecodeSelf(d)
	}
	for {
		yyj2820++
		if yyhl2820 {
			yyb2820 = yyj2820 > l
		} else {
			yyb2820 = r.CheckBreak()
		}
		if yyb2820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2826 := z.EncBinary()
		_ = yym2826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2827 := !z.EncBinary()
			yy2arr2827 := z.EncBasicHandle().StructToArray
			var yyq2827 [5]bool
			_, _, _ = yysep2827, yyq2827, yy2arr2827
			const yyr2827 bool = false
			yyq2827[0] = x.Kind != ""
			yyq2827[1] = x.APIVersion != ""
			yyq2827[2] = true
			yyq2827[4] = len(x.ImagePullSecrets) != 0
			var yynn2827 int
			if yyr2827 || yy2arr2827 {
				r.EncodeArrayStart(5)
			} else {
				yynn2827 = 1
				for _, b := range yyq2827 {
					if b {
						yynn2827++
					}
				}
				r.EncodeMapStart(yynn2827)
				yynn2827 = 0
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[0] {
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[1] {
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[2] {
					yy2835 := &x.ObjectMeta
					yy2835.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2836 := &x.ObjectMeta
					yy2836.CodecEncodeSelf(e)
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2841 := z.EncBinary()
						_ = yym2841
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2827[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2842 := z.EncBinary()
						_ = yym2842
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2843 := z.DecBinary()
	_ = yym2843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2844 := r.ContainerType()
		if yyct2844 == codecSelferValueTypeMap1234 {
			yyl2844 := r.ReadMapStart()
			if yyl2844 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2844, d)
			}
		} else if yyct2844 == codecSelferValueTypeArray1234 {
			yyl2844 := r.ReadArrayStart()
			if yyl2844 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2845Slc
	var yyhl2845 bool = l >= 0
	for yyj2845 := 0; ; yyj2845++ {
		if yyhl2845 {
			if yyj2845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2845Slc = r.DecodeBytes(yys2845Slc, true, true)
		yys2845 := string(yys2845Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2845 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2848 := &x.ObjectMeta
				yyv2848.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2849 := &x.Secrets
				yym2850 := z.DecBinary()
				_ = yym2850
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2849), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2851 := &x.ImagePullSecrets
				yym2852 := z.DecBinary()
				_ = yym2852
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2851), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2845)
		} // end switch yys2845
	} // end for yyj2845
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2853 int
	var yyb2853 bool
	var yyhl2853 bool = l >= 0
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2856 := &x.ObjectMeta
		yyv2856.CodecDecodeSelf(d)
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2857 := &x.Secrets
		yym2858 := z.DecBinary()
		_ = yym2858
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2857), d)
		}
	}
	yyj2853++
	if yyhl2853 {
		yyb2853 = yyj2853 > l
	} else {
		yyb2853 = r.CheckBreak()
	}
	if yyb2853 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2859 := &x.ImagePullSecrets
		yym2860 := z.DecBinary()
		_ = yym2860
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2859), d)
		}
	}
	for {
		yyj2853++
		if yyhl2853 {
			yyb2853 = yyj2853 > l
		} else {
			yyb2853 = r.CheckBreak()
		}
		if yyb2853 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2853-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2861 := z.EncBinary()
		_ = yym2861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2862 := !z.EncBinary()
			yy2arr2862 := z.EncBasicHandle().StructToArray
			var yyq2862 [4]bool
			_, _, _ = yysep2862, yyq2862, yy2arr2862
			const yyr2862 bool = false
			yyq2862[0] = x.Kind != ""
			yyq2862[1] = x.APIVersion != ""
			yyq2862[2] = true
			var yynn2862 int
			if yyr2862 || yy2arr2862 {
				r.EncodeArrayStart(4)
			} else {
				yynn2862 = 1
				for _, b := range yyq2862 {
					if b {
						yynn2862++
					}
				}
				r.EncodeMapStart(yynn2862)
				yynn2862 = 0
			}
			if yyr2862 || yy2arr2862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2862[0] {
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2862[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2862 || yy2arr2862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2862[1] {
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2862[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2862 || yy2arr2862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2862[2] {
					yy2870 := &x.ListMeta
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2870) {
					} else {
						z.EncFallback(yy2870)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2862[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2872 := &x.ListMeta
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2872) {
					} else {
						z.EncFallback(yy2872)
					}
				}
			}
			if yyr2862 || yy2arr2862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2862 || yy2arr2862 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2877 := z.DecBinary()
	_ = yym2877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2878 := r.ContainerType()
		if yyct2878 == codecSelferValueTypeMap1234 {
			yyl2878 := r.ReadMapStart()
			if yyl2878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2878, d)
			}
		} else if yyct2878 == codecSelferValueTypeArray1234 {
			yyl2878 := r.ReadArrayStart()
			if yyl2878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2879Slc
	var yyhl2879 bool = l >= 0
	for yyj2879 := 0; ; yyj2879++ {
		if yyhl2879 {
			if yyj2879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2879Slc = r.DecodeBytes(yys2879Slc, true, true)
		yys2879 := string(yys2879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2879 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2882 := &x.ListMeta
				yym2883 := z.DecBinary()
				_ = yym2883
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2882) {
				} else {
					z.DecFallback(yyv2882, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2884 := &x.Items
				yym2885 := z.DecBinary()
				_ = yym2885
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2884), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2879)
		} // end switch yys2879
	} // end for yyj2879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2886 int
	var yyb2886 bool
	var yyhl2886 bool = l >= 0
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2889 := &x.ListMeta
		yym2890 := z.DecBinary()
		_ = yym2890
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2889) {
		} else {
			z.DecFallback(yyv2889, false)
		}
	}
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2891 := &x.Items
		yym2892 := z.DecBinary()
		_ = yym2892
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2891), d)
		}
	}
	for {
		yyj2886++
		if yyhl2886 {
			yyb2886 = yyj2886 > l
		} else {
			yyb2886 = r.CheckBreak()
		}
		if yyb2886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2893 := z.EncBinary()
		_ = yym2893
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2894 := !z.EncBinary()
			yy2arr2894 := z.EncBasicHandle().StructToArray
			var yyq2894 [4]bool
			_, _, _ = yysep2894, yyq2894, yy2arr2894
			const yyr2894 bool = false
			yyq2894[0] = x.Kind != ""
			yyq2894[1] = x.APIVersion != ""
			yyq2894[2] = true
			var yynn2894 int
			if yyr2894 || yy2arr2894 {
				r.EncodeArrayStart(4)
			} else {
				yynn2894 = 1
				for _, b := range yyq2894 {
					if b {
						yynn2894++
					}
				}
				r.EncodeMapStart(yynn2894)
				yynn2894 = 0
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2894[0] {
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2894[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2894[1] {
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2894[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2894[2] {
					yy2902 := &x.ObjectMeta
					yy2902.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2894[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2903 := &x.ObjectMeta
					yy2903.CodecEncodeSelf(e)
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2894 || yy2arr2894 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2907 := z.DecBinary()
	_ = yym2907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2908 := r.ContainerType()
		if yyct2908 == codecSelferValueTypeMap1234 {
			yyl2908 := r.ReadMapStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2908, d)
			}
		} else if yyct2908 == codecSelferValueTypeArray1234 {
			yyl2908 := r.ReadArrayStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2909Slc
	var yyhl2909 bool = l >= 0
	for yyj2909 := 0; ; yyj2909++ {
		if yyhl2909 {
			if yyj2909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2909Slc = r.DecodeBytes(yys2909Slc, true, true)
		yys2909 := string(yys2909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2909 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2912 := &x.ObjectMeta
				yyv2912.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2913 := &x.Subsets
				yym2914 := z.DecBinary()
				_ = yym2914
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2913), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2909)
		} // end switch yys2909
	} // end for yyj2909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2915 int
	var yyb2915 bool
	var yyhl2915 bool = l >= 0
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2918 := &x.ObjectMeta
		yyv2918.CodecDecodeSelf(d)
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2919 := &x.Subsets
		yym2920 := z.DecBinary()
		_ = yym2920
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2919), d)
		}
	}
	for {
		yyj2915++
		if yyhl2915 {
			yyb2915 = yyj2915 > l
		} else {
			yyb2915 = r.CheckBreak()
		}
		if yyb2915 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2915-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2921 := z.EncBinary()
		_ = yym2921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2922 := !z.EncBinary()
			yy2arr2922 := z.EncBasicHandle().StructToArray
			var yyq2922 [3]bool
			_, _, _ = yysep2922, yyq2922, yy2arr2922
			const yyr2922 bool = false
			var yynn2922 int
			if yyr2922 || yy2arr2922 {
				r.EncodeArrayStart(3)
			} else {
				yynn2922 = 3
				for _, b := range yyq2922 {
					if b {
						yynn2922++
					}
				}
				r.EncodeMapStart(yynn2922)
				yynn2922 = 0
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2932 := z.DecBinary()
	_ = yym2932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2933 := r.ContainerType()
		if yyct2933 == codecSelferValueTypeMap1234 {
			yyl2933 := r.ReadMapStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2933, d)
			}
		} else if yyct2933 == codecSelferValueTypeArray1234 {
			yyl2933 := r.ReadArrayStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2934Slc
	var yyhl2934 bool = l >= 0
	for yyj2934 := 0; ; yyj2934++ {
		if yyhl2934 {
			if yyj2934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2934Slc = r.DecodeBytes(yys2934Slc, true, true)
		yys2934 := string(yys2934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2934 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2935 := &x.Addresses
				yym2936 := z.DecBinary()
				_ = yym2936
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2935), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2937 := &x.NotReadyAddresses
				yym2938 := z.DecBinary()
				_ = yym2938
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2937), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2939 := &x.Ports
				yym2940 := z.DecBinary()
				_ = yym2940
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2939), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2934)
		} // end switch yys2934
	} // end for yyj2934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2941 int
	var yyb2941 bool
	var yyhl2941 bool = l >= 0
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2942 := &x.Addresses
		yym2943 := z.DecBinary()
		_ = yym2943
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2942), d)
		}
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2944 := &x.NotReadyAddresses
		yym2945 := z.DecBinary()
		_ = yym2945
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2944), d)
		}
	}
	yyj2941++
	if yyhl2941 {
		yyb2941 = yyj2941 > l
	} else {
		yyb2941 = r.CheckBreak()
	}
	if yyb2941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2946 := &x.Ports
		yym2947 := z.DecBinary()
		_ = yym2947
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2946), d)
		}
	}
	for {
		yyj2941++
		if yyhl2941 {
			yyb2941 = yyj2941 > l
		} else {
			yyb2941 = r.CheckBreak()
		}
		if yyb2941 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2941-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2948 := z.EncBinary()
		_ = yym2948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2949 := !z.EncBinary()
			yy2arr2949 := z.EncBasicHandle().StructToArray
			var yyq2949 [4]bool
			_, _, _ = yysep2949, yyq2949, yy2arr2949
			const yyr2949 bool = false
			yyq2949[1] = x.Hostname != ""
			yyq2949[2] = x.NodeName != nil
			var yynn2949 int
			if yyr2949 || yy2arr2949 {
				r.EncodeArrayStart(4)
			} else {
				yynn2949 = 2
				for _, b := range yyq2949 {
					if b {
						yynn2949++
					}
				}
				r.EncodeMapStart(yynn2949)
				yynn2949 = 0
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2951 := z.EncBinary()
				_ = yym2951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2952 := z.EncBinary()
				_ = yym2952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[1] {
					yym2954 := z.EncBinary()
					_ = yym2954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2949[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2957 := *x.NodeName
						yym2958 := z.EncBinary()
						_ = yym2958
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2957))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2949[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2959 := *x.NodeName
						yym2960 := z.EncBinary()
						_ = yym2960
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2959))
						}
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2962 := z.DecBinary()
	_ = yym2962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2963 := r.ContainerType()
		if yyct2963 == codecSelferValueTypeMap1234 {
			yyl2963 := r.ReadMapStart()
			if yyl2963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2963, d)
			}
		} else if yyct2963 == codecSelferValueTypeArray1234 {
			yyl2963 := r.ReadArrayStart()
			if yyl2963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2964Slc
	var yyhl2964 bool = l >= 0
	for yyj2964 := 0; ; yyj2964++ {
		if yyhl2964 {
			if yyj2964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2964Slc = r.DecodeBytes(yys2964Slc, true, true)
		yys2964 := string(yys2964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2964 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2968 := z.DecBinary()
				_ = yym2968
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2964)
		} // end switch yys2964
	} // end for yyj2964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2970 int
	var yyb2970 bool
	var yyhl2970 bool = l >= 0
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2974 := z.DecBinary()
		_ = yym2974
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2970++
		if yyhl2970 {
			yyb2970 = yyj2970 > l
		} else {
			yyb2970 = r.CheckBreak()
		}
		if yyb2970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2976 := z.EncBinary()
		_ = yym2976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2977 := !z.EncBinary()
			yy2arr2977 := z.EncBasicHandle().StructToArray
			var yyq2977 [3]bool
			_, _, _ = yysep2977, yyq2977, yy2arr2977
			const yyr2977 bool = false
			var yynn2977 int
			if yyr2977 || yy2arr2977 {
				r.EncodeArrayStart(3)
			} else {
				yynn2977 = 3
				for _, b := range yyq2977 {
					if b {
						yynn2977++
					}
				}
				r.EncodeMapStart(yynn2977)
				yynn2977 = 0
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2979 := z.EncBinary()
				_ = yym2979
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2980 := z.EncBinary()
				_ = yym2980
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2982 := z.EncBinary()
				_ = yym2982
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2983 := z.EncBinary()
				_ = yym2983
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2985 := z.DecBinary()
	_ = yym2985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2986 := r.ContainerType()
		if yyct2986 == codecSelferValueTypeMap1234 {
			yyl2986 := r.ReadMapStart()
			if yyl2986 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2986, d)
			}
		} else if yyct2986 == codecSelferValueTypeArray1234 {
			yyl2986 := r.ReadArrayStart()
			if yyl2986 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2987Slc
	var yyhl2987 bool = l >= 0
	for yyj2987 := 0; ; yyj2987++ {
		if yyhl2987 {
			if yyj2987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2987Slc = r.DecodeBytes(yys2987Slc, true, true)
		yys2987 := string(yys2987Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2987 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2987)
		} // end switch yys2987
	} // end for yyj2987
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2991 int
	var yyb2991 bool
	var yyhl2991 bool = l >= 0
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2991++
		if yyhl2991 {
			yyb2991 = yyj2991 > l
		} else {
			yyb2991 = r.CheckBreak()
		}
		if yyb2991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2995 := z.EncBinary()
		_ = yym2995
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2996 := !z.EncBinary()
			yy2arr2996 := z.EncBasicHandle().StructToArray
			var yyq2996 [4]bool
			_, _, _ = yysep2996, yyq2996, yy2arr2996
			const yyr2996 bool = false
			yyq2996[0] = x.Kind != ""
			yyq2996[1] = x.APIVersion != ""
			yyq2996[2] = true
			var yynn2996 int
			if yyr2996 || yy2arr2996 {
				r.EncodeArrayStart(4)
			} else {
				yynn2996 = 1
				for _, b := range yyq2996 {
					if b {
						yynn2996++
					}
				}
				r.EncodeMapStart(yynn2996)
				yynn2996 = 0
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2996[0] {
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2996[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2996[1] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2996[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2996[2] {
					yy3004 := &x.ListMeta
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3004) {
					} else {
						z.EncFallback(yy3004)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2996[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3006 := &x.ListMeta
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3006) {
					} else {
						z.EncFallback(yy3006)
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3010 := z.EncBinary()
					_ = yym3010
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3011 := z.DecBinary()
	_ = yym3011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3012 := r.ContainerType()
		if yyct3012 == codecSelferValueTypeMap1234 {
			yyl3012 := r.ReadMapStart()
			if yyl3012 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3012, d)
			}
		} else if yyct3012 == codecSelferValueTypeArray1234 {
			yyl3012 := r.ReadArrayStart()
			if yyl3012 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3012, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3013Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3013Slc
	var yyhl3013 bool = l >= 0
	for yyj3013 := 0; ; yyj3013++ {
		if yyhl3013 {
			if yyj3013 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3013Slc = r.DecodeBytes(yys3013Slc, true, true)
		yys3013 := string(yys3013Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3013 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3016 := &x.ListMeta
				yym3017 := z.DecBinary()
				_ = yym3017
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3016) {
				} else {
					z.DecFallback(yyv3016, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3018 := &x.Items
				yym3019 := z.DecBinary()
				_ = yym3019
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv3018), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3013)
		} // end switch yys3013
	} // end for yyj3013
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3020 int
	var yyb3020 bool
	var yyhl3020 bool = l >= 0
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3023 := &x.ListMeta
		yym3024 := z.DecBinary()
		_ = yym3024
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3023) {
		} else {
			z.DecFallback(yyv3023, false)
		}
	}
	yyj3020++
	if yyhl3020 {
		yyb3020 = yyj3020 > l
	} else {
		yyb3020 = r.CheckBreak()
	}
	if yyb3020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3025 := &x.Items
		yym3026 := z.DecBinary()
		_ = yym3026
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv3025), d)
		}
	}
	for {
		yyj3020++
		if yyhl3020 {
			yyb3020 = yyj3020 > l
		} else {
			yyb3020 = r.CheckBreak()
		}
		if yyb3020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3027 := z.EncBinary()
		_ = yym3027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3028 := !z.EncBinary()
			yy2arr3028 := z.EncBasicHandle().StructToArray
			var yyq3028 [4]bool
			_, _, _ = yysep3028, yyq3028, yy2arr3028
			const yyr3028 bool = false
			yyq3028[0] = x.PodCIDR != ""
			yyq3028[1] = x.ExternalID != ""
			yyq3028[2] = x.ProviderID != ""
			yyq3028[3] = x.Unschedulable != false
			var yynn3028 int
			if yyr3028 || yy2arr3028 {
				r.EncodeArrayStart(4)
			} else {
				yynn3028 = 0
				for _, b := range yyq3028 {
					if b {
						yynn3028++
					}
				}
				r.EncodeMapStart(yynn3028)
				yynn3028 = 0
			}
			if yyr3028 || yy2arr3028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3028[0] {
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3028[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr3028 || yy2arr3028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3028[1] {
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3028[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr3028 || yy2arr3028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3028[2] {
					yym3036 := z.EncBinary()
					_ = yym3036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3028[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3037 := z.EncBinary()
					_ = yym3037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr3028 || yy2arr3028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3028[3] {
					yym3039 := z.EncBinary()
					_ = yym3039
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3028[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3040 := z.EncBinary()
					_ = yym3040
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr3028 || yy2arr3028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3041 := z.DecBinary()
	_ = yym3041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3042 := r.ContainerType()
		if yyct3042 == codecSelferValueTypeMap1234 {
			yyl3042 := r.ReadMapStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3042, d)
			}
		} else if yyct3042 == codecSelferValueTypeArray1234 {
			yyl3042 := r.ReadArrayStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3043Slc
	var yyhl3043 bool = l >= 0
	for yyj3043 := 0; ; yyj3043++ {
		if yyhl3043 {
			if yyj3043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3043Slc = r.DecodeBytes(yys3043Slc, true, true)
		yys3043 := string(yys3043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3043 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3043)
		} // end switch yys3043
	} // end for yyj3043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3048 int
	var yyb3048 bool
	var yyhl3048 bool = l >= 0
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj3048++
		if yyhl3048 {
			yyb3048 = yyj3048 > l
		} else {
			yyb3048 = r.CheckBreak()
		}
		if yyb3048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3053 := z.EncBinary()
		_ = yym3053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3054 := !z.EncBinary()
			yy2arr3054 := z.EncBasicHandle().StructToArray
			var yyq3054 [1]bool
			_, _, _ = yysep3054, yyq3054, yy2arr3054
			const yyr3054 bool = false
			var yynn3054 int
			if yyr3054 || yy2arr3054 {
				r.EncodeArrayStart(1)
			} else {
				yynn3054 = 1
				for _, b := range yyq3054 {
					if b {
						yynn3054++
					}
				}
				r.EncodeMapStart(yynn3054)
				yynn3054 = 0
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3056 := z.EncBinary()
				_ = yym3056
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3057 := z.EncBinary()
				_ = yym3057
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3058 := z.DecBinary()
	_ = yym3058
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3059 := r.ContainerType()
		if yyct3059 == codecSelferValueTypeMap1234 {
			yyl3059 := r.ReadMapStart()
			if yyl3059 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3059, d)
			}
		} else if yyct3059 == codecSelferValueTypeArray1234 {
			yyl3059 := r.ReadArrayStart()
			if yyl3059 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3059, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3060Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3060Slc
	var yyhl3060 bool = l >= 0
	for yyj3060 := 0; ; yyj3060++ {
		if yyhl3060 {
			if yyj3060 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3060Slc = r.DecodeBytes(yys3060Slc, true, true)
		yys3060 := string(yys3060Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3060 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3060)
		} // end switch yys3060
	} // end for yyj3060
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3062 int
	var yyb3062 bool
	var yyhl3062 bool = l >= 0
	yyj3062++
	if yyhl3062 {
		yyb3062 = yyj3062 > l
	} else {
		yyb3062 = r.CheckBreak()
	}
	if yyb3062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj3062++
		if yyhl3062 {
			yyb3062 = yyj3062 > l
		} else {
			yyb3062 = r.CheckBreak()
		}
		if yyb3062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3064 := z.EncBinary()
		_ = yym3064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3065 := !z.EncBinary()
			yy2arr3065 := z.EncBasicHandle().StructToArray
			var yyq3065 [1]bool
			_, _, _ = yysep3065, yyq3065, yy2arr3065
			const yyr3065 bool = false
			yyq3065[0] = true
			var yynn3065 int
			if yyr3065 || yy2arr3065 {
				r.EncodeArrayStart(1)
			} else {
				yynn3065 = 0
				for _, b := range yyq3065 {
					if b {
						yynn3065++
					}
				}
				r.EncodeMapStart(yynn3065)
				yynn3065 = 0
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3065[0] {
					yy3067 := &x.KubeletEndpoint
					yy3067.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3065[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3068 := &x.KubeletEndpoint
					yy3068.CodecEncodeSelf(e)
				}
			}
			if yyr3065 || yy2arr3065 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3069 := z.DecBinary()
	_ = yym3069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3070 := r.ContainerType()
		if yyct3070 == codecSelferValueTypeMap1234 {
			yyl3070 := r.ReadMapStart()
			if yyl3070 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3070, d)
			}
		} else if yyct3070 == codecSelferValueTypeArray1234 {
			yyl3070 := r.ReadArrayStart()
			if yyl3070 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3071Slc
	var yyhl3071 bool = l >= 0
	for yyj3071 := 0; ; yyj3071++ {
		if yyhl3071 {
			if yyj3071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3071Slc = r.DecodeBytes(yys3071Slc, true, true)
		yys3071 := string(yys3071Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3071 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3072 := &x.KubeletEndpoint
				yyv3072.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3071)
		} // end switch yys3071
	} // end for yyj3071
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3073 int
	var yyb3073 bool
	var yyhl3073 bool = l >= 0
	yyj3073++
	if yyhl3073 {
		yyb3073 = yyj3073 > l
	} else {
		yyb3073 = r.CheckBreak()
	}
	if yyb3073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3074 := &x.KubeletEndpoint
		yyv3074.CodecDecodeSelf(d)
	}
	for {
		yyj3073++
		if yyhl3073 {
			yyb3073 = yyj3073 > l
		} else {
			yyb3073 = r.CheckBreak()
		}
		if yyb3073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3075 := z.EncBinary()
		_ = yym3075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3076 := !z.EncBinary()
			yy2arr3076 := z.EncBasicHandle().StructToArray
			var yyq3076 [10]bool
			_, _, _ = yysep3076, yyq3076, yy2arr3076
			const yyr3076 bool = false
			var yynn3076 int
			if yyr3076 || yy2arr3076 {
				r.EncodeArrayStart(10)
			} else {
				yynn3076 = 10
				for _, b := range yyq3076 {
					if b {
						yynn3076++
					}
				}
				r.EncodeMapStart(yynn3076)
				yynn3076 = 0
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3078 := z.EncBinary()
				_ = yym3078
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3079 := z.EncBinary()
				_ = yym3079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3081 := z.EncBinary()
				_ = yym3081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3082 := z.EncBinary()
				_ = yym3082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3084 := z.EncBinary()
				_ = yym3084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3085 := z.EncBinary()
				_ = yym3085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3087 := z.EncBinary()
				_ = yym3087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3088 := z.EncBinary()
				_ = yym3088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3090 := z.EncBinary()
				_ = yym3090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3091 := z.EncBinary()
				_ = yym3091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3093 := z.EncBinary()
				_ = yym3093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3094 := z.EncBinary()
				_ = yym3094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3096 := z.EncBinary()
				_ = yym3096
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3097 := z.EncBinary()
				_ = yym3097
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3099 := z.EncBinary()
				_ = yym3099
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3100 := z.EncBinary()
				_ = yym3100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3102 := z.EncBinary()
				_ = yym3102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3103 := z.EncBinary()
				_ = yym3103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3105 := z.EncBinary()
				_ = yym3105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3106 := z.EncBinary()
				_ = yym3106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3076 || yy2arr3076 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3107 := z.DecBinary()
	_ = yym3107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3108 := r.ContainerType()
		if yyct3108 == codecSelferValueTypeMap1234 {
			yyl3108 := r.ReadMapStart()
			if yyl3108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3108, d)
			}
		} else if yyct3108 == codecSelferValueTypeArray1234 {
			yyl3108 := r.ReadArrayStart()
			if yyl3108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3109Slc
	var yyhl3109 bool = l >= 0
	for yyj3109 := 0; ; yyj3109++ {
		if yyhl3109 {
			if yyj3109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3109Slc = r.DecodeBytes(yys3109Slc, true, true)
		yys3109 := string(yys3109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3109 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3109)
		} // end switch yys3109
	} // end for yyj3109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3120 int
	var yyb3120 bool
	var yyhl3120 bool = l >= 0
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3120++
		if yyhl3120 {
			yyb3120 = yyj3120 > l
		} else {
			yyb3120 = r.CheckBreak()
		}
		if yyb3120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3131 := z.EncBinary()
		_ = yym3131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3132 := !z.EncBinary()
			yy2arr3132 := z.EncBasicHandle().StructToArray
			var yyq3132 [10]bool
			_, _, _ = yysep3132, yyq3132, yy2arr3132
			const yyr3132 bool = false
			yyq3132[0] = len(x.Capacity) != 0
			yyq3132[1] = len(x.Allocatable) != 0
			yyq3132[2] = x.Phase != ""
			yyq3132[3] = len(x.Conditions) != 0
			yyq3132[4] = len(x.Addresses) != 0
			yyq3132[5] = true
			yyq3132[6] = true
			yyq3132[7] = len(x.Images) != 0
			yyq3132[8] = len(x.VolumesInUse) != 0
			yyq3132[9] = len(x.VolumesAttached) != 0
			var yynn3132 int
			if yyr3132 || yy2arr3132 {
				r.EncodeArrayStart(10)
			} else {
				yynn3132 = 0
				for _, b := range yyq3132 {
					if b {
						yynn3132++
					}
				}
				r.EncodeMapStart(yynn3132)
				yynn3132 = 0
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3132[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3137 := z.EncBinary()
						_ = yym3137
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3138 := z.EncBinary()
						_ = yym3138
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3140 := z.EncBinary()
						_ = yym3140
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3141 := z.EncBinary()
						_ = yym3141
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[5] {
					yy3143 := &x.DaemonEndpoints
					yy3143.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3144 := &x.DaemonEndpoints
					yy3144.CodecEncodeSelf(e)
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[6] {
					yy3146 := &x.NodeInfo
					yy3146.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3147 := &x.NodeInfo
					yy3147.CodecEncodeSelf(e)
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3149 := z.EncBinary()
						_ = yym3149
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3150 := z.EncBinary()
						_ = yym3150
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3152 := z.EncBinary()
						_ = yym3152
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3153 := z.EncBinary()
						_ = yym3153
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3132[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3155 := z.EncBinary()
						_ = yym3155
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3132[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3156 := z.EncBinary()
						_ = yym3156
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3132 || yy2arr3132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3157 := z.DecBinary()
	_ = yym3157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3158 := r.ContainerType()
		if yyct3158 == codecSelferValueTypeMap1234 {
			yyl3158 := r.ReadMapStart()
			if yyl3158 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3158, d)
			}
		} else if yyct3158 == codecSelferValueTypeArray1234 {
			yyl3158 := r.ReadArrayStart()
			if yyl3158 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3159Slc
	var yyhl3159 bool = l >= 0
	for yyj3159 := 0; ; yyj3159++ {
		if yyhl3159 {
			if yyj3159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3159Slc = r.DecodeBytes(yys3159Slc, true, true)
		yys3159 := string(yys3159Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3159 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3160 := &x.Capacity
				yyv3160.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3161 := &x.Allocatable
				yyv3161.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3163 := &x.Conditions
				yym3164 := z.DecBinary()
				_ = yym3164
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3163), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3165 := &x.Addresses
				yym3166 := z.DecBinary()
				_ = yym3166
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3165), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3167 := &x.DaemonEndpoints
				yyv3167.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3168 := &x.NodeInfo
				yyv3168.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3169 := &x.Images
				yym3170 := z.DecBinary()
				_ = yym3170
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3169), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3171 := &x.VolumesInUse
				yym3172 := z.DecBinary()
				_ = yym3172
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3171), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3173 := &x.VolumesAttached
				yym3174 := z.DecBinary()
				_ = yym3174
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3173), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3159)
		} // end switch yys3159
	} // end for yyj3159
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3175 int
	var yyb3175 bool
	var yyhl3175 bool = l >= 0
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3176 := &x.Capacity
		yyv3176.CodecDecodeSelf(d)
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3177 := &x.Allocatable
		yyv3177.CodecDecodeSelf(d)
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3179 := &x.Conditions
		yym3180 := z.DecBinary()
		_ = yym3180
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3179), d)
		}
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3181 := &x.Addresses
		yym3182 := z.DecBinary()
		_ = yym3182
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3181), d)
		}
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3183 := &x.DaemonEndpoints
		yyv3183.CodecDecodeSelf(d)
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3184 := &x.NodeInfo
		yyv3184.CodecDecodeSelf(d)
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3185 := &x.Images
		yym3186 := z.DecBinary()
		_ = yym3186
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3185), d)
		}
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3187 := &x.VolumesInUse
		yym3188 := z.DecBinary()
		_ = yym3188
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3187), d)
		}
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3189 := &x.VolumesAttached
		yym3190 := z.DecBinary()
		_ = yym3190
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3189), d)
		}
	}
	for {
		yyj3175++
		if yyhl3175 {
			yyb3175 = yyj3175 > l
		} else {
			yyb3175 = r.CheckBreak()
		}
		if yyb3175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3191 := z.EncBinary()
	_ = yym3191
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3193 := z.EncBinary()
		_ = yym3193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3194 := !z.EncBinary()
			yy2arr3194 := z.EncBasicHandle().StructToArray
			var yyq3194 [2]bool
			_, _, _ = yysep3194, yyq3194, yy2arr3194
			const yyr3194 bool = false
			var yynn3194 int
			if yyr3194 || yy2arr3194 {
				r.EncodeArrayStart(2)
			} else {
				yynn3194 = 2
				for _, b := range yyq3194 {
					if b {
						yynn3194++
					}
				}
				r.EncodeMapStart(yynn3194)
				yynn3194 = 0
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3197 := z.EncBinary()
				_ = yym3197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3198 := z.EncBinary()
				_ = yym3198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3199 := z.DecBinary()
	_ = yym3199
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3200 := r.ContainerType()
		if yyct3200 == codecSelferValueTypeMap1234 {
			yyl3200 := r.ReadMapStart()
			if yyl3200 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3200, d)
			}
		} else if yyct3200 == codecSelferValueTypeArray1234 {
			yyl3200 := r.ReadArrayStart()
			if yyl3200 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3200, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3201Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3201Slc
	var yyhl3201 bool = l >= 0
	for yyj3201 := 0; ; yyj3201++ {
		if yyhl3201 {
			if yyj3201 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3201Slc = r.DecodeBytes(yys3201Slc, true, true)
		yys3201 := string(yys3201Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3201 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3201)
		} // end switch yys3201
	} // end for yyj3201
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3204 int
	var yyb3204 bool
	var yyhl3204 bool = l >= 0
	yyj3204++
	if yyhl3204 {
		yyb3204 = yyj3204 > l
	} else {
		yyb3204 = r.CheckBreak()
	}
	if yyb3204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3204++
	if yyhl3204 {
		yyb3204 = yyj3204 > l
	} else {
		yyb3204 = r.CheckBreak()
	}
	if yyb3204 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3204++
		if yyhl3204 {
			yyb3204 = yyj3204 > l
		} else {
			yyb3204 = r.CheckBreak()
		}
		if yyb3204 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3204-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3207 := z.EncBinary()
		_ = yym3207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3208 := !z.EncBinary()
			yy2arr3208 := z.EncBasicHandle().StructToArray
			var yyq3208 [1]bool
			_, _, _ = yysep3208, yyq3208, yy2arr3208
			const yyr3208 bool = false
			yyq3208[0] = len(x.PreferAvoidPods) != 0
			var yynn3208 int
			if yyr3208 || yy2arr3208 {
				r.EncodeArrayStart(1)
			} else {
				yynn3208 = 0
				for _, b := range yyq3208 {
					if b {
						yynn3208++
					}
				}
				r.EncodeMapStart(yynn3208)
				yynn3208 = 0
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3208[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3210 := z.EncBinary()
						_ = yym3210
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3208[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3211 := z.EncBinary()
						_ = yym3211
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3212 := z.DecBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3213 := r.ContainerType()
		if yyct3213 == codecSelferValueTypeMap1234 {
			yyl3213 := r.ReadMapStart()
			if yyl3213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3213, d)
			}
		} else if yyct3213 == codecSelferValueTypeArray1234 {
			yyl3213 := r.ReadArrayStart()
			if yyl3213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3214Slc
	var yyhl3214 bool = l >= 0
	for yyj3214 := 0; ; yyj3214++ {
		if yyhl3214 {
			if yyj3214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3214Slc = r.DecodeBytes(yys3214Slc, true, true)
		yys3214 := string(yys3214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3214 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3215 := &x.PreferAvoidPods
				yym3216 := z.DecBinary()
				_ = yym3216
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3215), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3214)
		} // end switch yys3214
	} // end for yyj3214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3217 int
	var yyb3217 bool
	var yyhl3217 bool = l >= 0
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3218 := &x.PreferAvoidPods
		yym3219 := z.DecBinary()
		_ = yym3219
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3218), d)
		}
	}
	for {
		yyj3217++
		if yyhl3217 {
			yyb3217 = yyj3217 > l
		} else {
			yyb3217 = r.CheckBreak()
		}
		if yyb3217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3220 := z.EncBinary()
		_ = yym3220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3221 := !z.EncBinary()
			yy2arr3221 := z.EncBasicHandle().StructToArray
			var yyq3221 [4]bool
			_, _, _ = yysep3221, yyq3221, yy2arr3221
			const yyr3221 bool = false
			yyq3221[1] = true
			yyq3221[2] = x.Reason != ""
			yyq3221[3] = x.Message != ""
			var yynn3221 int
			if yyr3221 || yy2arr3221 {
				r.EncodeArrayStart(4)
			} else {
				yynn3221 = 1
				for _, b := range yyq3221 {
					if b {
						yynn3221++
					}
				}
				r.EncodeMapStart(yynn3221)
				yynn3221 = 0
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3223 := &x.PodSignature
				yy3223.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3224 := &x.PodSignature
				yy3224.CodecEncodeSelf(e)
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3221[1] {
					yy3226 := &x.EvictionTime
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3226) {
					} else if yym3227 {
						z.EncBinaryMarshal(yy3226)
					} else if !yym3227 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3226)
					} else {
						z.EncFallback(yy3226)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3228 := &x.EvictionTime
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3228) {
					} else if yym3229 {
						z.EncBinaryMarshal(yy3228)
					} else if !yym3229 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3228)
					} else {
						z.EncFallback(yy3228)
					}
				}
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3221[2] {
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3221[3] {
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3221[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3221 || yy2arr3221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3236 := z.DecBinary()
	_ = yym3236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3237 := r.ContainerType()
		if yyct3237 == codecSelferValueTypeMap1234 {
			yyl3237 := r.ReadMapStart()
			if yyl3237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3237, d)
			}
		} else if yyct3237 == codecSelferValueTypeArray1234 {
			yyl3237 := r.ReadArrayStart()
			if yyl3237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3238Slc
	var yyhl3238 bool = l >= 0
	for yyj3238 := 0; ; yyj3238++ {
		if yyhl3238 {
			if yyj3238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3238Slc = r.DecodeBytes(yys3238Slc, true, true)
		yys3238 := string(yys3238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3238 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3239 := &x.PodSignature
				yyv3239.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3240 := &x.EvictionTime
				yym3241 := z.DecBinary()
				_ = yym3241
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3240) {
				} else if yym3241 {
					z.DecBinaryUnmarshal(yyv3240)
				} else if !yym3241 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3240)
				} else {
					z.DecFallback(yyv3240, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3238)
		} // end switch yys3238
	} // end for yyj3238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3244 int
	var yyb3244 bool
	var yyhl3244 bool = l >= 0
	yyj3244++
	if yyhl3244 {
		yyb3244 = yyj3244 > l
	} else {
		yyb3244 = r.CheckBreak()
	}
	if yyb3244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3245 := &x.PodSignature
		yyv3245.CodecDecodeSelf(d)
	}
	yyj3244++
	if yyhl3244 {
		yyb3244 = yyj3244 > l
	} else {
		yyb3244 = r.CheckBreak()
	}
	if yyb3244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3246 := &x.EvictionTime
		yym3247 := z.DecBinary()
		_ = yym3247
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3246) {
		} else if yym3247 {
			z.DecBinaryUnmarshal(yyv3246)
		} else if !yym3247 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3246)
		} else {
			z.DecFallback(yyv3246, false)
		}
	}
	yyj3244++
	if yyhl3244 {
		yyb3244 = yyj3244 > l
	} else {
		yyb3244 = r.CheckBreak()
	}
	if yyb3244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3244++
	if yyhl3244 {
		yyb3244 = yyj3244 > l
	} else {
		yyb3244 = r.CheckBreak()
	}
	if yyb3244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3244++
		if yyhl3244 {
			yyb3244 = yyj3244 > l
		} else {
			yyb3244 = r.CheckBreak()
		}
		if yyb3244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3250 := z.EncBinary()
		_ = yym3250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3251 := !z.EncBinary()
			yy2arr3251 := z.EncBasicHandle().StructToArray
			var yyq3251 [1]bool
			_, _, _ = yysep3251, yyq3251, yy2arr3251
			const yyr3251 bool = false
			yyq3251[0] = x.PodController != nil
			var yynn3251 int
			if yyr3251 || yy2arr3251 {
				r.EncodeArrayStart(1)
			} else {
				yynn3251 = 0
				for _, b := range yyq3251 {
					if b {
						yynn3251++
					}
				}
				r.EncodeMapStart(yynn3251)
				yynn3251 = 0
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3251[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3253 := z.DecBinary()
	_ = yym3253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3254 := r.ContainerType()
		if yyct3254 == codecSelferValueTypeMap1234 {
			yyl3254 := r.ReadMapStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3254, d)
			}
		} else if yyct3254 == codecSelferValueTypeArray1234 {
			yyl3254 := r.ReadArrayStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3255Slc
	var yyhl3255 bool = l >= 0
	for yyj3255 := 0; ; yyj3255++ {
		if yyhl3255 {
			if yyj3255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3255Slc = r.DecodeBytes(yys3255Slc, true, true)
		yys3255 := string(yys3255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3255 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3255)
		} // end switch yys3255
	} // end for yyj3255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3257 int
	var yyb3257 bool
	var yyhl3257 bool = l >= 0
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3257++
		if yyhl3257 {
			yyb3257 = yyj3257 > l
		} else {
			yyb3257 = r.CheckBreak()
		}
		if yyb3257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3259 := z.EncBinary()
		_ = yym3259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3260 := !z.EncBinary()
			yy2arr3260 := z.EncBasicHandle().StructToArray
			var yyq3260 [2]bool
			_, _, _ = yysep3260, yyq3260, yy2arr3260
			const yyr3260 bool = false
			yyq3260[1] = x.SizeBytes != 0
			var yynn3260 int
			if yyr3260 || yy2arr3260 {
				r.EncodeArrayStart(2)
			} else {
				yynn3260 = 1
				for _, b := range yyq3260 {
					if b {
						yynn3260++
					}
				}
				r.EncodeMapStart(yynn3260)
				yynn3260 = 0
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3260[1] {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3260[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3267 := z.DecBinary()
	_ = yym3267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3268 := r.ContainerType()
		if yyct3268 == codecSelferValueTypeMap1234 {
			yyl3268 := r.ReadMapStart()
			if yyl3268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3268, d)
			}
		} else if yyct3268 == codecSelferValueTypeArray1234 {
			yyl3268 := r.ReadArrayStart()
			if yyl3268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3269Slc
	var yyhl3269 bool = l >= 0
	for yyj3269 := 0; ; yyj3269++ {
		if yyhl3269 {
			if yyj3269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3269Slc = r.DecodeBytes(yys3269Slc, true, true)
		yys3269 := string(yys3269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3269 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3270 := &x.Names
				yym3271 := z.DecBinary()
				_ = yym3271
				if false {
				} else {
					z.F.DecSliceStringX(yyv3270, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3269)
		} // end switch yys3269
	} // end for yyj3269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3273 int
	var yyb3273 bool
	var yyhl3273 bool = l >= 0
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3274 := &x.Names
		yym3275 := z.DecBinary()
		_ = yym3275
		if false {
		} else {
			z.F.DecSliceStringX(yyv3274, false, d)
		}
	}
	yyj3273++
	if yyhl3273 {
		yyb3273 = yyj3273 > l
	} else {
		yyb3273 = r.CheckBreak()
	}
	if yyb3273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3273++
		if yyhl3273 {
			yyb3273 = yyj3273 > l
		} else {
			yyb3273 = r.CheckBreak()
		}
		if yyb3273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3277 := z.EncBinary()
	_ = yym3277
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3278 := z.DecBinary()
	_ = yym3278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3279 := z.EncBinary()
	_ = yym3279
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3280 := z.DecBinary()
	_ = yym3280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3281 := z.EncBinary()
		_ = yym3281
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3282 := !z.EncBinary()
			yy2arr3282 := z.EncBasicHandle().StructToArray
			var yyq3282 [6]bool
			_, _, _ = yysep3282, yyq3282, yy2arr3282
			const yyr3282 bool = false
			yyq3282[2] = true
			yyq3282[3] = true
			yyq3282[4] = x.Reason != ""
			yyq3282[5] = x.Message != ""
			var yynn3282 int
			if yyr3282 || yy2arr3282 {
				r.EncodeArrayStart(6)
			} else {
				yynn3282 = 2
				for _, b := range yyq3282 {
					if b {
						yynn3282++
					}
				}
				r.EncodeMapStart(yynn3282)
				yynn3282 = 0
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[2] {
					yy3286 := &x.LastHeartbeatTime
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3286) {
					} else if yym3287 {
						z.EncBinaryMarshal(yy3286)
					} else if !yym3287 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3286)
					} else {
						z.EncFallback(yy3286)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3282[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3288 := &x.LastHeartbeatTime
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3288) {
					} else if yym3289 {
						z.EncBinaryMarshal(yy3288)
					} else if !yym3289 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3288)
					} else {
						z.EncFallback(yy3288)
					}
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[3] {
					yy3291 := &x.LastTransitionTime
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3291) {
					} else if yym3292 {
						z.EncBinaryMarshal(yy3291)
					} else if !yym3292 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3291)
					} else {
						z.EncFallback(yy3291)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3282[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3293 := &x.LastTransitionTime
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3293) {
					} else if yym3294 {
						z.EncBinaryMarshal(yy3293)
					} else if !yym3294 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3293)
					} else {
						z.EncFallback(yy3293)
					}
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[4] {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3282[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[5] {
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3282[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3302 := r.ContainerType()
		if yyct3302 == codecSelferValueTypeMap1234 {
			yyl3302 := r.ReadMapStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3302, d)
			}
		} else if yyct3302 == codecSelferValueTypeArray1234 {
			yyl3302 := r.ReadArrayStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3303Slc
	var yyhl3303 bool = l >= 0
	for yyj3303 := 0; ; yyj3303++ {
		if yyhl3303 {
			if yyj3303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3303Slc = r.DecodeBytes(yys3303Slc, true, true)
		yys3303 := string(yys3303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3303 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3306 := &x.LastHeartbeatTime
				yym3307 := z.DecBinary()
				_ = yym3307
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3306) {
				} else if yym3307 {
					z.DecBinaryUnmarshal(yyv3306)
				} else if !yym3307 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3306)
				} else {
					z.DecFallback(yyv3306, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3308 := &x.LastTransitionTime
				yym3309 := z.DecBinary()
				_ = yym3309
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3308) {
				} else if yym3309 {
					z.DecBinaryUnmarshal(yyv3308)
				} else if !yym3309 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3308)
				} else {
					z.DecFallback(yyv3308, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3303)
		} // end switch yys3303
	} // end for yyj3303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3312 int
	var yyb3312 bool
	var yyhl3312 bool = l >= 0
	yyj3312++
	if yyhl3312 {
		yyb3312 = yyj3312 > l
	} else {
		yyb3312 = r.CheckBreak()
	}
	if yyb3312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3312++
	if yyhl3312 {
		yyb3312 = yyj3312 > l
	} else {
		yyb3312 = r.CheckBreak()
	}
	if yyb3312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3312++
	if yyhl3312 {
		yyb3312 = yyj3312 > l
	} else {
		yyb3312 = r.CheckBreak()
	}
	if yyb3312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3315 := &x.LastHeartbeatTime
		yym3316 := z.DecBinary()
		_ = yym3316
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3315) {
		} else if yym3316 {
			z.DecBinaryUnmarshal(yyv3315)
		} else if !yym3316 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3315)
		} else {
			z.DecFallback(yyv3315, false)
		}
	}
	yyj3312++
	if yyhl3312 {
		yyb3312 = yyj3312 > l
	} else {
		yyb3312 = r.CheckBreak()
	}
	if yyb3312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3317 := &x.LastTransitionTime
		yym3318 := z.DecBinary()
		_ = yym3318
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3317) {
		} else if yym3318 {
			z.DecBinaryUnmarshal(yyv3317)
		} else if !yym3318 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3317)
		} else {
			z.DecFallback(yyv3317, false)
		}
	}
	yyj3312++
	if yyhl3312 {
		yyb3312 = yyj3312 > l
	} else {
		yyb3312 = r.CheckBreak()
	}
	if yyb3312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3312++
	if yyhl3312 {
		yyb3312 = yyj3312 > l
	} else {
		yyb3312 = r.CheckBreak()
	}
	if yyb3312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3312++
		if yyhl3312 {
			yyb3312 = yyj3312 > l
		} else {
			yyb3312 = r.CheckBreak()
		}
		if yyb3312 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3312-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3321 := z.EncBinary()
	_ = yym3321
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3322 := z.DecBinary()
	_ = yym3322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3323 := z.EncBinary()
		_ = yym3323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3324 := !z.EncBinary()
			yy2arr3324 := z.EncBasicHandle().StructToArray
			var yyq3324 [2]bool
			_, _, _ = yysep3324, yyq3324, yy2arr3324
			const yyr3324 bool = false
			var yynn3324 int
			if yyr3324 || yy2arr3324 {
				r.EncodeArrayStart(2)
			} else {
				yynn3324 = 2
				for _, b := range yyq3324 {
					if b {
						yynn3324++
					}
				}
				r.EncodeMapStart(yynn3324)
				yynn3324 = 0
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3327 := z.EncBinary()
				_ = yym3327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3328 := z.EncBinary()
				_ = yym3328
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3329 := z.DecBinary()
	_ = yym3329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3330 := r.ContainerType()
		if yyct3330 == codecSelferValueTypeMap1234 {
			yyl3330 := r.ReadMapStart()
			if yyl3330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3330, d)
			}
		} else if yyct3330 == codecSelferValueTypeArray1234 {
			yyl3330 := r.ReadArrayStart()
			if yyl3330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3331Slc
	var yyhl3331 bool = l >= 0
	for yyj3331 := 0; ; yyj3331++ {
		if yyhl3331 {
			if yyj3331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3331Slc = r.DecodeBytes(yys3331Slc, true, true)
		yys3331 := string(yys3331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3331 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3331)
		} // end switch yys3331
	} // end for yyj3331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3334 int
	var yyb3334 bool
	var yyhl3334 bool = l >= 0
	yyj3334++
	if yyhl3334 {
		yyb3334 = yyj3334 > l
	} else {
		yyb3334 = r.CheckBreak()
	}
	if yyb3334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3334++
	if yyhl3334 {
		yyb3334 = yyj3334 > l
	} else {
		yyb3334 = r.CheckBreak()
	}
	if yyb3334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3334++
		if yyhl3334 {
			yyb3334 = yyj3334 > l
		} else {
			yyb3334 = r.CheckBreak()
		}
		if yyb3334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3337 := z.EncBinary()
		_ = yym3337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3338 := !z.EncBinary()
			yy2arr3338 := z.EncBasicHandle().StructToArray
			var yyq3338 [1]bool
			_, _, _ = yysep3338, yyq3338, yy2arr3338
			const yyr3338 bool = false
			yyq3338[0] = len(x.Capacity) != 0
			var yynn3338 int
			if yyr3338 || yy2arr3338 {
				r.EncodeArrayStart(1)
			} else {
				yynn3338 = 0
				for _, b := range yyq3338 {
					if b {
						yynn3338++
					}
				}
				r.EncodeMapStart(yynn3338)
				yynn3338 = 0
			}
			if yyr3338 || yy2arr3338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3338[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3338 || yy2arr3338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3340 := z.DecBinary()
	_ = yym3340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3341 := r.ContainerType()
		if yyct3341 == codecSelferValueTypeMap1234 {
			yyl3341 := r.ReadMapStart()
			if yyl3341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3341, d)
			}
		} else if yyct3341 == codecSelferValueTypeArray1234 {
			yyl3341 := r.ReadArrayStart()
			if yyl3341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3342Slc
	var yyhl3342 bool = l >= 0
	for yyj3342 := 0; ; yyj3342++ {
		if yyhl3342 {
			if yyj3342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3342Slc = r.DecodeBytes(yys3342Slc, true, true)
		yys3342 := string(yys3342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3342 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3343 := &x.Capacity
				yyv3343.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3342)
		} // end switch yys3342
	} // end for yyj3342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3344 int
	var yyb3344 bool
	var yyhl3344 bool = l >= 0
	yyj3344++
	if yyhl3344 {
		yyb3344 = yyj3344 > l
	} else {
		yyb3344 = r.CheckBreak()
	}
	if yyb3344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3345 := &x.Capacity
		yyv3345.CodecDecodeSelf(d)
	}
	for {
		yyj3344++
		if yyhl3344 {
			yyb3344 = yyj3344 > l
		} else {
			yyb3344 = r.CheckBreak()
		}
		if yyb3344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3346 := z.EncBinary()
	_ = yym3346
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3347 := z.DecBinary()
	_ = yym3347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3348 := z.EncBinary()
		_ = yym3348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3349 := z.DecBinary()
	_ = yym3349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3350 := z.EncBinary()
		_ = yym3350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3351 := !z.EncBinary()
			yy2arr3351 := z.EncBasicHandle().StructToArray
			var yyq3351 [5]bool
			_, _, _ = yysep3351, yyq3351, yy2arr3351
			const yyr3351 bool = false
			yyq3351[0] = x.Kind != ""
			yyq3351[1] = x.APIVersion != ""
			yyq3351[2] = true
			yyq3351[3] = true
			yyq3351[4] = true
			var yynn3351 int
			if yyr3351 || yy2arr3351 {
				r.EncodeArrayStart(5)
			} else {
				yynn3351 = 0
				for _, b := range yyq3351 {
					if b {
						yynn3351++
					}
				}
				r.EncodeMapStart(yynn3351)
				yynn3351 = 0
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3351[0] {
					yym3353 := z.EncBinary()
					_ = yym3353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3354 := z.EncBinary()
					_ = yym3354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3351[1] {
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3351[2] {
					yy3359 := &x.ObjectMeta
					yy3359.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3360 := &x.ObjectMeta
					yy3360.CodecEncodeSelf(e)
				}
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3351[3] {
					yy3362 := &x.Spec
					yy3362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3363 := &x.Spec
					yy3363.CodecEncodeSelf(e)
				}
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3351[4] {
					yy3365 := &x.Status
					yy3365.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3366 := &x.Status
					yy3366.CodecEncodeSelf(e)
				}
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3367 := z.DecBinary()
	_ = yym3367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3368 := r.ContainerType()
		if yyct3368 == codecSelferValueTypeMap1234 {
			yyl3368 := r.ReadMapStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3368, d)
			}
		} else if yyct3368 == codecSelferValueTypeArray1234 {
			yyl3368 := r.ReadArrayStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3369Slc
	var yyhl3369 bool = l >= 0
	for yyj3369 := 0; ; yyj3369++ {
		if yyhl3369 {
			if yyj3369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3369Slc = r.DecodeBytes(yys3369Slc, true, true)
		yys3369 := string(yys3369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3372 := &x.ObjectMeta
				yyv3372.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3373 := &x.Spec
				yyv3373.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3374 := &x.Status
				yyv3374.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3369)
		} // end switch yys3369
	} // end for yyj3369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3375 int
	var yyb3375 bool
	var yyhl3375 bool = l >= 0
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3378 := &x.ObjectMeta
		yyv3378.CodecDecodeSelf(d)
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3379 := &x.Spec
		yyv3379.CodecDecodeSelf(d)
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3380 := &x.Status
		yyv3380.CodecDecodeSelf(d)
	}
	for {
		yyj3375++
		if yyhl3375 {
			yyb3375 = yyj3375 > l
		} else {
			yyb3375 = r.CheckBreak()
		}
		if yyb3375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3381 := z.EncBinary()
		_ = yym3381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3382 := !z.EncBinary()
			yy2arr3382 := z.EncBasicHandle().StructToArray
			var yyq3382 [4]bool
			_, _, _ = yysep3382, yyq3382, yy2arr3382
			const yyr3382 bool = false
			yyq3382[0] = x.Kind != ""
			yyq3382[1] = x.APIVersion != ""
			yyq3382[2] = true
			var yynn3382 int
			if yyr3382 || yy2arr3382 {
				r.EncodeArrayStart(4)
			} else {
				yynn3382 = 1
				for _, b := range yyq3382 {
					if b {
						yynn3382++
					}
				}
				r.EncodeMapStart(yynn3382)
				yynn3382 = 0
			}
			if yyr3382 || yy2arr3382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3382[0] {
					yym3384 := z.EncBinary()
					_ = yym3384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3382[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3385 := z.EncBinary()
					_ = yym3385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3382 || yy2arr3382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3382[1] {
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3382[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3388 := z.EncBinary()
					_ = yym3388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3382 || yy2arr3382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3382[2] {
					yy3390 := &x.ListMeta
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3390) {
					} else {
						z.EncFallback(yy3390)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3382[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3392 := &x.ListMeta
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3392) {
					} else {
						z.EncFallback(yy3392)
					}
				}
			}
			if yyr3382 || yy2arr3382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3382 || yy2arr3382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3397 := z.DecBinary()
	_ = yym3397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3398 := r.ContainerType()
		if yyct3398 == codecSelferValueTypeMap1234 {
			yyl3398 := r.ReadMapStart()
			if yyl3398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3398, d)
			}
		} else if yyct3398 == codecSelferValueTypeArray1234 {
			yyl3398 := r.ReadArrayStart()
			if yyl3398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3399Slc
	var yyhl3399 bool = l >= 0
	for yyj3399 := 0; ; yyj3399++ {
		if yyhl3399 {
			if yyj3399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3399Slc = r.DecodeBytes(yys3399Slc, true, true)
		yys3399 := string(yys3399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3399 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3402 := &x.ListMeta
				yym3403 := z.DecBinary()
				_ = yym3403
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3402) {
				} else {
					z.DecFallback(yyv3402, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3404 := &x.Items
				yym3405 := z.DecBinary()
				_ = yym3405
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3404), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3399)
		} // end switch yys3399
	} // end for yyj3399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3406 int
	var yyb3406 bool
	var yyhl3406 bool = l >= 0
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3409 := &x.ListMeta
		yym3410 := z.DecBinary()
		_ = yym3410
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3409) {
		} else {
			z.DecFallback(yyv3409, false)
		}
	}
	yyj3406++
	if yyhl3406 {
		yyb3406 = yyj3406 > l
	} else {
		yyb3406 = r.CheckBreak()
	}
	if yyb3406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3411 := &x.Items
		yym3412 := z.DecBinary()
		_ = yym3412
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3411), d)
		}
	}
	for {
		yyj3406++
		if yyhl3406 {
			yyb3406 = yyj3406 > l
		} else {
			yyb3406 = r.CheckBreak()
		}
		if yyb3406 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3406-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3413 := z.EncBinary()
		_ = yym3413
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3414 := !z.EncBinary()
			yy2arr3414 := z.EncBasicHandle().StructToArray
			var yyq3414 [1]bool
			_, _, _ = yysep3414, yyq3414, yy2arr3414
			const yyr3414 bool = false
			var yynn3414 int
			if yyr3414 || yy2arr3414 {
				r.EncodeArrayStart(1)
			} else {
				yynn3414 = 1
				for _, b := range yyq3414 {
					if b {
						yynn3414++
					}
				}
				r.EncodeMapStart(yynn3414)
				yynn3414 = 0
			}
			if yyr3414 || yy2arr3414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3414 || yy2arr3414 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3418 := z.DecBinary()
	_ = yym3418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3419 := r.ContainerType()
		if yyct3419 == codecSelferValueTypeMap1234 {
			yyl3419 := r.ReadMapStart()
			if yyl3419 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3419, d)
			}
		} else if yyct3419 == codecSelferValueTypeArray1234 {
			yyl3419 := r.ReadArrayStart()
			if yyl3419 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3419, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3420Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3420Slc
	var yyhl3420 bool = l >= 0
	for yyj3420 := 0; ; yyj3420++ {
		if yyhl3420 {
			if yyj3420 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3420Slc = r.DecodeBytes(yys3420Slc, true, true)
		yys3420 := string(yys3420Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3420 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3421 := &x.Finalizers
				yym3422 := z.DecBinary()
				_ = yym3422
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3421), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3420)
		} // end switch yys3420
	} // end for yyj3420
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3423 int
	var yyb3423 bool
	var yyhl3423 bool = l >= 0
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3424 := &x.Finalizers
		yym3425 := z.DecBinary()
		_ = yym3425
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3424), d)
		}
	}
	for {
		yyj3423++
		if yyhl3423 {
			yyb3423 = yyj3423 > l
		} else {
			yyb3423 = r.CheckBreak()
		}
		if yyb3423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3426 := z.EncBinary()
	_ = yym3426
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3427 := z.DecBinary()
	_ = yym3427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3428 := z.EncBinary()
		_ = yym3428
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3429 := !z.EncBinary()
			yy2arr3429 := z.EncBasicHandle().StructToArray
			var yyq3429 [1]bool
			_, _, _ = yysep3429, yyq3429, yy2arr3429
			const yyr3429 bool = false
			yyq3429[0] = x.Phase != ""
			var yynn3429 int
			if yyr3429 || yy2arr3429 {
				r.EncodeArrayStart(1)
			} else {
				yynn3429 = 0
				for _, b := range yyq3429 {
					if b {
						yynn3429++
					}
				}
				r.EncodeMapStart(yynn3429)
				yynn3429 = 0
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3431 := z.DecBinary()
	_ = yym3431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3432 := r.ContainerType()
		if yyct3432 == codecSelferValueTypeMap1234 {
			yyl3432 := r.ReadMapStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3432, d)
			}
		} else if yyct3432 == codecSelferValueTypeArray1234 {
			yyl3432 := r.ReadArrayStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3433Slc
	var yyhl3433 bool = l >= 0
	for yyj3433 := 0; ; yyj3433++ {
		if yyhl3433 {
			if yyj3433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3433Slc = r.DecodeBytes(yys3433Slc, true, true)
		yys3433 := string(yys3433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3433 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3433)
		} // end switch yys3433
	} // end for yyj3433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3435 int
	var yyb3435 bool
	var yyhl3435 bool = l >= 0
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3435++
		if yyhl3435 {
			yyb3435 = yyj3435 > l
		} else {
			yyb3435 = r.CheckBreak()
		}
		if yyb3435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3437 := z.EncBinary()
	_ = yym3437
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3438 := z.DecBinary()
	_ = yym3438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3439 := z.EncBinary()
		_ = yym3439
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3440 := !z.EncBinary()
			yy2arr3440 := z.EncBasicHandle().StructToArray
			var yyq3440 [5]bool
			_, _, _ = yysep3440, yyq3440, yy2arr3440
			const yyr3440 bool = false
			yyq3440[0] = x.Kind != ""
			yyq3440[1] = x.APIVersion != ""
			yyq3440[2] = true
			yyq3440[3] = true
			yyq3440[4] = true
			var yynn3440 int
			if yyr3440 || yy2arr3440 {
				r.EncodeArrayStart(5)
			} else {
				yynn3440 = 0
				for _, b := range yyq3440 {
					if b {
						yynn3440++
					}
				}
				r.EncodeMapStart(yynn3440)
				yynn3440 = 0
			}
			if yyr3440 || yy2arr3440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3440[0] {
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3440[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3440 || yy2arr3440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3440[1] {
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3440[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3440 || yy2arr3440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3440[2] {
					yy3448 := &x.ObjectMeta
					yy3448.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3440[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3449 := &x.ObjectMeta
					yy3449.CodecEncodeSelf(e)
				}
			}
			if yyr3440 || yy2arr3440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3440[3] {
					yy3451 := &x.Spec
					yy3451.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3440[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3452 := &x.Spec
					yy3452.CodecEncodeSelf(e)
				}
			}
			if yyr3440 || yy2arr3440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3440[4] {
					yy3454 := &x.Status
					yy3454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3440[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3455 := &x.Status
					yy3455.CodecEncodeSelf(e)
				}
			}
			if yyr3440 || yy2arr3440 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3456 := z.DecBinary()
	_ = yym3456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3457 := r.ContainerType()
		if yyct3457 == codecSelferValueTypeMap1234 {
			yyl3457 := r.ReadMapStart()
			if yyl3457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3457, d)
			}
		} else if yyct3457 == codecSelferValueTypeArray1234 {
			yyl3457 := r.ReadArrayStart()
			if yyl3457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3458Slc
	var yyhl3458 bool = l >= 0
	for yyj3458 := 0; ; yyj3458++ {
		if yyhl3458 {
			if yyj3458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3458Slc = r.DecodeBytes(yys3458Slc, true, true)
		yys3458 := string(yys3458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3458 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3461 := &x.ObjectMeta
				yyv3461.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3462 := &x.Spec
				yyv3462.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3463 := &x.Status
				yyv3463.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3458)
		} // end switch yys3458
	} // end for yyj3458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3464 int
	var yyb3464 bool
	var yyhl3464 bool = l >= 0
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3467 := &x.ObjectMeta
		yyv3467.CodecDecodeSelf(d)
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3468 := &x.Spec
		yyv3468.CodecDecodeSelf(d)
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3469 := &x.Status
		yyv3469.CodecDecodeSelf(d)
	}
	for {
		yyj3464++
		if yyhl3464 {
			yyb3464 = yyj3464 > l
		} else {
			yyb3464 = r.CheckBreak()
		}
		if yyb3464 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3464-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3470 := z.EncBinary()
		_ = yym3470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3471 := !z.EncBinary()
			yy2arr3471 := z.EncBasicHandle().StructToArray
			var yyq3471 [4]bool
			_, _, _ = yysep3471, yyq3471, yy2arr3471
			const yyr3471 bool = false
			yyq3471[0] = x.Kind != ""
			yyq3471[1] = x.APIVersion != ""
			yyq3471[2] = true
			var yynn3471 int
			if yyr3471 || yy2arr3471 {
				r.EncodeArrayStart(4)
			} else {
				yynn3471 = 1
				for _, b := range yyq3471 {
					if b {
						yynn3471++
					}
				}
				r.EncodeMapStart(yynn3471)
				yynn3471 = 0
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[0] {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3471[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[1] {
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3471[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[2] {
					yy3479 := &x.ListMeta
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3479) {
					} else {
						z.EncFallback(yy3479)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3471[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3481 := &x.ListMeta
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3481) {
					} else {
						z.EncFallback(yy3481)
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3485 := z.EncBinary()
					_ = yym3485
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3486 := z.DecBinary()
	_ = yym3486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3487 := r.ContainerType()
		if yyct3487 == codecSelferValueTypeMap1234 {
			yyl3487 := r.ReadMapStart()
			if yyl3487 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3487, d)
			}
		} else if yyct3487 == codecSelferValueTypeArray1234 {
			yyl3487 := r.ReadArrayStart()
			if yyl3487 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3488Slc
	var yyhl3488 bool = l >= 0
	for yyj3488 := 0; ; yyj3488++ {
		if yyhl3488 {
			if yyj3488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3488Slc = r.DecodeBytes(yys3488Slc, true, true)
		yys3488 := string(yys3488Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3488 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3491 := &x.ListMeta
				yym3492 := z.DecBinary()
				_ = yym3492
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3491) {
				} else {
					z.DecFallback(yyv3491, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3493 := &x.Items
				yym3494 := z.DecBinary()
				_ = yym3494
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3493), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3488)
		} // end switch yys3488
	} // end for yyj3488
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3495 int
	var yyb3495 bool
	var yyhl3495 bool = l >= 0
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3498 := &x.ListMeta
		yym3499 := z.DecBinary()
		_ = yym3499
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3498) {
		} else {
			z.DecFallback(yyv3498, false)
		}
	}
	yyj3495++
	if yyhl3495 {
		yyb3495 = yyj3495 > l
	} else {
		yyb3495 = r.CheckBreak()
	}
	if yyb3495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3500 := &x.Items
		yym3501 := z.DecBinary()
		_ = yym3501
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3500), d)
		}
	}
	for {
		yyj3495++
		if yyhl3495 {
			yyb3495 = yyj3495 > l
		} else {
			yyb3495 = r.CheckBreak()
		}
		if yyb3495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3502 := z.EncBinary()
		_ = yym3502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3503 := !z.EncBinary()
			yy2arr3503 := z.EncBasicHandle().StructToArray
			var yyq3503 [4]bool
			_, _, _ = yysep3503, yyq3503, yy2arr3503
			const yyr3503 bool = false
			yyq3503[0] = x.Kind != ""
			yyq3503[1] = x.APIVersion != ""
			yyq3503[2] = true
			var yynn3503 int
			if yyr3503 || yy2arr3503 {
				r.EncodeArrayStart(4)
			} else {
				yynn3503 = 1
				for _, b := range yyq3503 {
					if b {
						yynn3503++
					}
				}
				r.EncodeMapStart(yynn3503)
				yynn3503 = 0
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[0] {
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[1] {
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[2] {
					yy3511 := &x.ObjectMeta
					yy3511.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3503[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3512 := &x.ObjectMeta
					yy3512.CodecEncodeSelf(e)
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3514 := &x.Target
				yy3514.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3515 := &x.Target
				yy3515.CodecEncodeSelf(e)
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3516 := z.DecBinary()
	_ = yym3516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3517 := r.ContainerType()
		if yyct3517 == codecSelferValueTypeMap1234 {
			yyl3517 := r.ReadMapStart()
			if yyl3517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3517, d)
			}
		} else if yyct3517 == codecSelferValueTypeArray1234 {
			yyl3517 := r.ReadArrayStart()
			if yyl3517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3518Slc
	var yyhl3518 bool = l >= 0
	for yyj3518 := 0; ; yyj3518++ {
		if yyhl3518 {
			if yyj3518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3518Slc = r.DecodeBytes(yys3518Slc, true, true)
		yys3518 := string(yys3518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3518 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3521 := &x.ObjectMeta
				yyv3521.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3522 := &x.Target
				yyv3522.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3518)
		} // end switch yys3518
	} // end for yyj3518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3523 int
	var yyb3523 bool
	var yyhl3523 bool = l >= 0
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3526 := &x.ObjectMeta
		yyv3526.CodecDecodeSelf(d)
	}
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3527 := &x.Target
		yyv3527.CodecDecodeSelf(d)
	}
	for {
		yyj3523++
		if yyhl3523 {
			yyb3523 = yyj3523 > l
		} else {
			yyb3523 = r.CheckBreak()
		}
		if yyb3523 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3523-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3528 := z.EncBinary()
		_ = yym3528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3529 := !z.EncBinary()
			yy2arr3529 := z.EncBasicHandle().StructToArray
			var yyq3529 [1]bool
			_, _, _ = yysep3529, yyq3529, yy2arr3529
			const yyr3529 bool = false
			yyq3529[0] = x.UID != nil
			var yynn3529 int
			if yyr3529 || yy2arr3529 {
				r.EncodeArrayStart(1)
			} else {
				yynn3529 = 0
				for _, b := range yyq3529 {
					if b {
						yynn3529++
					}
				}
				r.EncodeMapStart(yynn3529)
				yynn3529 = 0
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3529[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3531 := *x.UID
						yym3532 := z.EncBinary()
						_ = yym3532
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3531) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3531))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3533 := *x.UID
						yym3534 := z.EncBinary()
						_ = yym3534
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3533) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3533))
						}
					}
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3535 := z.DecBinary()
	_ = yym3535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3536 := r.ContainerType()
		if yyct3536 == codecSelferValueTypeMap1234 {
			yyl3536 := r.ReadMapStart()
			if yyl3536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3536, d)
			}
		} else if yyct3536 == codecSelferValueTypeArray1234 {
			yyl3536 := r.ReadArrayStart()
			if yyl3536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3537Slc
	var yyhl3537 bool = l >= 0
	for yyj3537 := 0; ; yyj3537++ {
		if yyhl3537 {
			if yyj3537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3537Slc = r.DecodeBytes(yys3537Slc, true, true)
		yys3537 := string(yys3537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3537 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3539 := z.DecBinary()
				_ = yym3539
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3537)
		} // end switch yys3537
	} // end for yyj3537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3540 int
	var yyb3540 bool
	var yyhl3540 bool = l >= 0
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3542 := z.DecBinary()
		_ = yym3542
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3540++
		if yyhl3540 {
			yyb3540 = yyj3540 > l
		} else {
			yyb3540 = r.CheckBreak()
		}
		if yyb3540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3543 := z.EncBinary()
		_ = yym3543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3544 := !z.EncBinary()
			yy2arr3544 := z.EncBasicHandle().StructToArray
			var yyq3544 [5]bool
			_, _, _ = yysep3544, yyq3544, yy2arr3544
			const yyr3544 bool = false
			yyq3544[0] = x.Kind != ""
			yyq3544[1] = x.APIVersion != ""
			yyq3544[2] = x.GracePeriodSeconds != nil
			yyq3544[3] = x.Preconditions != nil
			yyq3544[4] = x.OrphanDependents != nil
			var yynn3544 int
			if yyr3544 || yy2arr3544 {
				r.EncodeArrayStart(5)
			} else {
				yynn3544 = 0
				for _, b := range yyq3544 {
					if b {
						yynn3544++
					}
				}
				r.EncodeMapStart(yynn3544)
				yynn3544 = 0
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[0] {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[1] {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3552 := *x.GracePeriodSeconds
						yym3553 := z.EncBinary()
						_ = yym3553
						if false {
						} else {
							r.EncodeInt(int64(yy3552))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3554 := *x.GracePeriodSeconds
						yym3555 := z.EncBinary()
						_ = yym3555
						if false {
						} else {
							r.EncodeInt(int64(yy3554))
						}
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3558 := *x.OrphanDependents
						yym3559 := z.EncBinary()
						_ = yym3559
						if false {
						} else {
							r.EncodeBool(bool(yy3558))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3560 := *x.OrphanDependents
						yym3561 := z.EncBinary()
						_ = yym3561
						if false {
						} else {
							r.EncodeBool(bool(yy3560))
						}
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3562 := z.DecBinary()
	_ = yym3562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3563 := r.ContainerType()
		if yyct3563 == codecSelferValueTypeMap1234 {
			yyl3563 := r.ReadMapStart()
			if yyl3563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3563, d)
			}
		} else if yyct3563 == codecSelferValueTypeArray1234 {
			yyl3563 := r.ReadArrayStart()
			if yyl3563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3564Slc
	var yyhl3564 bool = l >= 0
	for yyj3564 := 0; ; yyj3564++ {
		if yyhl3564 {
			if yyj3564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3564Slc = r.DecodeBytes(yys3564Slc, true, true)
		yys3564 := string(yys3564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3564 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3568 := z.DecBinary()
				_ = yym3568
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3571 := z.DecBinary()
				_ = yym3571
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3564)
		} // end switch yys3564
	} // end for yyj3564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3572 int
	var yyb3572 bool
	var yyhl3572 bool = l >= 0
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3576 := z.DecBinary()
		_ = yym3576
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3572++
	if yyhl3572 {
		yyb3572 = yyj3572 > l
	} else {
		yyb3572 = r.CheckBreak()
	}
	if yyb3572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3579 := z.DecBinary()
		_ = yym3579
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3572++
		if yyhl3572 {
			yyb3572 = yyj3572 > l
		} else {
			yyb3572 = r.CheckBreak()
		}
		if yyb3572 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3572-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3580 := z.EncBinary()
		_ = yym3580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3581 := !z.EncBinary()
			yy2arr3581 := z.EncBasicHandle().StructToArray
			var yyq3581 [4]bool
			_, _, _ = yysep3581, yyq3581, yy2arr3581
			const yyr3581 bool = false
			yyq3581[0] = x.Kind != ""
			yyq3581[1] = x.APIVersion != ""
			var yynn3581 int
			if yyr3581 || yy2arr3581 {
				r.EncodeArrayStart(4)
			} else {
				yynn3581 = 2
				for _, b := range yyq3581 {
					if b {
						yynn3581++
					}
				}
				r.EncodeMapStart(yynn3581)
				yynn3581 = 0
			}
			if yyr3581 || yy2arr3581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3581[0] {
					yym3583 := z.EncBinary()
					_ = yym3583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3581[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3581 || yy2arr3581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3581[1] {
					yym3586 := z.EncBinary()
					_ = yym3586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3581[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3587 := z.EncBinary()
					_ = yym3587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3581 || yy2arr3581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3589 := z.EncBinary()
				_ = yym3589
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3590 := z.EncBinary()
				_ = yym3590
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3581 || yy2arr3581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3592 := z.EncBinary()
				_ = yym3592
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3593 := z.EncBinary()
				_ = yym3593
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3581 || yy2arr3581 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3594 := z.DecBinary()
	_ = yym3594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3595 := r.ContainerType()
		if yyct3595 == codecSelferValueTypeMap1234 {
			yyl3595 := r.ReadMapStart()
			if yyl3595 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3595, d)
			}
		} else if yyct3595 == codecSelferValueTypeArray1234 {
			yyl3595 := r.ReadArrayStart()
			if yyl3595 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3595, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3596Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3596Slc
	var yyhl3596 bool = l >= 0
	for yyj3596 := 0; ; yyj3596++ {
		if yyhl3596 {
			if yyj3596 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3596Slc = r.DecodeBytes(yys3596Slc, true, true)
		yys3596 := string(yys3596Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3596 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3596)
		} // end switch yys3596
	} // end for yyj3596
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3601 int
	var yyb3601 bool
	var yyhl3601 bool = l >= 0
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3601++
		if yyhl3601 {
			yyb3601 = yyj3601 > l
		} else {
			yyb3601 = r.CheckBreak()
		}
		if yyb3601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3606 := z.EncBinary()
		_ = yym3606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3607 := !z.EncBinary()
			yy2arr3607 := z.EncBasicHandle().StructToArray
			var yyq3607 [7]bool
			_, _, _ = yysep3607, yyq3607, yy2arr3607
			const yyr3607 bool = false
			yyq3607[0] = x.Kind != ""
			yyq3607[1] = x.APIVersion != ""
			var yynn3607 int
			if yyr3607 || yy2arr3607 {
				r.EncodeArrayStart(7)
			} else {
				yynn3607 = 5
				for _, b := range yyq3607 {
					if b {
						yynn3607++
					}
				}
				r.EncodeMapStart(yynn3607)
				yynn3607 = 0
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3607[0] {
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3607[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3610 := z.EncBinary()
					_ = yym3610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3607[1] {
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3607[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3613 := z.EncBinary()
					_ = yym3613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3615 := z.EncBinary()
					_ = yym3615
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3616 := z.EncBinary()
					_ = yym3616
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3619 := z.EncBinary()
					_ = yym3619
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3621 := z.EncBinary()
				_ = yym3621
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3622 := z.EncBinary()
				_ = yym3622
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3624 := z.EncBinary()
				_ = yym3624
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3625 := z.EncBinary()
				_ = yym3625
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3627 := *x.TimeoutSeconds
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeInt(int64(yy3627))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3629 := *x.TimeoutSeconds
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeInt(int64(yy3629))
					}
				}
			}
			if yyr3607 || yy2arr3607 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3631 := z.DecBinary()
	_ = yym3631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3632 := r.ContainerType()
		if yyct3632 == codecSelferValueTypeMap1234 {
			yyl3632 := r.ReadMapStart()
			if yyl3632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3632, d)
			}
		} else if yyct3632 == codecSelferValueTypeArray1234 {
			yyl3632 := r.ReadArrayStart()
			if yyl3632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3633Slc
	var yyhl3633 bool = l >= 0
	for yyj3633 := 0; ; yyj3633++ {
		if yyhl3633 {
			if yyj3633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3633Slc = r.DecodeBytes(yys3633Slc, true, true)
		yys3633 := string(yys3633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3633 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3636 := &x.LabelSelector
				yym3637 := z.DecBinary()
				_ = yym3637
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3636) {
				} else {
					z.DecFallback(yyv3636, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3638 := &x.FieldSelector
				yym3639 := z.DecBinary()
				_ = yym3639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3638) {
				} else {
					z.DecFallback(yyv3638, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3643 := z.DecBinary()
				_ = yym3643
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3633)
		} // end switch yys3633
	} // end for yyj3633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3644 int
	var yyb3644 bool
	var yyhl3644 bool = l >= 0
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3647 := &x.LabelSelector
		yym3648 := z.DecBinary()
		_ = yym3648
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3647) {
		} else {
			z.DecFallback(yyv3647, true)
		}
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3649 := &x.FieldSelector
		yym3650 := z.DecBinary()
		_ = yym3650
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3649) {
		} else {
			z.DecFallback(yyv3649, true)
		}
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3654 := z.DecBinary()
		_ = yym3654
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3644++
		if yyhl3644 {
			yyb3644 = yyj3644 > l
		} else {
			yyb3644 = r.CheckBreak()
		}
		if yyb3644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3655 := z.EncBinary()
		_ = yym3655
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3656 := !z.EncBinary()
			yy2arr3656 := z.EncBasicHandle().StructToArray
			var yyq3656 [10]bool
			_, _, _ = yysep3656, yyq3656, yy2arr3656
			const yyr3656 bool = false
			yyq3656[0] = x.Kind != ""
			yyq3656[1] = x.APIVersion != ""
			var yynn3656 int
			if yyr3656 || yy2arr3656 {
				r.EncodeArrayStart(10)
			} else {
				yynn3656 = 8
				for _, b := range yyq3656 {
					if b {
						yynn3656++
					}
				}
				r.EncodeMapStart(yynn3656)
				yynn3656 = 0
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3656[0] {
					yym3658 := z.EncBinary()
					_ = yym3658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3656[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3656[1] {
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3656[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3664 := z.EncBinary()
				_ = yym3664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3665 := z.EncBinary()
				_ = yym3665
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3667 := z.EncBinary()
				_ = yym3667
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3668 := z.EncBinary()
				_ = yym3668
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3670 := z.EncBinary()
				_ = yym3670
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3671 := z.EncBinary()
				_ = yym3671
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3673 := *x.SinceSeconds
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeInt(int64(yy3673))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3675 := *x.SinceSeconds
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeInt(int64(yy3675))
					}
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3678 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3678 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3679 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3679 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3681 := z.EncBinary()
				_ = yym3681
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3682 := z.EncBinary()
				_ = yym3682
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3684 := *x.TailLines
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeInt(int64(yy3684))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3686 := *x.TailLines
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						r.EncodeInt(int64(yy3686))
					}
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3689 := *x.LimitBytes
					yym3690 := z.EncBinary()
					_ = yym3690
					if false {
					} else {
						r.EncodeInt(int64(yy3689))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3691 := *x.LimitBytes
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeInt(int64(yy3691))
					}
				}
			}
			if yyr3656 || yy2arr3656 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3693 := z.DecBinary()
	_ = yym3693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3694 := r.ContainerType()
		if yyct3694 == codecSelferValueTypeMap1234 {
			yyl3694 := r.ReadMapStart()
			if yyl3694 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3694, d)
			}
		} else if yyct3694 == codecSelferValueTypeArray1234 {
			yyl3694 := r.ReadArrayStart()
			if yyl3694 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3695Slc
	var yyhl3695 bool = l >= 0
	for yyj3695 := 0; ; yyj3695++ {
		if yyhl3695 {
			if yyj3695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3695Slc = r.DecodeBytes(yys3695Slc, true, true)
		yys3695 := string(yys3695Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3695 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3702 := z.DecBinary()
				_ = yym3702
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3704 := z.DecBinary()
				_ = yym3704
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3704 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3704 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3707 := z.DecBinary()
				_ = yym3707
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3709 := z.DecBinary()
				_ = yym3709
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3695)
		} // end switch yys3695
	} // end for yyj3695
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3710 int
	var yyb3710 bool
	var yyhl3710 bool = l >= 0
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3717 := z.DecBinary()
		_ = yym3717
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3719 := z.DecBinary()
		_ = yym3719
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3719 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3719 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3722 := z.DecBinary()
		_ = yym3722
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3710++
	if yyhl3710 {
		yyb3710 = yyj3710 > l
	} else {
		yyb3710 = r.CheckBreak()
	}
	if yyb3710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3724 := z.DecBinary()
		_ = yym3724
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3710++
		if yyhl3710 {
			yyb3710 = yyj3710 > l
		} else {
			yyb3710 = r.CheckBreak()
		}
		if yyb3710 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3710-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3725 := z.EncBinary()
		_ = yym3725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3726 := !z.EncBinary()
			yy2arr3726 := z.EncBasicHandle().StructToArray
			var yyq3726 [7]bool
			_, _, _ = yysep3726, yyq3726, yy2arr3726
			const yyr3726 bool = false
			yyq3726[0] = x.Kind != ""
			yyq3726[1] = x.APIVersion != ""
			yyq3726[2] = x.Stdin != false
			yyq3726[3] = x.Stdout != false
			yyq3726[4] = x.Stderr != false
			yyq3726[5] = x.TTY != false
			yyq3726[6] = x.Container != ""
			var yynn3726 int
			if yyr3726 || yy2arr3726 {
				r.EncodeArrayStart(7)
			} else {
				yynn3726 = 0
				for _, b := range yyq3726 {
					if b {
						yynn3726++
					}
				}
				r.EncodeMapStart(yynn3726)
				yynn3726 = 0
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3726[0] {
					yym3728 := z.EncBinary()
					_ = yym3728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3726[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3726[1] {
					yym3731 := z.EncBinary()
					_ = yym3731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3726[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3732 := z.EncBinary()
					_ = yym3732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3726[2] {
					yym3734 := z.EncBinary()
					_ = yym3734
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3726[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3735 := z.EncBinary()
					_ = yym3735
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3726[3] {
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3726[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3738 := z.EncBinary()
					_ = yym3738
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3726[4] {
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3726[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3741 := z.EncBinary()
					_ = yym3741
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3726[5] {
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3726[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3744 := z.EncBinary()
					_ = yym3744
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3726[6] {
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3726[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3747 := z.EncBinary()
					_ = yym3747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3726 || yy2arr3726 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3748 := z.DecBinary()
	_ = yym3748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3749 := r.ContainerType()
		if yyct3749 == codecSelferValueTypeMap1234 {
			yyl3749 := r.ReadMapStart()
			if yyl3749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3749, d)
			}
		} else if yyct3749 == codecSelferValueTypeArray1234 {
			yyl3749 := r.ReadArrayStart()
			if yyl3749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3750Slc
	var yyhl3750 bool = l >= 0
	for yyj3750 := 0; ; yyj3750++ {
		if yyhl3750 {
			if yyj3750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3750Slc = r.DecodeBytes(yys3750Slc, true, true)
		yys3750 := string(yys3750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3750 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3750)
		} // end switch yys3750
	} // end for yyj3750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3758 int
	var yyb3758 bool
	var yyhl3758 bool = l >= 0
	yyj3758++
	if yyhl3758 {
		yyb3758 = yyj3758 > l
	} else {
		yyb3758 = r.CheckBreak()
	}
	if yyb3758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3758++
	if yyhl3758 {
		yyb3758 = yyj3758 > l
	} else {
		yyb3758 = r.CheckBreak()
	}
	if yyb3758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3758++
	if yyhl3758 {
		yyb3758 = yyj3758 > l
	} else {
		yyb3758 = r.CheckBreak()
	}
	if yyb3758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3758++
	if yyhl3758 {
		yyb3758 = yyj3758 > l
	} else {
		yyb3758 = r.CheckBreak()
	}
	if yyb3758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3758++
	if yyhl3758 {
		yyb3758 = yyj3758 > l
	} else {
		yyb3758 = r.CheckBreak()
	}
	if yyb3758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3758++
	if yyhl3758 {
		yyb3758 = yyj3758 > l
	} else {
		yyb3758 = r.CheckBreak()
	}
	if yyb3758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3758++
	if yyhl3758 {
		yyb3758 = yyj3758 > l
	} else {
		yyb3758 = r.CheckBreak()
	}
	if yyb3758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3758++
		if yyhl3758 {
			yyb3758 = yyj3758 > l
		} else {
			yyb3758 = r.CheckBreak()
		}
		if yyb3758 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3758-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3766 := z.EncBinary()
		_ = yym3766
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3767 := !z.EncBinary()
			yy2arr3767 := z.EncBasicHandle().StructToArray
			var yyq3767 [8]bool
			_, _, _ = yysep3767, yyq3767, yy2arr3767
			const yyr3767 bool = false
			yyq3767[0] = x.Kind != ""
			yyq3767[1] = x.APIVersion != ""
			var yynn3767 int
			if yyr3767 || yy2arr3767 {
				r.EncodeArrayStart(8)
			} else {
				yynn3767 = 6
				for _, b := range yyq3767 {
					if b {
						yynn3767++
					}
				}
				r.EncodeMapStart(yynn3767)
				yynn3767 = 0
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3767[0] {
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3767[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3770 := z.EncBinary()
					_ = yym3770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3767[1] {
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3767[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3773 := z.EncBinary()
					_ = yym3773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3775 := z.EncBinary()
				_ = yym3775
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3776 := z.EncBinary()
				_ = yym3776
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3778 := z.EncBinary()
				_ = yym3778
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3779 := z.EncBinary()
				_ = yym3779
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3781 := z.EncBinary()
				_ = yym3781
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3782 := z.EncBinary()
				_ = yym3782
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3784 := z.EncBinary()
				_ = yym3784
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3785 := z.EncBinary()
				_ = yym3785
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3787 := z.EncBinary()
				_ = yym3787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3788 := z.EncBinary()
				_ = yym3788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3790 := z.EncBinary()
					_ = yym3790
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3791 := z.EncBinary()
					_ = yym3791
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3767 || yy2arr3767 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3792 := z.DecBinary()
	_ = yym3792
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3793 := r.ContainerType()
		if yyct3793 == codecSelferValueTypeMap1234 {
			yyl3793 := r.ReadMapStart()
			if yyl3793 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3793, d)
			}
		} else if yyct3793 == codecSelferValueTypeArray1234 {
			yyl3793 := r.ReadArrayStart()
			if yyl3793 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3793, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3794Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3794Slc
	var yyhl3794 bool = l >= 0
	for yyj3794 := 0; ; yyj3794++ {
		if yyhl3794 {
			if yyj3794 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3794Slc = r.DecodeBytes(yys3794Slc, true, true)
		yys3794 := string(yys3794Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3794 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3802 := &x.Command
				yym3803 := z.DecBinary()
				_ = yym3803
				if false {
				} else {
					z.F.DecSliceStringX(yyv3802, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3794)
		} // end switch yys3794
	} // end for yyj3794
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3804 int
	var yyb3804 bool
	var yyhl3804 bool = l >= 0
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3804++
	if yyhl3804 {
		yyb3804 = yyj3804 > l
	} else {
		yyb3804 = r.CheckBreak()
	}
	if yyb3804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3812 := &x.Command
		yym3813 := z.DecBinary()
		_ = yym3813
		if false {
		} else {
			z.F.DecSliceStringX(yyv3812, false, d)
		}
	}
	for {
		yyj3804++
		if yyhl3804 {
			yyb3804 = yyj3804 > l
		} else {
			yyb3804 = r.CheckBreak()
		}
		if yyb3804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3814 := z.EncBinary()
		_ = yym3814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3815 := !z.EncBinary()
			yy2arr3815 := z.EncBasicHandle().StructToArray
			var yyq3815 [3]bool
			_, _, _ = yysep3815, yyq3815, yy2arr3815
			const yyr3815 bool = false
			yyq3815[0] = x.Kind != ""
			yyq3815[1] = x.APIVersion != ""
			var yynn3815 int
			if yyr3815 || yy2arr3815 {
				r.EncodeArrayStart(3)
			} else {
				yynn3815 = 1
				for _, b := range yyq3815 {
					if b {
						yynn3815++
					}
				}
				r.EncodeMapStart(yynn3815)
				yynn3815 = 0
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3815[0] {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3815[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3815[1] {
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3815[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3823 := z.EncBinary()
				_ = yym3823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3824 := z.EncBinary()
				_ = yym3824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3825 := z.DecBinary()
	_ = yym3825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3826 := r.ContainerType()
		if yyct3826 == codecSelferValueTypeMap1234 {
			yyl3826 := r.ReadMapStart()
			if yyl3826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3826, d)
			}
		} else if yyct3826 == codecSelferValueTypeArray1234 {
			yyl3826 := r.ReadArrayStart()
			if yyl3826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3827Slc
	var yyhl3827 bool = l >= 0
	for yyj3827 := 0; ; yyj3827++ {
		if yyhl3827 {
			if yyj3827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3827Slc = r.DecodeBytes(yys3827Slc, true, true)
		yys3827 := string(yys3827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3827 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3827)
		} // end switch yys3827
	} // end for yyj3827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3831 int
	var yyb3831 bool
	var yyhl3831 bool = l >= 0
	yyj3831++
	if yyhl3831 {
		yyb3831 = yyj3831 > l
	} else {
		yyb3831 = r.CheckBreak()
	}
	if yyb3831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3831++
	if yyhl3831 {
		yyb3831 = yyj3831 > l
	} else {
		yyb3831 = r.CheckBreak()
	}
	if yyb3831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3831++
	if yyhl3831 {
		yyb3831 = yyj3831 > l
	} else {
		yyb3831 = r.CheckBreak()
	}
	if yyb3831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3831++
		if yyhl3831 {
			yyb3831 = yyj3831 > l
		} else {
			yyb3831 = r.CheckBreak()
		}
		if yyb3831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3835 := z.EncBinary()
		_ = yym3835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3836 := !z.EncBinary()
			yy2arr3836 := z.EncBasicHandle().StructToArray
			var yyq3836 [3]bool
			_, _, _ = yysep3836, yyq3836, yy2arr3836
			const yyr3836 bool = false
			yyq3836[0] = x.Kind != ""
			yyq3836[1] = x.APIVersion != ""
			var yynn3836 int
			if yyr3836 || yy2arr3836 {
				r.EncodeArrayStart(3)
			} else {
				yynn3836 = 1
				for _, b := range yyq3836 {
					if b {
						yynn3836++
					}
				}
				r.EncodeMapStart(yynn3836)
				yynn3836 = 0
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[0] {
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3836[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3839 := z.EncBinary()
					_ = yym3839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3836[1] {
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3836[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3844 := z.EncBinary()
				_ = yym3844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3845 := z.EncBinary()
				_ = yym3845
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3836 || yy2arr3836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3846 := z.DecBinary()
	_ = yym3846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3847 := r.ContainerType()
		if yyct3847 == codecSelferValueTypeMap1234 {
			yyl3847 := r.ReadMapStart()
			if yyl3847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3847, d)
			}
		} else if yyct3847 == codecSelferValueTypeArray1234 {
			yyl3847 := r.ReadArrayStart()
			if yyl3847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3848Slc
	var yyhl3848 bool = l >= 0
	for yyj3848 := 0; ; yyj3848++ {
		if yyhl3848 {
			if yyj3848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3848Slc = r.DecodeBytes(yys3848Slc, true, true)
		yys3848 := string(yys3848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3848 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3848)
		} // end switch yys3848
	} // end for yyj3848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3852 int
	var yyb3852 bool
	var yyhl3852 bool = l >= 0
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3852++
	if yyhl3852 {
		yyb3852 = yyj3852 > l
	} else {
		yyb3852 = r.CheckBreak()
	}
	if yyb3852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3852++
		if yyhl3852 {
			yyb3852 = yyj3852 > l
		} else {
			yyb3852 = r.CheckBreak()
		}
		if yyb3852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3856 := z.EncBinary()
		_ = yym3856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3857 := !z.EncBinary()
			yy2arr3857 := z.EncBasicHandle().StructToArray
			var yyq3857 [3]bool
			_, _, _ = yysep3857, yyq3857, yy2arr3857
			const yyr3857 bool = false
			yyq3857[0] = x.Kind != ""
			yyq3857[1] = x.APIVersion != ""
			var yynn3857 int
			if yyr3857 || yy2arr3857 {
				r.EncodeArrayStart(3)
			} else {
				yynn3857 = 1
				for _, b := range yyq3857 {
					if b {
						yynn3857++
					}
				}
				r.EncodeMapStart(yynn3857)
				yynn3857 = 0
			}
			if yyr3857 || yy2arr3857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3857[0] {
					yym3859 := z.EncBinary()
					_ = yym3859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3857[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3860 := z.EncBinary()
					_ = yym3860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3857 || yy2arr3857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3857[1] {
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3857[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3863 := z.EncBinary()
					_ = yym3863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3857 || yy2arr3857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3865 := z.EncBinary()
				_ = yym3865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3866 := z.EncBinary()
				_ = yym3866
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3857 || yy2arr3857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3867 := z.DecBinary()
	_ = yym3867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3868 := r.ContainerType()
		if yyct3868 == codecSelferValueTypeMap1234 {
			yyl3868 := r.ReadMapStart()
			if yyl3868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3868, d)
			}
		} else if yyct3868 == codecSelferValueTypeArray1234 {
			yyl3868 := r.ReadArrayStart()
			if yyl3868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3869Slc
	var yyhl3869 bool = l >= 0
	for yyj3869 := 0; ; yyj3869++ {
		if yyhl3869 {
			if yyj3869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3869Slc = r.DecodeBytes(yys3869Slc, true, true)
		yys3869 := string(yys3869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3869 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3869)
		} // end switch yys3869
	} // end for yyj3869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3873 int
	var yyb3873 bool
	var yyhl3873 bool = l >= 0
	yyj3873++
	if yyhl3873 {
		yyb3873 = yyj3873 > l
	} else {
		yyb3873 = r.CheckBreak()
	}
	if yyb3873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3873++
	if yyhl3873 {
		yyb3873 = yyj3873 > l
	} else {
		yyb3873 = r.CheckBreak()
	}
	if yyb3873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3873++
	if yyhl3873 {
		yyb3873 = yyj3873 > l
	} else {
		yyb3873 = r.CheckBreak()
	}
	if yyb3873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3873++
		if yyhl3873 {
			yyb3873 = yyj3873 > l
		} else {
			yyb3873 = r.CheckBreak()
		}
		if yyb3873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3877 := z.EncBinary()
		_ = yym3877
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3878 := !z.EncBinary()
			yy2arr3878 := z.EncBasicHandle().StructToArray
			var yyq3878 [5]bool
			_, _, _ = yysep3878, yyq3878, yy2arr3878
			const yyr3878 bool = false
			yyq3878[4] = x.Controller != nil
			var yynn3878 int
			if yyr3878 || yy2arr3878 {
				r.EncodeArrayStart(5)
			} else {
				yynn3878 = 4
				for _, b := range yyq3878 {
					if b {
						yynn3878++
					}
				}
				r.EncodeMapStart(yynn3878)
				yynn3878 = 0
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3880 := z.EncBinary()
				_ = yym3880
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3881 := z.EncBinary()
				_ = yym3881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3883 := z.EncBinary()
				_ = yym3883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3884 := z.EncBinary()
				_ = yym3884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3886 := z.EncBinary()
				_ = yym3886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3887 := z.EncBinary()
				_ = yym3887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3889 := z.EncBinary()
				_ = yym3889
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3890 := z.EncBinary()
				_ = yym3890
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3878[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3892 := *x.Controller
						yym3893 := z.EncBinary()
						_ = yym3893
						if false {
						} else {
							r.EncodeBool(bool(yy3892))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3878[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3894 := *x.Controller
						yym3895 := z.EncBinary()
						_ = yym3895
						if false {
						} else {
							r.EncodeBool(bool(yy3894))
						}
					}
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3896 := z.DecBinary()
	_ = yym3896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3897 := r.ContainerType()
		if yyct3897 == codecSelferValueTypeMap1234 {
			yyl3897 := r.ReadMapStart()
			if yyl3897 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3897, d)
			}
		} else if yyct3897 == codecSelferValueTypeArray1234 {
			yyl3897 := r.ReadArrayStart()
			if yyl3897 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3898Slc
	var yyhl3898 bool = l >= 0
	for yyj3898 := 0; ; yyj3898++ {
		if yyhl3898 {
			if yyj3898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3898Slc = r.DecodeBytes(yys3898Slc, true, true)
		yys3898 := string(yys3898Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3898 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3904 := z.DecBinary()
				_ = yym3904
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3898)
		} // end switch yys3898
	} // end for yyj3898
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3905 int
	var yyb3905 bool
	var yyhl3905 bool = l >= 0
	yyj3905++
	if yyhl3905 {
		yyb3905 = yyj3905 > l
	} else {
		yyb3905 = r.CheckBreak()
	}
	if yyb3905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3905++
	if yyhl3905 {
		yyb3905 = yyj3905 > l
	} else {
		yyb3905 = r.CheckBreak()
	}
	if yyb3905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3905++
	if yyhl3905 {
		yyb3905 = yyj3905 > l
	} else {
		yyb3905 = r.CheckBreak()
	}
	if yyb3905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3905++
	if yyhl3905 {
		yyb3905 = yyj3905 > l
	} else {
		yyb3905 = r.CheckBreak()
	}
	if yyb3905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3905++
	if yyhl3905 {
		yyb3905 = yyj3905 > l
	} else {
		yyb3905 = r.CheckBreak()
	}
	if yyb3905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3911 := z.DecBinary()
		_ = yym3911
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3905++
		if yyhl3905 {
			yyb3905 = yyj3905 > l
		} else {
			yyb3905 = r.CheckBreak()
		}
		if yyb3905 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3905-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3912 := z.EncBinary()
		_ = yym3912
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3913 := !z.EncBinary()
			yy2arr3913 := z.EncBasicHandle().StructToArray
			var yyq3913 [7]bool
			_, _, _ = yysep3913, yyq3913, yy2arr3913
			const yyr3913 bool = false
			yyq3913[0] = x.Kind != ""
			yyq3913[1] = x.Namespace != ""
			yyq3913[2] = x.Name != ""
			yyq3913[3] = x.UID != ""
			yyq3913[4] = x.APIVersion != ""
			yyq3913[5] = x.ResourceVersion != ""
			yyq3913[6] = x.FieldPath != ""
			var yynn3913 int
			if yyr3913 || yy2arr3913 {
				r.EncodeArrayStart(7)
			} else {
				yynn3913 = 0
				for _, b := range yyq3913 {
					if b {
						yynn3913++
					}
				}
				r.EncodeMapStart(yynn3913)
				yynn3913 = 0
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[0] {
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3916 := z.EncBinary()
					_ = yym3916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[1] {
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3919 := z.EncBinary()
					_ = yym3919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[2] {
					yym3921 := z.EncBinary()
					_ = yym3921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[3] {
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3925 := z.EncBinary()
					_ = yym3925
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[4] {
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3928 := z.EncBinary()
					_ = yym3928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[5] {
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3931 := z.EncBinary()
					_ = yym3931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3913[6] {
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3913[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3934 := z.EncBinary()
					_ = yym3934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3913 || yy2arr3913 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3935 := z.DecBinary()
	_ = yym3935
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3936 := r.ContainerType()
		if yyct3936 == codecSelferValueTypeMap1234 {
			yyl3936 := r.ReadMapStart()
			if yyl3936 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3936, d)
			}
		} else if yyct3936 == codecSelferValueTypeArray1234 {
			yyl3936 := r.ReadArrayStart()
			if yyl3936 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3936, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3937Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3937Slc
	var yyhl3937 bool = l >= 0
	for yyj3937 := 0; ; yyj3937++ {
		if yyhl3937 {
			if yyj3937 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3937Slc = r.DecodeBytes(yys3937Slc, true, true)
		yys3937 := string(yys3937Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3937 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3937)
		} // end switch yys3937
	} // end for yyj3937
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3945 int
	var yyb3945 bool
	var yyhl3945 bool = l >= 0
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3945++
		if yyhl3945 {
			yyb3945 = yyj3945 > l
		} else {
			yyb3945 = r.CheckBreak()
		}
		if yyb3945 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3945-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3953 := z.EncBinary()
		_ = yym3953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3954 := !z.EncBinary()
			yy2arr3954 := z.EncBasicHandle().StructToArray
			var yyq3954 [1]bool
			_, _, _ = yysep3954, yyq3954, yy2arr3954
			const yyr3954 bool = false
			var yynn3954 int
			if yyr3954 || yy2arr3954 {
				r.EncodeArrayStart(1)
			} else {
				yynn3954 = 1
				for _, b := range yyq3954 {
					if b {
						yynn3954++
					}
				}
				r.EncodeMapStart(yynn3954)
				yynn3954 = 0
			}
			if yyr3954 || yy2arr3954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3956 := z.EncBinary()
				_ = yym3956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3957 := z.EncBinary()
				_ = yym3957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3954 || yy2arr3954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3958 := z.DecBinary()
	_ = yym3958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3959 := r.ContainerType()
		if yyct3959 == codecSelferValueTypeMap1234 {
			yyl3959 := r.ReadMapStart()
			if yyl3959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3959, d)
			}
		} else if yyct3959 == codecSelferValueTypeArray1234 {
			yyl3959 := r.ReadArrayStart()
			if yyl3959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3960Slc
	var yyhl3960 bool = l >= 0
	for yyj3960 := 0; ; yyj3960++ {
		if yyhl3960 {
			if yyj3960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3960Slc = r.DecodeBytes(yys3960Slc, true, true)
		yys3960 := string(yys3960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3960 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3960)
		} // end switch yys3960
	} // end for yyj3960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3962 int
	var yyb3962 bool
	var yyhl3962 bool = l >= 0
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3962++
		if yyhl3962 {
			yyb3962 = yyj3962 > l
		} else {
			yyb3962 = r.CheckBreak()
		}
		if yyb3962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3964 := z.EncBinary()
		_ = yym3964
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3965 := !z.EncBinary()
			yy2arr3965 := z.EncBasicHandle().StructToArray
			var yyq3965 [3]bool
			_, _, _ = yysep3965, yyq3965, yy2arr3965
			const yyr3965 bool = false
			yyq3965[0] = x.Kind != ""
			yyq3965[1] = x.APIVersion != ""
			yyq3965[2] = true
			var yynn3965 int
			if yyr3965 || yy2arr3965 {
				r.EncodeArrayStart(3)
			} else {
				yynn3965 = 0
				for _, b := range yyq3965 {
					if b {
						yynn3965++
					}
				}
				r.EncodeMapStart(yynn3965)
				yynn3965 = 0
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3965[0] {
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3965[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3968 := z.EncBinary()
					_ = yym3968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3965[1] {
					yym3970 := z.EncBinary()
					_ = yym3970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3965[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3965[2] {
					yy3973 := &x.Reference
					yy3973.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3965[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3974 := &x.Reference
					yy3974.CodecEncodeSelf(e)
				}
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3975 := z.DecBinary()
	_ = yym3975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3976 := r.ContainerType()
		if yyct3976 == codecSelferValueTypeMap1234 {
			yyl3976 := r.ReadMapStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3976, d)
			}
		} else if yyct3976 == codecSelferValueTypeArray1234 {
			yyl3976 := r.ReadArrayStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3977Slc
	var yyhl3977 bool = l >= 0
	for yyj3977 := 0; ; yyj3977++ {
		if yyhl3977 {
			if yyj3977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3977Slc = r.DecodeBytes(yys3977Slc, true, true)
		yys3977 := string(yys3977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3977 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3980 := &x.Reference
				yyv3980.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3977)
		} // end switch yys3977
	} // end for yyj3977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3981 int
	var yyb3981 bool
	var yyhl3981 bool = l >= 0
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3984 := &x.Reference
		yyv3984.CodecDecodeSelf(d)
	}
	for {
		yyj3981++
		if yyhl3981 {
			yyb3981 = yyj3981 > l
		} else {
			yyb3981 = r.CheckBreak()
		}
		if yyb3981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3985 := z.EncBinary()
		_ = yym3985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3986 := !z.EncBinary()
			yy2arr3986 := z.EncBasicHandle().StructToArray
			var yyq3986 [2]bool
			_, _, _ = yysep3986, yyq3986, yy2arr3986
			const yyr3986 bool = false
			yyq3986[0] = x.Component != ""
			yyq3986[1] = x.Host != ""
			var yynn3986 int
			if yyr3986 || yy2arr3986 {
				r.EncodeArrayStart(2)
			} else {
				yynn3986 = 0
				for _, b := range yyq3986 {
					if b {
						yynn3986++
					}
				}
				r.EncodeMapStart(yynn3986)
				yynn3986 = 0
			}
			if yyr3986 || yy2arr3986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3986[0] {
					yym3988 := z.EncBinary()
					_ = yym3988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3986[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3989 := z.EncBinary()
					_ = yym3989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3986 || yy2arr3986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3986[1] {
					yym3991 := z.EncBinary()
					_ = yym3991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3986[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3992 := z.EncBinary()
					_ = yym3992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3986 || yy2arr3986 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3993 := z.DecBinary()
	_ = yym3993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3994 := r.ContainerType()
		if yyct3994 == codecSelferValueTypeMap1234 {
			yyl3994 := r.ReadMapStart()
			if yyl3994 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3994, d)
			}
		} else if yyct3994 == codecSelferValueTypeArray1234 {
			yyl3994 := r.ReadArrayStart()
			if yyl3994 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3995Slc
	var yyhl3995 bool = l >= 0
	for yyj3995 := 0; ; yyj3995++ {
		if yyhl3995 {
			if yyj3995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3995Slc = r.DecodeBytes(yys3995Slc, true, true)
		yys3995 := string(yys3995Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3995 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3995)
		} // end switch yys3995
	} // end for yyj3995
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3998 int
	var yyb3998 bool
	var yyhl3998 bool = l >= 0
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3998++
		if yyhl3998 {
			yyb3998 = yyj3998 > l
		} else {
			yyb3998 = r.CheckBreak()
		}
		if yyb3998 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3998-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4001 := z.EncBinary()
		_ = yym4001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4002 := !z.EncBinary()
			yy2arr4002 := z.EncBasicHandle().StructToArray
			var yyq4002 [11]bool
			_, _, _ = yysep4002, yyq4002, yy2arr4002
			const yyr4002 bool = false
			yyq4002[0] = x.Kind != ""
			yyq4002[1] = x.APIVersion != ""
			yyq4002[2] = true
			yyq4002[3] = true
			yyq4002[4] = x.Reason != ""
			yyq4002[5] = x.Message != ""
			yyq4002[6] = true
			yyq4002[7] = true
			yyq4002[8] = true
			yyq4002[9] = x.Count != 0
			yyq4002[10] = x.Type != ""
			var yynn4002 int
			if yyr4002 || yy2arr4002 {
				r.EncodeArrayStart(11)
			} else {
				yynn4002 = 0
				for _, b := range yyq4002 {
					if b {
						yynn4002++
					}
				}
				r.EncodeMapStart(yynn4002)
				yynn4002 = 0
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[0] {
					yym4004 := z.EncBinary()
					_ = yym4004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4005 := z.EncBinary()
					_ = yym4005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[1] {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[2] {
					yy4010 := &x.ObjectMeta
					yy4010.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4002[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4011 := &x.ObjectMeta
					yy4011.CodecEncodeSelf(e)
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[3] {
					yy4013 := &x.InvolvedObject
					yy4013.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4002[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4014 := &x.InvolvedObject
					yy4014.CodecEncodeSelf(e)
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[4] {
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4017 := z.EncBinary()
					_ = yym4017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[5] {
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4020 := z.EncBinary()
					_ = yym4020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[6] {
					yy4022 := &x.Source
					yy4022.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4002[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4023 := &x.Source
					yy4023.CodecEncodeSelf(e)
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[7] {
					yy4025 := &x.FirstTimestamp
					yym4026 := z.EncBinary()
					_ = yym4026
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4025) {
					} else if yym4026 {
						z.EncBinaryMarshal(yy4025)
					} else if !yym4026 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4025)
					} else {
						z.EncFallback(yy4025)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4002[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4027 := &x.FirstTimestamp
					yym4028 := z.EncBinary()
					_ = yym4028
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4027) {
					} else if yym4028 {
						z.EncBinaryMarshal(yy4027)
					} else if !yym4028 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4027)
					} else {
						z.EncFallback(yy4027)
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[8] {
					yy4030 := &x.LastTimestamp
					yym4031 := z.EncBinary()
					_ = yym4031
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4030) {
					} else if yym4031 {
						z.EncBinaryMarshal(yy4030)
					} else if !yym4031 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4030)
					} else {
						z.EncFallback(yy4030)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4002[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4032 := &x.LastTimestamp
					yym4033 := z.EncBinary()
					_ = yym4033
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4032) {
					} else if yym4033 {
						z.EncBinaryMarshal(yy4032)
					} else if !yym4033 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4032)
					} else {
						z.EncFallback(yy4032)
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[9] {
					yym4035 := z.EncBinary()
					_ = yym4035
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq4002[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4036 := z.EncBinary()
					_ = yym4036
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4002[10] {
					yym4038 := z.EncBinary()
					_ = yym4038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4002[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4002 || yy2arr4002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4040 := z.DecBinary()
	_ = yym4040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4041 := r.ContainerType()
		if yyct4041 == codecSelferValueTypeMap1234 {
			yyl4041 := r.ReadMapStart()
			if yyl4041 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4041, d)
			}
		} else if yyct4041 == codecSelferValueTypeArray1234 {
			yyl4041 := r.ReadArrayStart()
			if yyl4041 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4042Slc
	var yyhl4042 bool = l >= 0
	for yyj4042 := 0; ; yyj4042++ {
		if yyhl4042 {
			if yyj4042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4042Slc = r.DecodeBytes(yys4042Slc, true, true)
		yys4042 := string(yys4042Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4042 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4045 := &x.ObjectMeta
				yyv4045.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv4046 := &x.InvolvedObject
				yyv4046.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv4049 := &x.Source
				yyv4049.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4050 := &x.FirstTimestamp
				yym4051 := z.DecBinary()
				_ = yym4051
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4050) {
				} else if yym4051 {
					z.DecBinaryUnmarshal(yyv4050)
				} else if !yym4051 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4050)
				} else {
					z.DecFallback(yyv4050, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4052 := &x.LastTimestamp
				yym4053 := z.DecBinary()
				_ = yym4053
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4052) {
				} else if yym4053 {
					z.DecBinaryUnmarshal(yyv4052)
				} else if !yym4053 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4052)
				} else {
					z.DecFallback(yyv4052, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4042)
		} // end switch yys4042
	} // end for yyj4042
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4056 int
	var yyb4056 bool
	var yyhl4056 bool = l >= 0
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4059 := &x.ObjectMeta
		yyv4059.CodecDecodeSelf(d)
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv4060 := &x.InvolvedObject
		yyv4060.CodecDecodeSelf(d)
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv4063 := &x.Source
		yyv4063.CodecDecodeSelf(d)
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4064 := &x.FirstTimestamp
		yym4065 := z.DecBinary()
		_ = yym4065
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4064) {
		} else if yym4065 {
			z.DecBinaryUnmarshal(yyv4064)
		} else if !yym4065 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4064)
		} else {
			z.DecFallback(yyv4064, false)
		}
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4066 := &x.LastTimestamp
		yym4067 := z.DecBinary()
		_ = yym4067
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4066) {
		} else if yym4067 {
			z.DecBinaryUnmarshal(yyv4066)
		} else if !yym4067 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4066)
		} else {
			z.DecFallback(yyv4066, false)
		}
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj4056++
		if yyhl4056 {
			yyb4056 = yyj4056 > l
		} else {
			yyb4056 = r.CheckBreak()
		}
		if yyb4056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4070 := z.EncBinary()
		_ = yym4070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4071 := !z.EncBinary()
			yy2arr4071 := z.EncBasicHandle().StructToArray
			var yyq4071 [4]bool
			_, _, _ = yysep4071, yyq4071, yy2arr4071
			const yyr4071 bool = false
			yyq4071[0] = x.Kind != ""
			yyq4071[1] = x.APIVersion != ""
			yyq4071[2] = true
			var yynn4071 int
			if yyr4071 || yy2arr4071 {
				r.EncodeArrayStart(4)
			} else {
				yynn4071 = 1
				for _, b := range yyq4071 {
					if b {
						yynn4071++
					}
				}
				r.EncodeMapStart(yynn4071)
				yynn4071 = 0
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[0] {
					yym4073 := z.EncBinary()
					_ = yym4073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4074 := z.EncBinary()
					_ = yym4074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[1] {
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4071[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4077 := z.EncBinary()
					_ = yym4077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[2] {
					yy4079 := &x.ListMeta
					yym4080 := z.EncBinary()
					_ = yym4080
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4079) {
					} else {
						z.EncFallback(yy4079)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4071[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4081 := &x.ListMeta
					yym4082 := z.EncBinary()
					_ = yym4082
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4081) {
					} else {
						z.EncFallback(yy4081)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4084 := z.EncBinary()
					_ = yym4084
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4085 := z.EncBinary()
					_ = yym4085
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4086 := z.DecBinary()
	_ = yym4086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4087 := r.ContainerType()
		if yyct4087 == codecSelferValueTypeMap1234 {
			yyl4087 := r.ReadMapStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4087, d)
			}
		} else if yyct4087 == codecSelferValueTypeArray1234 {
			yyl4087 := r.ReadArrayStart()
			if yyl4087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4088Slc
	var yyhl4088 bool = l >= 0
	for yyj4088 := 0; ; yyj4088++ {
		if yyhl4088 {
			if yyj4088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4088Slc = r.DecodeBytes(yys4088Slc, true, true)
		yys4088 := string(yys4088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4088 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4091 := &x.ListMeta
				yym4092 := z.DecBinary()
				_ = yym4092
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4091) {
				} else {
					z.DecFallback(yyv4091, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4093 := &x.Items
				yym4094 := z.DecBinary()
				_ = yym4094
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4093), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4088)
		} // end switch yys4088
	} // end for yyj4088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4095 int
	var yyb4095 bool
	var yyhl4095 bool = l >= 0
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4098 := &x.ListMeta
		yym4099 := z.DecBinary()
		_ = yym4099
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4098) {
		} else {
			z.DecFallback(yyv4098, false)
		}
	}
	yyj4095++
	if yyhl4095 {
		yyb4095 = yyj4095 > l
	} else {
		yyb4095 = r.CheckBreak()
	}
	if yyb4095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4100 := &x.Items
		yym4101 := z.DecBinary()
		_ = yym4101
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4100), d)
		}
	}
	for {
		yyj4095++
		if yyhl4095 {
			yyb4095 = yyj4095 > l
		} else {
			yyb4095 = r.CheckBreak()
		}
		if yyb4095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4102 := z.EncBinary()
		_ = yym4102
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4103 := !z.EncBinary()
			yy2arr4103 := z.EncBasicHandle().StructToArray
			var yyq4103 [4]bool
			_, _, _ = yysep4103, yyq4103, yy2arr4103
			const yyr4103 bool = false
			yyq4103[0] = x.Kind != ""
			yyq4103[1] = x.APIVersion != ""
			yyq4103[2] = true
			var yynn4103 int
			if yyr4103 || yy2arr4103 {
				r.EncodeArrayStart(4)
			} else {
				yynn4103 = 1
				for _, b := range yyq4103 {
					if b {
						yynn4103++
					}
				}
				r.EncodeMapStart(yynn4103)
				yynn4103 = 0
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[0] {
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4103[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4106 := z.EncBinary()
					_ = yym4106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[1] {
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4103[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4109 := z.EncBinary()
					_ = yym4109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[2] {
					yy4111 := &x.ListMeta
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4111) {
					} else {
						z.EncFallback(yy4111)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4103[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4113 := &x.ListMeta
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4113) {
					} else {
						z.EncFallback(yy4113)
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4116 := z.EncBinary()
					_ = yym4116
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4117 := z.EncBinary()
					_ = yym4117
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4118 := z.DecBinary()
	_ = yym4118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4119 := r.ContainerType()
		if yyct4119 == codecSelferValueTypeMap1234 {
			yyl4119 := r.ReadMapStart()
			if yyl4119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4119, d)
			}
		} else if yyct4119 == codecSelferValueTypeArray1234 {
			yyl4119 := r.ReadArrayStart()
			if yyl4119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4120Slc
	var yyhl4120 bool = l >= 0
	for yyj4120 := 0; ; yyj4120++ {
		if yyhl4120 {
			if yyj4120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4120Slc = r.DecodeBytes(yys4120Slc, true, true)
		yys4120 := string(yys4120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4120 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4123 := &x.ListMeta
				yym4124 := z.DecBinary()
				_ = yym4124
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4123) {
				} else {
					z.DecFallback(yyv4123, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4125 := &x.Items
				yym4126 := z.DecBinary()
				_ = yym4126
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4125), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4120)
		} // end switch yys4120
	} // end for yyj4120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4127 int
	var yyb4127 bool
	var yyhl4127 bool = l >= 0
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4130 := &x.ListMeta
		yym4131 := z.DecBinary()
		_ = yym4131
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4130) {
		} else {
			z.DecFallback(yyv4130, false)
		}
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4132 := &x.Items
		yym4133 := z.DecBinary()
		_ = yym4133
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4132), d)
		}
	}
	for {
		yyj4127++
		if yyhl4127 {
			yyb4127 = yyj4127 > l
		} else {
			yyb4127 = r.CheckBreak()
		}
		if yyb4127 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4127-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4134 := z.EncBinary()
	_ = yym4134
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4135 := z.DecBinary()
	_ = yym4135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4136 := z.EncBinary()
		_ = yym4136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4137 := !z.EncBinary()
			yy2arr4137 := z.EncBasicHandle().StructToArray
			var yyq4137 [6]bool
			_, _, _ = yysep4137, yyq4137, yy2arr4137
			const yyr4137 bool = false
			yyq4137[0] = x.Type != ""
			yyq4137[1] = len(x.Max) != 0
			yyq4137[2] = len(x.Min) != 0
			yyq4137[3] = len(x.Default) != 0
			yyq4137[4] = len(x.DefaultRequest) != 0
			yyq4137[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4137 int
			if yyr4137 || yy2arr4137 {
				r.EncodeArrayStart(6)
			} else {
				yynn4137 = 0
				for _, b := range yyq4137 {
					if b {
						yynn4137++
					}
				}
				r.EncodeMapStart(yynn4137)
				yynn4137 = 0
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4137[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4137[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4137[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4137[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4137[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4137[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4137 || yy2arr4137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4144 := z.DecBinary()
	_ = yym4144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4145 := r.ContainerType()
		if yyct4145 == codecSelferValueTypeMap1234 {
			yyl4145 := r.ReadMapStart()
			if yyl4145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4145, d)
			}
		} else if yyct4145 == codecSelferValueTypeArray1234 {
			yyl4145 := r.ReadArrayStart()
			if yyl4145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4146Slc
	var yyhl4146 bool = l >= 0
	for yyj4146 := 0; ; yyj4146++ {
		if yyhl4146 {
			if yyj4146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4146Slc = r.DecodeBytes(yys4146Slc, true, true)
		yys4146 := string(yys4146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4146 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4148 := &x.Max
				yyv4148.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4149 := &x.Min
				yyv4149.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4150 := &x.Default
				yyv4150.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4151 := &x.DefaultRequest
				yyv4151.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4152 := &x.MaxLimitRequestRatio
				yyv4152.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4146)
		} // end switch yys4146
	} // end for yyj4146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4153 int
	var yyb4153 bool
	var yyhl4153 bool = l >= 0
	yyj4153++
	if yyhl4153 {
		yyb4153 = yyj4153 > l
	} else {
		yyb4153 = r.CheckBreak()
	}
	if yyb4153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4153++
	if yyhl4153 {
		yyb4153 = yyj4153 > l
	} else {
		yyb4153 = r.CheckBreak()
	}
	if yyb4153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4155 := &x.Max
		yyv4155.CodecDecodeSelf(d)
	}
	yyj4153++
	if yyhl4153 {
		yyb4153 = yyj4153 > l
	} else {
		yyb4153 = r.CheckBreak()
	}
	if yyb4153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4156 := &x.Min
		yyv4156.CodecDecodeSelf(d)
	}
	yyj4153++
	if yyhl4153 {
		yyb4153 = yyj4153 > l
	} else {
		yyb4153 = r.CheckBreak()
	}
	if yyb4153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4157 := &x.Default
		yyv4157.CodecDecodeSelf(d)
	}
	yyj4153++
	if yyhl4153 {
		yyb4153 = yyj4153 > l
	} else {
		yyb4153 = r.CheckBreak()
	}
	if yyb4153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4158 := &x.DefaultRequest
		yyv4158.CodecDecodeSelf(d)
	}
	yyj4153++
	if yyhl4153 {
		yyb4153 = yyj4153 > l
	} else {
		yyb4153 = r.CheckBreak()
	}
	if yyb4153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4159 := &x.MaxLimitRequestRatio
		yyv4159.CodecDecodeSelf(d)
	}
	for {
		yyj4153++
		if yyhl4153 {
			yyb4153 = yyj4153 > l
		} else {
			yyb4153 = r.CheckBreak()
		}
		if yyb4153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4160 := z.EncBinary()
		_ = yym4160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4161 := !z.EncBinary()
			yy2arr4161 := z.EncBasicHandle().StructToArray
			var yyq4161 [1]bool
			_, _, _ = yysep4161, yyq4161, yy2arr4161
			const yyr4161 bool = false
			var yynn4161 int
			if yyr4161 || yy2arr4161 {
				r.EncodeArrayStart(1)
			} else {
				yynn4161 = 1
				for _, b := range yyq4161 {
					if b {
						yynn4161++
					}
				}
				r.EncodeMapStart(yynn4161)
				yynn4161 = 0
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4163 := z.EncBinary()
					_ = yym4163
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4164 := z.EncBinary()
					_ = yym4164
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4161 || yy2arr4161 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4165 := z.DecBinary()
	_ = yym4165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4166 := r.ContainerType()
		if yyct4166 == codecSelferValueTypeMap1234 {
			yyl4166 := r.ReadMapStart()
			if yyl4166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4166, d)
			}
		} else if yyct4166 == codecSelferValueTypeArray1234 {
			yyl4166 := r.ReadArrayStart()
			if yyl4166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4167Slc
	var yyhl4167 bool = l >= 0
	for yyj4167 := 0; ; yyj4167++ {
		if yyhl4167 {
			if yyj4167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4167Slc = r.DecodeBytes(yys4167Slc, true, true)
		yys4167 := string(yys4167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4167 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4168 := &x.Limits
				yym4169 := z.DecBinary()
				_ = yym4169
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4168), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4167)
		} // end switch yys4167
	} // end for yyj4167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4170 int
	var yyb4170 bool
	var yyhl4170 bool = l >= 0
	yyj4170++
	if yyhl4170 {
		yyb4170 = yyj4170 > l
	} else {
		yyb4170 = r.CheckBreak()
	}
	if yyb4170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4171 := &x.Limits
		yym4172 := z.DecBinary()
		_ = yym4172
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4171), d)
		}
	}
	for {
		yyj4170++
		if yyhl4170 {
			yyb4170 = yyj4170 > l
		} else {
			yyb4170 = r.CheckBreak()
		}
		if yyb4170 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4170-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4173 := z.EncBinary()
		_ = yym4173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4174 := !z.EncBinary()
			yy2arr4174 := z.EncBasicHandle().StructToArray
			var yyq4174 [4]bool
			_, _, _ = yysep4174, yyq4174, yy2arr4174
			const yyr4174 bool = false
			yyq4174[0] = x.Kind != ""
			yyq4174[1] = x.APIVersion != ""
			yyq4174[2] = true
			yyq4174[3] = true
			var yynn4174 int
			if yyr4174 || yy2arr4174 {
				r.EncodeArrayStart(4)
			} else {
				yynn4174 = 0
				for _, b := range yyq4174 {
					if b {
						yynn4174++
					}
				}
				r.EncodeMapStart(yynn4174)
				yynn4174 = 0
			}
			if yyr4174 || yy2arr4174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4174[0] {
					yym4176 := z.EncBinary()
					_ = yym4176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4174[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4177 := z.EncBinary()
					_ = yym4177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4174 || yy2arr4174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4174[1] {
					yym4179 := z.EncBinary()
					_ = yym4179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4174[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4180 := z.EncBinary()
					_ = yym4180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4174 || yy2arr4174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4174[2] {
					yy4182 := &x.ObjectMeta
					yy4182.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4174[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4183 := &x.ObjectMeta
					yy4183.CodecEncodeSelf(e)
				}
			}
			if yyr4174 || yy2arr4174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4174[3] {
					yy4185 := &x.Spec
					yy4185.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4174[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4186 := &x.Spec
					yy4186.CodecEncodeSelf(e)
				}
			}
			if yyr4174 || yy2arr4174 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4187 := z.DecBinary()
	_ = yym4187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4188 := r.ContainerType()
		if yyct4188 == codecSelferValueTypeMap1234 {
			yyl4188 := r.ReadMapStart()
			if yyl4188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4188, d)
			}
		} else if yyct4188 == codecSelferValueTypeArray1234 {
			yyl4188 := r.ReadArrayStart()
			if yyl4188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4189Slc
	var yyhl4189 bool = l >= 0
	for yyj4189 := 0; ; yyj4189++ {
		if yyhl4189 {
			if yyj4189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4189Slc = r.DecodeBytes(yys4189Slc, true, true)
		yys4189 := string(yys4189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4189 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4192 := &x.ObjectMeta
				yyv4192.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4193 := &x.Spec
				yyv4193.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4189)
		} // end switch yys4189
	} // end for yyj4189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4194 int
	var yyb4194 bool
	var yyhl4194 bool = l >= 0
	yyj4194++
	if yyhl4194 {
		yyb4194 = yyj4194 > l
	} else {
		yyb4194 = r.CheckBreak()
	}
	if yyb4194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4194++
	if yyhl4194 {
		yyb4194 = yyj4194 > l
	} else {
		yyb4194 = r.CheckBreak()
	}
	if yyb4194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4194++
	if yyhl4194 {
		yyb4194 = yyj4194 > l
	} else {
		yyb4194 = r.CheckBreak()
	}
	if yyb4194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4197 := &x.ObjectMeta
		yyv4197.CodecDecodeSelf(d)
	}
	yyj4194++
	if yyhl4194 {
		yyb4194 = yyj4194 > l
	} else {
		yyb4194 = r.CheckBreak()
	}
	if yyb4194 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4198 := &x.Spec
		yyv4198.CodecDecodeSelf(d)
	}
	for {
		yyj4194++
		if yyhl4194 {
			yyb4194 = yyj4194 > l
		} else {
			yyb4194 = r.CheckBreak()
		}
		if yyb4194 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4194-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4199 := z.EncBinary()
		_ = yym4199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4200 := !z.EncBinary()
			yy2arr4200 := z.EncBasicHandle().StructToArray
			var yyq4200 [4]bool
			_, _, _ = yysep4200, yyq4200, yy2arr4200
			const yyr4200 bool = false
			yyq4200[0] = x.Kind != ""
			yyq4200[1] = x.APIVersion != ""
			yyq4200[2] = true
			var yynn4200 int
			if yyr4200 || yy2arr4200 {
				r.EncodeArrayStart(4)
			} else {
				yynn4200 = 1
				for _, b := range yyq4200 {
					if b {
						yynn4200++
					}
				}
				r.EncodeMapStart(yynn4200)
				yynn4200 = 0
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4200[0] {
					yym4202 := z.EncBinary()
					_ = yym4202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4200[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4203 := z.EncBinary()
					_ = yym4203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4200[1] {
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4200[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4206 := z.EncBinary()
					_ = yym4206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4200[2] {
					yy4208 := &x.ListMeta
					yym4209 := z.EncBinary()
					_ = yym4209
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4208) {
					} else {
						z.EncFallback(yy4208)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4200[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4210 := &x.ListMeta
					yym4211 := z.EncBinary()
					_ = yym4211
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4210) {
					} else {
						z.EncFallback(yy4210)
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4213 := z.EncBinary()
					_ = yym4213
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4200 || yy2arr4200 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4215 := z.DecBinary()
	_ = yym4215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4216 := r.ContainerType()
		if yyct4216 == codecSelferValueTypeMap1234 {
			yyl4216 := r.ReadMapStart()
			if yyl4216 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4216, d)
			}
		} else if yyct4216 == codecSelferValueTypeArray1234 {
			yyl4216 := r.ReadArrayStart()
			if yyl4216 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4216, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4217Slc
	var yyhl4217 bool = l >= 0
	for yyj4217 := 0; ; yyj4217++ {
		if yyhl4217 {
			if yyj4217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4217Slc = r.DecodeBytes(yys4217Slc, true, true)
		yys4217 := string(yys4217Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4217 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4220 := &x.ListMeta
				yym4221 := z.DecBinary()
				_ = yym4221
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4220) {
				} else {
					z.DecFallback(yyv4220, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4222 := &x.Items
				yym4223 := z.DecBinary()
				_ = yym4223
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4222), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4217)
		} // end switch yys4217
	} // end for yyj4217
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4224 int
	var yyb4224 bool
	var yyhl4224 bool = l >= 0
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4227 := &x.ListMeta
		yym4228 := z.DecBinary()
		_ = yym4228
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4227) {
		} else {
			z.DecFallback(yyv4227, false)
		}
	}
	yyj4224++
	if yyhl4224 {
		yyb4224 = yyj4224 > l
	} else {
		yyb4224 = r.CheckBreak()
	}
	if yyb4224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4229 := &x.Items
		yym4230 := z.DecBinary()
		_ = yym4230
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4229), d)
		}
	}
	for {
		yyj4224++
		if yyhl4224 {
			yyb4224 = yyj4224 > l
		} else {
			yyb4224 = r.CheckBreak()
		}
		if yyb4224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4231 := z.EncBinary()
	_ = yym4231
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4232 := z.DecBinary()
	_ = yym4232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4233 := z.EncBinary()
		_ = yym4233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4234 := !z.EncBinary()
			yy2arr4234 := z.EncBasicHandle().StructToArray
			var yyq4234 [2]bool
			_, _, _ = yysep4234, yyq4234, yy2arr4234
			const yyr4234 bool = false
			yyq4234[0] = len(x.Hard) != 0
			yyq4234[1] = len(x.Scopes) != 0
			var yynn4234 int
			if yyr4234 || yy2arr4234 {
				r.EncodeArrayStart(2)
			} else {
				yynn4234 = 0
				for _, b := range yyq4234 {
					if b {
						yynn4234++
					}
				}
				r.EncodeMapStart(yynn4234)
				yynn4234 = 0
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4234[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4234[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4237 := z.EncBinary()
						_ = yym4237
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4238 := z.EncBinary()
						_ = yym4238
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4234 || yy2arr4234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4239 := z.DecBinary()
	_ = yym4239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4240 := r.ContainerType()
		if yyct4240 == codecSelferValueTypeMap1234 {
			yyl4240 := r.ReadMapStart()
			if yyl4240 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4240, d)
			}
		} else if yyct4240 == codecSelferValueTypeArray1234 {
			yyl4240 := r.ReadArrayStart()
			if yyl4240 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4241Slc
	var yyhl4241 bool = l >= 0
	for yyj4241 := 0; ; yyj4241++ {
		if yyhl4241 {
			if yyj4241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4241Slc = r.DecodeBytes(yys4241Slc, true, true)
		yys4241 := string(yys4241Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4241 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4242 := &x.Hard
				yyv4242.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4243 := &x.Scopes
				yym4244 := z.DecBinary()
				_ = yym4244
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4243), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4241)
		} // end switch yys4241
	} // end for yyj4241
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4245 int
	var yyb4245 bool
	var yyhl4245 bool = l >= 0
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4246 := &x.Hard
		yyv4246.CodecDecodeSelf(d)
	}
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4247 := &x.Scopes
		yym4248 := z.DecBinary()
		_ = yym4248
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4247), d)
		}
	}
	for {
		yyj4245++
		if yyhl4245 {
			yyb4245 = yyj4245 > l
		} else {
			yyb4245 = r.CheckBreak()
		}
		if yyb4245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4249 := z.EncBinary()
		_ = yym4249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4250 := !z.EncBinary()
			yy2arr4250 := z.EncBasicHandle().StructToArray
			var yyq4250 [2]bool
			_, _, _ = yysep4250, yyq4250, yy2arr4250
			const yyr4250 bool = false
			yyq4250[0] = len(x.Hard) != 0
			yyq4250[1] = len(x.Used) != 0
			var yynn4250 int
			if yyr4250 || yy2arr4250 {
				r.EncodeArrayStart(2)
			} else {
				yynn4250 = 0
				for _, b := range yyq4250 {
					if b {
						yynn4250++
					}
				}
				r.EncodeMapStart(yynn4250)
				yynn4250 = 0
			}
			if yyr4250 || yy2arr4250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4250[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4250 || yy2arr4250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4250[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4250 || yy2arr4250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4253 := z.DecBinary()
	_ = yym4253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4254 := r.ContainerType()
		if yyct4254 == codecSelferValueTypeMap1234 {
			yyl4254 := r.ReadMapStart()
			if yyl4254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4254, d)
			}
		} else if yyct4254 == codecSelferValueTypeArray1234 {
			yyl4254 := r.ReadArrayStart()
			if yyl4254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4255Slc
	var yyhl4255 bool = l >= 0
	for yyj4255 := 0; ; yyj4255++ {
		if yyhl4255 {
			if yyj4255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4255Slc = r.DecodeBytes(yys4255Slc, true, true)
		yys4255 := string(yys4255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4255 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4256 := &x.Hard
				yyv4256.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4257 := &x.Used
				yyv4257.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4255)
		} // end switch yys4255
	} // end for yyj4255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4258 int
	var yyb4258 bool
	var yyhl4258 bool = l >= 0
	yyj4258++
	if yyhl4258 {
		yyb4258 = yyj4258 > l
	} else {
		yyb4258 = r.CheckBreak()
	}
	if yyb4258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4259 := &x.Hard
		yyv4259.CodecDecodeSelf(d)
	}
	yyj4258++
	if yyhl4258 {
		yyb4258 = yyj4258 > l
	} else {
		yyb4258 = r.CheckBreak()
	}
	if yyb4258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4260 := &x.Used
		yyv4260.CodecDecodeSelf(d)
	}
	for {
		yyj4258++
		if yyhl4258 {
			yyb4258 = yyj4258 > l
		} else {
			yyb4258 = r.CheckBreak()
		}
		if yyb4258 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4258-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4261 := z.EncBinary()
		_ = yym4261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4262 := !z.EncBinary()
			yy2arr4262 := z.EncBasicHandle().StructToArray
			var yyq4262 [5]bool
			_, _, _ = yysep4262, yyq4262, yy2arr4262
			const yyr4262 bool = false
			yyq4262[0] = x.Kind != ""
			yyq4262[1] = x.APIVersion != ""
			yyq4262[2] = true
			yyq4262[3] = true
			yyq4262[4] = true
			var yynn4262 int
			if yyr4262 || yy2arr4262 {
				r.EncodeArrayStart(5)
			} else {
				yynn4262 = 0
				for _, b := range yyq4262 {
					if b {
						yynn4262++
					}
				}
				r.EncodeMapStart(yynn4262)
				yynn4262 = 0
			}
			if yyr4262 || yy2arr4262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4262[0] {
					yym4264 := z.EncBinary()
					_ = yym4264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4265 := z.EncBinary()
					_ = yym4265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4262 || yy2arr4262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4262[1] {
					yym4267 := z.EncBinary()
					_ = yym4267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4268 := z.EncBinary()
					_ = yym4268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4262 || yy2arr4262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4262[2] {
					yy4270 := &x.ObjectMeta
					yy4270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4262[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4271 := &x.ObjectMeta
					yy4271.CodecEncodeSelf(e)
				}
			}
			if yyr4262 || yy2arr4262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4262[3] {
					yy4273 := &x.Spec
					yy4273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4262[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4274 := &x.Spec
					yy4274.CodecEncodeSelf(e)
				}
			}
			if yyr4262 || yy2arr4262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4262[4] {
					yy4276 := &x.Status
					yy4276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4262[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4277 := &x.Status
					yy4277.CodecEncodeSelf(e)
				}
			}
			if yyr4262 || yy2arr4262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4278 := z.DecBinary()
	_ = yym4278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4279 := r.ContainerType()
		if yyct4279 == codecSelferValueTypeMap1234 {
			yyl4279 := r.ReadMapStart()
			if yyl4279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4279, d)
			}
		} else if yyct4279 == codecSelferValueTypeArray1234 {
			yyl4279 := r.ReadArrayStart()
			if yyl4279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4280Slc
	var yyhl4280 bool = l >= 0
	for yyj4280 := 0; ; yyj4280++ {
		if yyhl4280 {
			if yyj4280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4280Slc = r.DecodeBytes(yys4280Slc, true, true)
		yys4280 := string(yys4280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4283 := &x.ObjectMeta
				yyv4283.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4284 := &x.Spec
				yyv4284.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4285 := &x.Status
				yyv4285.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4280)
		} // end switch yys4280
	} // end for yyj4280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4286 int
	var yyb4286 bool
	var yyhl4286 bool = l >= 0
	yyj4286++
	if yyhl4286 {
		yyb4286 = yyj4286 > l
	} else {
		yyb4286 = r.CheckBreak()
	}
	if yyb4286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4286++
	if yyhl4286 {
		yyb4286 = yyj4286 > l
	} else {
		yyb4286 = r.CheckBreak()
	}
	if yyb4286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4286++
	if yyhl4286 {
		yyb4286 = yyj4286 > l
	} else {
		yyb4286 = r.CheckBreak()
	}
	if yyb4286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4289 := &x.ObjectMeta
		yyv4289.CodecDecodeSelf(d)
	}
	yyj4286++
	if yyhl4286 {
		yyb4286 = yyj4286 > l
	} else {
		yyb4286 = r.CheckBreak()
	}
	if yyb4286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4290 := &x.Spec
		yyv4290.CodecDecodeSelf(d)
	}
	yyj4286++
	if yyhl4286 {
		yyb4286 = yyj4286 > l
	} else {
		yyb4286 = r.CheckBreak()
	}
	if yyb4286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4291 := &x.Status
		yyv4291.CodecDecodeSelf(d)
	}
	for {
		yyj4286++
		if yyhl4286 {
			yyb4286 = yyj4286 > l
		} else {
			yyb4286 = r.CheckBreak()
		}
		if yyb4286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4292 := z.EncBinary()
		_ = yym4292
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4293 := !z.EncBinary()
			yy2arr4293 := z.EncBasicHandle().StructToArray
			var yyq4293 [4]bool
			_, _, _ = yysep4293, yyq4293, yy2arr4293
			const yyr4293 bool = false
			yyq4293[0] = x.Kind != ""
			yyq4293[1] = x.APIVersion != ""
			yyq4293[2] = true
			var yynn4293 int
			if yyr4293 || yy2arr4293 {
				r.EncodeArrayStart(4)
			} else {
				yynn4293 = 1
				for _, b := range yyq4293 {
					if b {
						yynn4293++
					}
				}
				r.EncodeMapStart(yynn4293)
				yynn4293 = 0
			}
			if yyr4293 || yy2arr4293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4293[0] {
					yym4295 := z.EncBinary()
					_ = yym4295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4293[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4296 := z.EncBinary()
					_ = yym4296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4293 || yy2arr4293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4293[1] {
					yym4298 := z.EncBinary()
					_ = yym4298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4293[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4299 := z.EncBinary()
					_ = yym4299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4293 || yy2arr4293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4293[2] {
					yy4301 := &x.ListMeta
					yym4302 := z.EncBinary()
					_ = yym4302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4301) {
					} else {
						z.EncFallback(yy4301)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4293[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4303 := &x.ListMeta
					yym4304 := z.EncBinary()
					_ = yym4304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4303) {
					} else {
						z.EncFallback(yy4303)
					}
				}
			}
			if yyr4293 || yy2arr4293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4306 := z.EncBinary()
					_ = yym4306
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4307 := z.EncBinary()
					_ = yym4307
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4293 || yy2arr4293 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4308 := z.DecBinary()
	_ = yym4308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4309 := r.ContainerType()
		if yyct4309 == codecSelferValueTypeMap1234 {
			yyl4309 := r.ReadMapStart()
			if yyl4309 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4309, d)
			}
		} else if yyct4309 == codecSelferValueTypeArray1234 {
			yyl4309 := r.ReadArrayStart()
			if yyl4309 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4310Slc
	var yyhl4310 bool = l >= 0
	for yyj4310 := 0; ; yyj4310++ {
		if yyhl4310 {
			if yyj4310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4310Slc = r.DecodeBytes(yys4310Slc, true, true)
		yys4310 := string(yys4310Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4310 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4313 := &x.ListMeta
				yym4314 := z.DecBinary()
				_ = yym4314
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4313) {
				} else {
					z.DecFallback(yyv4313, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4315 := &x.Items
				yym4316 := z.DecBinary()
				_ = yym4316
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4315), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4310)
		} // end switch yys4310
	} // end for yyj4310
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4317 int
	var yyb4317 bool
	var yyhl4317 bool = l >= 0
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4320 := &x.ListMeta
		yym4321 := z.DecBinary()
		_ = yym4321
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4320) {
		} else {
			z.DecFallback(yyv4320, false)
		}
	}
	yyj4317++
	if yyhl4317 {
		yyb4317 = yyj4317 > l
	} else {
		yyb4317 = r.CheckBreak()
	}
	if yyb4317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4322 := &x.Items
		yym4323 := z.DecBinary()
		_ = yym4323
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4322), d)
		}
	}
	for {
		yyj4317++
		if yyhl4317 {
			yyb4317 = yyj4317 > l
		} else {
			yyb4317 = r.CheckBreak()
		}
		if yyb4317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4324 := z.EncBinary()
		_ = yym4324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4325 := !z.EncBinary()
			yy2arr4325 := z.EncBasicHandle().StructToArray
			var yyq4325 [5]bool
			_, _, _ = yysep4325, yyq4325, yy2arr4325
			const yyr4325 bool = false
			yyq4325[0] = x.Kind != ""
			yyq4325[1] = x.APIVersion != ""
			yyq4325[2] = true
			yyq4325[3] = len(x.Data) != 0
			yyq4325[4] = x.Type != ""
			var yynn4325 int
			if yyr4325 || yy2arr4325 {
				r.EncodeArrayStart(5)
			} else {
				yynn4325 = 0
				for _, b := range yyq4325 {
					if b {
						yynn4325++
					}
				}
				r.EncodeMapStart(yynn4325)
				yynn4325 = 0
			}
			if yyr4325 || yy2arr4325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4325[0] {
					yym4327 := z.EncBinary()
					_ = yym4327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4325[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4325 || yy2arr4325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4325[1] {
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4325[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4331 := z.EncBinary()
					_ = yym4331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4325 || yy2arr4325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4325[2] {
					yy4333 := &x.ObjectMeta
					yy4333.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4325[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4334 := &x.ObjectMeta
					yy4334.CodecEncodeSelf(e)
				}
			}
			if yyr4325 || yy2arr4325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4325[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4336 := z.EncBinary()
						_ = yym4336
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4325[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4337 := z.EncBinary()
						_ = yym4337
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4325 || yy2arr4325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4325[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4325[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4325 || yy2arr4325 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4339 := z.DecBinary()
	_ = yym4339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4340 := r.ContainerType()
		if yyct4340 == codecSelferValueTypeMap1234 {
			yyl4340 := r.ReadMapStart()
			if yyl4340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4340, d)
			}
		} else if yyct4340 == codecSelferValueTypeArray1234 {
			yyl4340 := r.ReadArrayStart()
			if yyl4340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4341Slc
	var yyhl4341 bool = l >= 0
	for yyj4341 := 0; ; yyj4341++ {
		if yyhl4341 {
			if yyj4341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4341Slc = r.DecodeBytes(yys4341Slc, true, true)
		yys4341 := string(yys4341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4344 := &x.ObjectMeta
				yyv4344.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4345 := &x.Data
				yym4346 := z.DecBinary()
				_ = yym4346
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4345), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4341)
		} // end switch yys4341
	} // end for yyj4341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4348 int
	var yyb4348 bool
	var yyhl4348 bool = l >= 0
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4351 := &x.ObjectMeta
		yyv4351.CodecDecodeSelf(d)
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4352 := &x.Data
		yym4353 := z.DecBinary()
		_ = yym4353
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4352), d)
		}
	}
	yyj4348++
	if yyhl4348 {
		yyb4348 = yyj4348 > l
	} else {
		yyb4348 = r.CheckBreak()
	}
	if yyb4348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4348++
		if yyhl4348 {
			yyb4348 = yyj4348 > l
		} else {
			yyb4348 = r.CheckBreak()
		}
		if yyb4348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4355 := z.EncBinary()
	_ = yym4355
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4356 := z.DecBinary()
	_ = yym4356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4357 := z.EncBinary()
		_ = yym4357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4358 := !z.EncBinary()
			yy2arr4358 := z.EncBasicHandle().StructToArray
			var yyq4358 [4]bool
			_, _, _ = yysep4358, yyq4358, yy2arr4358
			const yyr4358 bool = false
			yyq4358[0] = x.Kind != ""
			yyq4358[1] = x.APIVersion != ""
			yyq4358[2] = true
			var yynn4358 int
			if yyr4358 || yy2arr4358 {
				r.EncodeArrayStart(4)
			} else {
				yynn4358 = 1
				for _, b := range yyq4358 {
					if b {
						yynn4358++
					}
				}
				r.EncodeMapStart(yynn4358)
				yynn4358 = 0
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4358[0] {
					yym4360 := z.EncBinary()
					_ = yym4360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4358[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4361 := z.EncBinary()
					_ = yym4361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4358[1] {
					yym4363 := z.EncBinary()
					_ = yym4363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4364 := z.EncBinary()
					_ = yym4364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4358[2] {
					yy4366 := &x.ListMeta
					yym4367 := z.EncBinary()
					_ = yym4367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4366) {
					} else {
						z.EncFallback(yy4366)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4368 := &x.ListMeta
					yym4369 := z.EncBinary()
					_ = yym4369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4368) {
					} else {
						z.EncFallback(yy4368)
					}
				}
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4371 := z.EncBinary()
					_ = yym4371
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4372 := z.EncBinary()
					_ = yym4372
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4358 || yy2arr4358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4373 := z.DecBinary()
	_ = yym4373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4374 := r.ContainerType()
		if yyct4374 == codecSelferValueTypeMap1234 {
			yyl4374 := r.ReadMapStart()
			if yyl4374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4374, d)
			}
		} else if yyct4374 == codecSelferValueTypeArray1234 {
			yyl4374 := r.ReadArrayStart()
			if yyl4374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4375Slc
	var yyhl4375 bool = l >= 0
	for yyj4375 := 0; ; yyj4375++ {
		if yyhl4375 {
			if yyj4375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4375Slc = r.DecodeBytes(yys4375Slc, true, true)
		yys4375 := string(yys4375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4378 := &x.ListMeta
				yym4379 := z.DecBinary()
				_ = yym4379
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4378) {
				} else {
					z.DecFallback(yyv4378, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4380 := &x.Items
				yym4381 := z.DecBinary()
				_ = yym4381
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4380), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4375)
		} // end switch yys4375
	} // end for yyj4375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4382 int
	var yyb4382 bool
	var yyhl4382 bool = l >= 0
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4385 := &x.ListMeta
		yym4386 := z.DecBinary()
		_ = yym4386
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4385) {
		} else {
			z.DecFallback(yyv4385, false)
		}
	}
	yyj4382++
	if yyhl4382 {
		yyb4382 = yyj4382 > l
	} else {
		yyb4382 = r.CheckBreak()
	}
	if yyb4382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4387 := &x.Items
		yym4388 := z.DecBinary()
		_ = yym4388
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4387), d)
		}
	}
	for {
		yyj4382++
		if yyhl4382 {
			yyb4382 = yyj4382 > l
		} else {
			yyb4382 = r.CheckBreak()
		}
		if yyb4382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4389 := z.EncBinary()
		_ = yym4389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4390 := !z.EncBinary()
			yy2arr4390 := z.EncBasicHandle().StructToArray
			var yyq4390 [4]bool
			_, _, _ = yysep4390, yyq4390, yy2arr4390
			const yyr4390 bool = false
			yyq4390[0] = x.Kind != ""
			yyq4390[1] = x.APIVersion != ""
			yyq4390[2] = true
			yyq4390[3] = len(x.Data) != 0
			var yynn4390 int
			if yyr4390 || yy2arr4390 {
				r.EncodeArrayStart(4)
			} else {
				yynn4390 = 0
				for _, b := range yyq4390 {
					if b {
						yynn4390++
					}
				}
				r.EncodeMapStart(yynn4390)
				yynn4390 = 0
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[0] {
					yym4392 := z.EncBinary()
					_ = yym4392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4390[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4393 := z.EncBinary()
					_ = yym4393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[1] {
					yym4395 := z.EncBinary()
					_ = yym4395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4390[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4396 := z.EncBinary()
					_ = yym4396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[2] {
					yy4398 := &x.ObjectMeta
					yy4398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4390[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4399 := &x.ObjectMeta
					yy4399.CodecEncodeSelf(e)
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4390[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4401 := z.EncBinary()
						_ = yym4401
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4390[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4402 := z.EncBinary()
						_ = yym4402
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4390 || yy2arr4390 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4403 := z.DecBinary()
	_ = yym4403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4404 := r.ContainerType()
		if yyct4404 == codecSelferValueTypeMap1234 {
			yyl4404 := r.ReadMapStart()
			if yyl4404 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4404, d)
			}
		} else if yyct4404 == codecSelferValueTypeArray1234 {
			yyl4404 := r.ReadArrayStart()
			if yyl4404 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4405Slc
	var yyhl4405 bool = l >= 0
	for yyj4405 := 0; ; yyj4405++ {
		if yyhl4405 {
			if yyj4405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4405Slc = r.DecodeBytes(yys4405Slc, true, true)
		yys4405 := string(yys4405Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4405 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4408 := &x.ObjectMeta
				yyv4408.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4409 := &x.Data
				yym4410 := z.DecBinary()
				_ = yym4410
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4409, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4405)
		} // end switch yys4405
	} // end for yyj4405
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4411 int
	var yyb4411 bool
	var yyhl4411 bool = l >= 0
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4414 := &x.ObjectMeta
		yyv4414.CodecDecodeSelf(d)
	}
	yyj4411++
	if yyhl4411 {
		yyb4411 = yyj4411 > l
	} else {
		yyb4411 = r.CheckBreak()
	}
	if yyb4411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4415 := &x.Data
		yym4416 := z.DecBinary()
		_ = yym4416
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4415, false, d)
		}
	}
	for {
		yyj4411++
		if yyhl4411 {
			yyb4411 = yyj4411 > l
		} else {
			yyb4411 = r.CheckBreak()
		}
		if yyb4411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4417 := z.EncBinary()
		_ = yym4417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4418 := !z.EncBinary()
			yy2arr4418 := z.EncBasicHandle().StructToArray
			var yyq4418 [4]bool
			_, _, _ = yysep4418, yyq4418, yy2arr4418
			const yyr4418 bool = false
			yyq4418[0] = x.Kind != ""
			yyq4418[1] = x.APIVersion != ""
			yyq4418[2] = true
			var yynn4418 int
			if yyr4418 || yy2arr4418 {
				r.EncodeArrayStart(4)
			} else {
				yynn4418 = 1
				for _, b := range yyq4418 {
					if b {
						yynn4418++
					}
				}
				r.EncodeMapStart(yynn4418)
				yynn4418 = 0
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4418[0] {
					yym4420 := z.EncBinary()
					_ = yym4420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4421 := z.EncBinary()
					_ = yym4421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4418[1] {
					yym4423 := z.EncBinary()
					_ = yym4423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4424 := z.EncBinary()
					_ = yym4424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4418[2] {
					yy4426 := &x.ListMeta
					yym4427 := z.EncBinary()
					_ = yym4427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4426) {
					} else {
						z.EncFallback(yy4426)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4428 := &x.ListMeta
					yym4429 := z.EncBinary()
					_ = yym4429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4428) {
					} else {
						z.EncFallback(yy4428)
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4431 := z.EncBinary()
					_ = yym4431
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4432 := z.EncBinary()
					_ = yym4432
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4418 || yy2arr4418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4433 := z.DecBinary()
	_ = yym4433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4434 := r.ContainerType()
		if yyct4434 == codecSelferValueTypeMap1234 {
			yyl4434 := r.ReadMapStart()
			if yyl4434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4434, d)
			}
		} else if yyct4434 == codecSelferValueTypeArray1234 {
			yyl4434 := r.ReadArrayStart()
			if yyl4434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4435Slc
	var yyhl4435 bool = l >= 0
	for yyj4435 := 0; ; yyj4435++ {
		if yyhl4435 {
			if yyj4435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4435Slc = r.DecodeBytes(yys4435Slc, true, true)
		yys4435 := string(yys4435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4435 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4438 := &x.ListMeta
				yym4439 := z.DecBinary()
				_ = yym4439
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4438) {
				} else {
					z.DecFallback(yyv4438, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4440 := &x.Items
				yym4441 := z.DecBinary()
				_ = yym4441
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4440), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4435)
		} // end switch yys4435
	} // end for yyj4435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4442 int
	var yyb4442 bool
	var yyhl4442 bool = l >= 0
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4445 := &x.ListMeta
		yym4446 := z.DecBinary()
		_ = yym4446
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4445) {
		} else {
			z.DecFallback(yyv4445, false)
		}
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4447 := &x.Items
		yym4448 := z.DecBinary()
		_ = yym4448
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4447), d)
		}
	}
	for {
		yyj4442++
		if yyhl4442 {
			yyb4442 = yyj4442 > l
		} else {
			yyb4442 = r.CheckBreak()
		}
		if yyb4442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4449 := z.EncBinary()
	_ = yym4449
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4450 := z.DecBinary()
	_ = yym4450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4451 := z.EncBinary()
	_ = yym4451
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4452 := z.DecBinary()
	_ = yym4452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4453 := z.EncBinary()
		_ = yym4453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4454 := !z.EncBinary()
			yy2arr4454 := z.EncBasicHandle().StructToArray
			var yyq4454 [4]bool
			_, _, _ = yysep4454, yyq4454, yy2arr4454
			const yyr4454 bool = false
			yyq4454[2] = x.Message != ""
			yyq4454[3] = x.Error != ""
			var yynn4454 int
			if yyr4454 || yy2arr4454 {
				r.EncodeArrayStart(4)
			} else {
				yynn4454 = 2
				for _, b := range yyq4454 {
					if b {
						yynn4454++
					}
				}
				r.EncodeMapStart(yynn4454)
				yynn4454 = 0
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4454[2] {
					yym4458 := z.EncBinary()
					_ = yym4458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4459 := z.EncBinary()
					_ = yym4459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4454[3] {
					yym4461 := z.EncBinary()
					_ = yym4461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4454[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4462 := z.EncBinary()
					_ = yym4462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4454 || yy2arr4454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4463 := z.DecBinary()
	_ = yym4463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4464 := r.ContainerType()
		if yyct4464 == codecSelferValueTypeMap1234 {
			yyl4464 := r.ReadMapStart()
			if yyl4464 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4464, d)
			}
		} else if yyct4464 == codecSelferValueTypeArray1234 {
			yyl4464 := r.ReadArrayStart()
			if yyl4464 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4465Slc
	var yyhl4465 bool = l >= 0
	for yyj4465 := 0; ; yyj4465++ {
		if yyhl4465 {
			if yyj4465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4465Slc = r.DecodeBytes(yys4465Slc, true, true)
		yys4465 := string(yys4465Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4465 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4465)
		} // end switch yys4465
	} // end for yyj4465
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4470 int
	var yyb4470 bool
	var yyhl4470 bool = l >= 0
	yyj4470++
	if yyhl4470 {
		yyb4470 = yyj4470 > l
	} else {
		yyb4470 = r.CheckBreak()
	}
	if yyb4470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4470++
	if yyhl4470 {
		yyb4470 = yyj4470 > l
	} else {
		yyb4470 = r.CheckBreak()
	}
	if yyb4470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4470++
	if yyhl4470 {
		yyb4470 = yyj4470 > l
	} else {
		yyb4470 = r.CheckBreak()
	}
	if yyb4470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4470++
	if yyhl4470 {
		yyb4470 = yyj4470 > l
	} else {
		yyb4470 = r.CheckBreak()
	}
	if yyb4470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4470++
		if yyhl4470 {
			yyb4470 = yyj4470 > l
		} else {
			yyb4470 = r.CheckBreak()
		}
		if yyb4470 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4470-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4475 := z.EncBinary()
		_ = yym4475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4476 := !z.EncBinary()
			yy2arr4476 := z.EncBasicHandle().StructToArray
			var yyq4476 [4]bool
			_, _, _ = yysep4476, yyq4476, yy2arr4476
			const yyr4476 bool = false
			yyq4476[0] = x.Kind != ""
			yyq4476[1] = x.APIVersion != ""
			yyq4476[2] = true
			yyq4476[3] = len(x.Conditions) != 0
			var yynn4476 int
			if yyr4476 || yy2arr4476 {
				r.EncodeArrayStart(4)
			} else {
				yynn4476 = 0
				for _, b := range yyq4476 {
					if b {
						yynn4476++
					}
				}
				r.EncodeMapStart(yynn4476)
				yynn4476 = 0
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[0] {
					yym4478 := z.EncBinary()
					_ = yym4478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4479 := z.EncBinary()
					_ = yym4479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[1] {
					yym4481 := z.EncBinary()
					_ = yym4481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4482 := z.EncBinary()
					_ = yym4482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[2] {
					yy4484 := &x.ObjectMeta
					yy4484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4485 := &x.ObjectMeta
					yy4485.CodecEncodeSelf(e)
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4476[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4487 := z.EncBinary()
						_ = yym4487
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4488 := z.EncBinary()
						_ = yym4488
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4476 || yy2arr4476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4489 := z.DecBinary()
	_ = yym4489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4490 := r.ContainerType()
		if yyct4490 == codecSelferValueTypeMap1234 {
			yyl4490 := r.ReadMapStart()
			if yyl4490 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4490, d)
			}
		} else if yyct4490 == codecSelferValueTypeArray1234 {
			yyl4490 := r.ReadArrayStart()
			if yyl4490 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4491Slc
	var yyhl4491 bool = l >= 0
	for yyj4491 := 0; ; yyj4491++ {
		if yyhl4491 {
			if yyj4491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4491Slc = r.DecodeBytes(yys4491Slc, true, true)
		yys4491 := string(yys4491Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4491 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4494 := &x.ObjectMeta
				yyv4494.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4495 := &x.Conditions
				yym4496 := z.DecBinary()
				_ = yym4496
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4495), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4491)
		} // end switch yys4491
	} // end for yyj4491
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4497 int
	var yyb4497 bool
	var yyhl4497 bool = l >= 0
	yyj4497++
	if yyhl4497 {
		yyb4497 = yyj4497 > l
	} else {
		yyb4497 = r.CheckBreak()
	}
	if yyb4497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4497++
	if yyhl4497 {
		yyb4497 = yyj4497 > l
	} else {
		yyb4497 = r.CheckBreak()
	}
	if yyb4497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4497++
	if yyhl4497 {
		yyb4497 = yyj4497 > l
	} else {
		yyb4497 = r.CheckBreak()
	}
	if yyb4497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4500 := &x.ObjectMeta
		yyv4500.CodecDecodeSelf(d)
	}
	yyj4497++
	if yyhl4497 {
		yyb4497 = yyj4497 > l
	} else {
		yyb4497 = r.CheckBreak()
	}
	if yyb4497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4501 := &x.Conditions
		yym4502 := z.DecBinary()
		_ = yym4502
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4501), d)
		}
	}
	for {
		yyj4497++
		if yyhl4497 {
			yyb4497 = yyj4497 > l
		} else {
			yyb4497 = r.CheckBreak()
		}
		if yyb4497 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4497-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4503 := z.EncBinary()
		_ = yym4503
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4504 := !z.EncBinary()
			yy2arr4504 := z.EncBasicHandle().StructToArray
			var yyq4504 [4]bool
			_, _, _ = yysep4504, yyq4504, yy2arr4504
			const yyr4504 bool = false
			yyq4504[0] = x.Kind != ""
			yyq4504[1] = x.APIVersion != ""
			yyq4504[2] = true
			var yynn4504 int
			if yyr4504 || yy2arr4504 {
				r.EncodeArrayStart(4)
			} else {
				yynn4504 = 1
				for _, b := range yyq4504 {
					if b {
						yynn4504++
					}
				}
				r.EncodeMapStart(yynn4504)
				yynn4504 = 0
			}
			if yyr4504 || yy2arr4504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4504[0] {
					yym4506 := z.EncBinary()
					_ = yym4506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4504[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4507 := z.EncBinary()
					_ = yym4507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4504 || yy2arr4504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4504[1] {
					yym4509 := z.EncBinary()
					_ = yym4509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4504[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4510 := z.EncBinary()
					_ = yym4510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4504 || yy2arr4504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4504[2] {
					yy4512 := &x.ListMeta
					yym4513 := z.EncBinary()
					_ = yym4513
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4512) {
					} else {
						z.EncFallback(yy4512)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4504[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4514 := &x.ListMeta
					yym4515 := z.EncBinary()
					_ = yym4515
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4514) {
					} else {
						z.EncFallback(yy4514)
					}
				}
			}
			if yyr4504 || yy2arr4504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4517 := z.EncBinary()
					_ = yym4517
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4518 := z.EncBinary()
					_ = yym4518
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4504 || yy2arr4504 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4519 := z.DecBinary()
	_ = yym4519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4520 := r.ContainerType()
		if yyct4520 == codecSelferValueTypeMap1234 {
			yyl4520 := r.ReadMapStart()
			if yyl4520 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4520, d)
			}
		} else if yyct4520 == codecSelferValueTypeArray1234 {
			yyl4520 := r.ReadArrayStart()
			if yyl4520 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4520, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4521Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4521Slc
	var yyhl4521 bool = l >= 0
	for yyj4521 := 0; ; yyj4521++ {
		if yyhl4521 {
			if yyj4521 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4521Slc = r.DecodeBytes(yys4521Slc, true, true)
		yys4521 := string(yys4521Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4521 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4524 := &x.ListMeta
				yym4525 := z.DecBinary()
				_ = yym4525
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4524) {
				} else {
					z.DecFallback(yyv4524, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4526 := &x.Items
				yym4527 := z.DecBinary()
				_ = yym4527
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4526), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4521)
		} // end switch yys4521
	} // end for yyj4521
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4528 int
	var yyb4528 bool
	var yyhl4528 bool = l >= 0
	yyj4528++
	if yyhl4528 {
		yyb4528 = yyj4528 > l
	} else {
		yyb4528 = r.CheckBreak()
	}
	if yyb4528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4528++
	if yyhl4528 {
		yyb4528 = yyj4528 > l
	} else {
		yyb4528 = r.CheckBreak()
	}
	if yyb4528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4528++
	if yyhl4528 {
		yyb4528 = yyj4528 > l
	} else {
		yyb4528 = r.CheckBreak()
	}
	if yyb4528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4531 := &x.ListMeta
		yym4532 := z.DecBinary()
		_ = yym4532
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4531) {
		} else {
			z.DecFallback(yyv4531, false)
		}
	}
	yyj4528++
	if yyhl4528 {
		yyb4528 = yyj4528 > l
	} else {
		yyb4528 = r.CheckBreak()
	}
	if yyb4528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4533 := &x.Items
		yym4534 := z.DecBinary()
		_ = yym4534
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4533), d)
		}
	}
	for {
		yyj4528++
		if yyhl4528 {
			yyb4528 = yyj4528 > l
		} else {
			yyb4528 = r.CheckBreak()
		}
		if yyb4528 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4528-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4535 := z.EncBinary()
		_ = yym4535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4536 := !z.EncBinary()
			yy2arr4536 := z.EncBasicHandle().StructToArray
			var yyq4536 [6]bool
			_, _, _ = yysep4536, yyq4536, yy2arr4536
			const yyr4536 bool = false
			yyq4536[0] = x.Capabilities != nil
			yyq4536[1] = x.Privileged != nil
			yyq4536[2] = x.SELinuxOptions != nil
			yyq4536[3] = x.RunAsUser != nil
			yyq4536[4] = x.RunAsNonRoot != nil
			yyq4536[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4536 int
			if yyr4536 || yy2arr4536 {
				r.EncodeArrayStart(6)
			} else {
				yynn4536 = 0
				for _, b := range yyq4536 {
					if b {
						yynn4536++
					}
				}
				r.EncodeMapStart(yynn4536)
				yynn4536 = 0
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4536[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4539 := *x.Privileged
						yym4540 := z.EncBinary()
						_ = yym4540
						if false {
						} else {
							r.EncodeBool(bool(yy4539))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4541 := *x.Privileged
						yym4542 := z.EncBinary()
						_ = yym4542
						if false {
						} else {
							r.EncodeBool(bool(yy4541))
						}
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4545 := *x.RunAsUser
						yym4546 := z.EncBinary()
						_ = yym4546
						if false {
						} else {
							r.EncodeInt(int64(yy4545))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4547 := *x.RunAsUser
						yym4548 := z.EncBinary()
						_ = yym4548
						if false {
						} else {
							r.EncodeInt(int64(yy4547))
						}
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4550 := *x.RunAsNonRoot
						yym4551 := z.EncBinary()
						_ = yym4551
						if false {
						} else {
							r.EncodeBool(bool(yy4550))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4536[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4552 := *x.RunAsNonRoot
						yym4553 := z.EncBinary()
						_ = yym4553
						if false {
						} else {
							r.EncodeBool(bool(yy4552))
						}
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4536[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4555 := *x.ReadOnlyRootFilesystem
						yym4556 := z.EncBinary()
						_ = yym4556
						if false {
						} else {
							r.EncodeBool(bool(yy4555))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4536[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4557 := *x.ReadOnlyRootFilesystem
						yym4558 := z.EncBinary()
						_ = yym4558
						if false {
						} else {
							r.EncodeBool(bool(yy4557))
						}
					}
				}
			}
			if yyr4536 || yy2arr4536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4559 := z.DecBinary()
	_ = yym4559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4560 := r.ContainerType()
		if yyct4560 == codecSelferValueTypeMap1234 {
			yyl4560 := r.ReadMapStart()
			if yyl4560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4560, d)
			}
		} else if yyct4560 == codecSelferValueTypeArray1234 {
			yyl4560 := r.ReadArrayStart()
			if yyl4560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4561Slc
	var yyhl4561 bool = l >= 0
	for yyj4561 := 0; ; yyj4561++ {
		if yyhl4561 {
			if yyj4561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4561Slc = r.DecodeBytes(yys4561Slc, true, true)
		yys4561 := string(yys4561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4561 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4564 := z.DecBinary()
				_ = yym4564
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4567 := z.DecBinary()
				_ = yym4567
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4569 := z.DecBinary()
				_ = yym4569
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4571 := z.DecBinary()
				_ = yym4571
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4561)
		} // end switch yys4561
	} // end for yyj4561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4572 int
	var yyb4572 bool
	var yyhl4572 bool = l >= 0
	yyj4572++
	if yyhl4572 {
		yyb4572 = yyj4572 > l
	} else {
		yyb4572 = r.CheckBreak()
	}
	if yyb4572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4572++
	if yyhl4572 {
		yyb4572 = yyj4572 > l
	} else {
		yyb4572 = r.CheckBreak()
	}
	if yyb4572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4575 := z.DecBinary()
		_ = yym4575
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4572++
	if yyhl4572 {
		yyb4572 = yyj4572 > l
	} else {
		yyb4572 = r.CheckBreak()
	}
	if yyb4572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4572++
	if yyhl4572 {
		yyb4572 = yyj4572 > l
	} else {
		yyb4572 = r.CheckBreak()
	}
	if yyb4572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4578 := z.DecBinary()
		_ = yym4578
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4572++
	if yyhl4572 {
		yyb4572 = yyj4572 > l
	} else {
		yyb4572 = r.CheckBreak()
	}
	if yyb4572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4580 := z.DecBinary()
		_ = yym4580
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4572++
	if yyhl4572 {
		yyb4572 = yyj4572 > l
	} else {
		yyb4572 = r.CheckBreak()
	}
	if yyb4572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4582 := z.DecBinary()
		_ = yym4582
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4572++
		if yyhl4572 {
			yyb4572 = yyj4572 > l
		} else {
			yyb4572 = r.CheckBreak()
		}
		if yyb4572 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4572-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4583 := z.EncBinary()
		_ = yym4583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4584 := !z.EncBinary()
			yy2arr4584 := z.EncBasicHandle().StructToArray
			var yyq4584 [4]bool
			_, _, _ = yysep4584, yyq4584, yy2arr4584
			const yyr4584 bool = false
			yyq4584[0] = x.User != ""
			yyq4584[1] = x.Role != ""
			yyq4584[2] = x.Type != ""
			yyq4584[3] = x.Level != ""
			var yynn4584 int
			if yyr4584 || yy2arr4584 {
				r.EncodeArrayStart(4)
			} else {
				yynn4584 = 0
				for _, b := range yyq4584 {
					if b {
						yynn4584++
					}
				}
				r.EncodeMapStart(yynn4584)
				yynn4584 = 0
			}
			if yyr4584 || yy2arr4584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4584[0] {
					yym4586 := z.EncBinary()
					_ = yym4586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4587 := z.EncBinary()
					_ = yym4587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4584 || yy2arr4584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4584[1] {
					yym4589 := z.EncBinary()
					_ = yym4589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4590 := z.EncBinary()
					_ = yym4590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4584 || yy2arr4584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4584[2] {
					yym4592 := z.EncBinary()
					_ = yym4592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4584[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4593 := z.EncBinary()
					_ = yym4593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4584 || yy2arr4584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4584[3] {
					yym4595 := z.EncBinary()
					_ = yym4595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4584[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4596 := z.EncBinary()
					_ = yym4596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4584 || yy2arr4584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4597 := z.DecBinary()
	_ = yym4597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4598 := r.ContainerType()
		if yyct4598 == codecSelferValueTypeMap1234 {
			yyl4598 := r.ReadMapStart()
			if yyl4598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4598, d)
			}
		} else if yyct4598 == codecSelferValueTypeArray1234 {
			yyl4598 := r.ReadArrayStart()
			if yyl4598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4599Slc
	var yyhl4599 bool = l >= 0
	for yyj4599 := 0; ; yyj4599++ {
		if yyhl4599 {
			if yyj4599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4599Slc = r.DecodeBytes(yys4599Slc, true, true)
		yys4599 := string(yys4599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4599 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4599)
		} // end switch yys4599
	} // end for yyj4599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4604 int
	var yyb4604 bool
	var yyhl4604 bool = l >= 0
	yyj4604++
	if yyhl4604 {
		yyb4604 = yyj4604 > l
	} else {
		yyb4604 = r.CheckBreak()
	}
	if yyb4604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4604++
	if yyhl4604 {
		yyb4604 = yyj4604 > l
	} else {
		yyb4604 = r.CheckBreak()
	}
	if yyb4604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4604++
	if yyhl4604 {
		yyb4604 = yyj4604 > l
	} else {
		yyb4604 = r.CheckBreak()
	}
	if yyb4604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4604++
	if yyhl4604 {
		yyb4604 = yyj4604 > l
	} else {
		yyb4604 = r.CheckBreak()
	}
	if yyb4604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4604++
		if yyhl4604 {
			yyb4604 = yyj4604 > l
		} else {
			yyb4604 = r.CheckBreak()
		}
		if yyb4604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4609 := z.EncBinary()
		_ = yym4609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4610 := !z.EncBinary()
			yy2arr4610 := z.EncBasicHandle().StructToArray
			var yyq4610 [5]bool
			_, _, _ = yysep4610, yyq4610, yy2arr4610
			const yyr4610 bool = false
			yyq4610[0] = x.Kind != ""
			yyq4610[1] = x.APIVersion != ""
			yyq4610[2] = true
			var yynn4610 int
			if yyr4610 || yy2arr4610 {
				r.EncodeArrayStart(5)
			} else {
				yynn4610 = 2
				for _, b := range yyq4610 {
					if b {
						yynn4610++
					}
				}
				r.EncodeMapStart(yynn4610)
				yynn4610 = 0
			}
			if yyr4610 || yy2arr4610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4610[0] {
					yym4612 := z.EncBinary()
					_ = yym4612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4610[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4613 := z.EncBinary()
					_ = yym4613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4610 || yy2arr4610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4610[1] {
					yym4615 := z.EncBinary()
					_ = yym4615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4610[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4616 := z.EncBinary()
					_ = yym4616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4610 || yy2arr4610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4610[2] {
					yy4618 := &x.ObjectMeta
					yy4618.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4610[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4619 := &x.ObjectMeta
					yy4619.CodecEncodeSelf(e)
				}
			}
			if yyr4610 || yy2arr4610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4621 := z.EncBinary()
				_ = yym4621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4622 := z.EncBinary()
				_ = yym4622
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4610 || yy2arr4610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4624 := z.EncBinary()
					_ = yym4624
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4625 := z.EncBinary()
					_ = yym4625
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4610 || yy2arr4610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4626 := z.DecBinary()
	_ = yym4626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4627 := r.ContainerType()
		if yyct4627 == codecSelferValueTypeMap1234 {
			yyl4627 := r.ReadMapStart()
			if yyl4627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4627, d)
			}
		} else if yyct4627 == codecSelferValueTypeArray1234 {
			yyl4627 := r.ReadArrayStart()
			if yyl4627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4628Slc
	var yyhl4628 bool = l >= 0
	for yyj4628 := 0; ; yyj4628++ {
		if yyhl4628 {
			if yyj4628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4628Slc = r.DecodeBytes(yys4628Slc, true, true)
		yys4628 := string(yys4628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4628 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4631 := &x.ObjectMeta
				yyv4631.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4633 := &x.Data
				yym4634 := z.DecBinary()
				_ = yym4634
				if false {
				} else {
					*yyv4633 = r.DecodeBytes(*(*[]byte)(yyv4633), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4628)
		} // end switch yys4628
	} // end for yyj4628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4635 int
	var yyb4635 bool
	var yyhl4635 bool = l >= 0
	yyj4635++
	if yyhl4635 {
		yyb4635 = yyj4635 > l
	} else {
		yyb4635 = r.CheckBreak()
	}
	if yyb4635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4635++
	if yyhl4635 {
		yyb4635 = yyj4635 > l
	} else {
		yyb4635 = r.CheckBreak()
	}
	if yyb4635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4635++
	if yyhl4635 {
		yyb4635 = yyj4635 > l
	} else {
		yyb4635 = r.CheckBreak()
	}
	if yyb4635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4638 := &x.ObjectMeta
		yyv4638.CodecDecodeSelf(d)
	}
	yyj4635++
	if yyhl4635 {
		yyb4635 = yyj4635 > l
	} else {
		yyb4635 = r.CheckBreak()
	}
	if yyb4635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4635++
	if yyhl4635 {
		yyb4635 = yyj4635 > l
	} else {
		yyb4635 = r.CheckBreak()
	}
	if yyb4635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4640 := &x.Data
		yym4641 := z.DecBinary()
		_ = yym4641
		if false {
		} else {
			*yyv4640 = r.DecodeBytes(*(*[]byte)(yyv4640), false, false)
		}
	}
	for {
		yyj4635++
		if yyhl4635 {
			yyb4635 = yyj4635 > l
		} else {
			yyb4635 = r.CheckBreak()
		}
		if yyb4635 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4635-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4642 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4643 := &yyv4642
		yy4643.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4644 := *v
	yyh4644, yyl4644 := z.DecSliceHelperStart()
	var yyc4644 bool
	if yyl4644 == 0 {
		if yyv4644 == nil {
			yyv4644 = []OwnerReference{}
			yyc4644 = true
		} else if len(yyv4644) != 0 {
			yyv4644 = yyv4644[:0]
			yyc4644 = true
		}
	} else if yyl4644 > 0 {
		var yyrr4644, yyrl4644 int
		var yyrt4644 bool
		if yyl4644 > cap(yyv4644) {

			yyrg4644 := len(yyv4644) > 0
			yyv24644 := yyv4644
			yyrl4644, yyrt4644 = z.DecInferLen(yyl4644, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4644 {
				if yyrl4644 <= cap(yyv4644) {
					yyv4644 = yyv4644[:yyrl4644]
				} else {
					yyv4644 = make([]OwnerReference, yyrl4644)
				}
			} else {
				yyv4644 = make([]OwnerReference, yyrl4644)
			}
			yyc4644 = true
			yyrr4644 = len(yyv4644)
			if yyrg4644 {
				copy(yyv4644, yyv24644)
			}
		} else if yyl4644 != len(yyv4644) {
			yyv4644 = yyv4644[:yyl4644]
			yyc4644 = true
		}
		yyj4644 := 0
		for ; yyj4644 < yyrr4644; yyj4644++ {
			yyh4644.ElemContainerState(yyj4644)
			if r.TryDecodeAsNil() {
				yyv4644[yyj4644] = OwnerReference{}
			} else {
				yyv4645 := &yyv4644[yyj4644]
				yyv4645.CodecDecodeSelf(d)
			}

		}
		if yyrt4644 {
			for ; yyj4644 < yyl4644; yyj4644++ {
				yyv4644 = append(yyv4644, OwnerReference{})
				yyh4644.ElemContainerState(yyj4644)
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = OwnerReference{}
				} else {
					yyv4646 := &yyv4644[yyj4644]
					yyv4646.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4644 := 0
		for ; !r.CheckBreak(); yyj4644++ {

			if yyj4644 >= len(yyv4644) {
				yyv4644 = append(yyv4644, OwnerReference{}) // var yyz4644 OwnerReference
				yyc4644 = true
			}
			yyh4644.ElemContainerState(yyj4644)
			if yyj4644 < len(yyv4644) {
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = OwnerReference{}
				} else {
					yyv4647 := &yyv4644[yyj4644]
					yyv4647.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4644 < len(yyv4644) {
			yyv4644 = yyv4644[:yyj4644]
			yyc4644 = true
		} else if yyj4644 == 0 && yyv4644 == nil {
			yyv4644 = []OwnerReference{}
			yyc4644 = true
		}
	}
	yyh4644.End()
	if yyc4644 {
		*v = yyv4644
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4648 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4648.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4649 := *v
	yyh4649, yyl4649 := z.DecSliceHelperStart()
	var yyc4649 bool
	if yyl4649 == 0 {
		if yyv4649 == nil {
			yyv4649 = []PersistentVolumeAccessMode{}
			yyc4649 = true
		} else if len(yyv4649) != 0 {
			yyv4649 = yyv4649[:0]
			yyc4649 = true
		}
	} else if yyl4649 > 0 {
		var yyrr4649, yyrl4649 int
		var yyrt4649 bool
		if yyl4649 > cap(yyv4649) {

			yyrl4649, yyrt4649 = z.DecInferLen(yyl4649, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4649 {
				if yyrl4649 <= cap(yyv4649) {
					yyv4649 = yyv4649[:yyrl4649]
				} else {
					yyv4649 = make([]PersistentVolumeAccessMode, yyrl4649)
				}
			} else {
				yyv4649 = make([]PersistentVolumeAccessMode, yyrl4649)
			}
			yyc4649 = true
			yyrr4649 = len(yyv4649)
		} else if yyl4649 != len(yyv4649) {
			yyv4649 = yyv4649[:yyl4649]
			yyc4649 = true
		}
		yyj4649 := 0
		for ; yyj4649 < yyrr4649; yyj4649++ {
			yyh4649.ElemContainerState(yyj4649)
			if r.TryDecodeAsNil() {
				yyv4649[yyj4649] = ""
			} else {
				yyv4649[yyj4649] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4649 {
			for ; yyj4649 < yyl4649; yyj4649++ {
				yyv4649 = append(yyv4649, "")
				yyh4649.ElemContainerState(yyj4649)
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = ""
				} else {
					yyv4649[yyj4649] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4649 := 0
		for ; !r.CheckBreak(); yyj4649++ {

			if yyj4649 >= len(yyv4649) {
				yyv4649 = append(yyv4649, "") // var yyz4649 PersistentVolumeAccessMode
				yyc4649 = true
			}
			yyh4649.ElemContainerState(yyj4649)
			if yyj4649 < len(yyv4649) {
				if r.TryDecodeAsNil() {
					yyv4649[yyj4649] = ""
				} else {
					yyv4649[yyj4649] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4649 < len(yyv4649) {
			yyv4649 = yyv4649[:yyj4649]
			yyc4649 = true
		} else if yyj4649 == 0 && yyv4649 == nil {
			yyv4649 = []PersistentVolumeAccessMode{}
			yyc4649 = true
		}
	}
	yyh4649.End()
	if yyc4649 {
		*v = yyv4649
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4653 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4654 := &yyv4653
		yy4654.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4655 := *v
	yyh4655, yyl4655 := z.DecSliceHelperStart()
	var yyc4655 bool
	if yyl4655 == 0 {
		if yyv4655 == nil {
			yyv4655 = []PersistentVolume{}
			yyc4655 = true
		} else if len(yyv4655) != 0 {
			yyv4655 = yyv4655[:0]
			yyc4655 = true
		}
	} else if yyl4655 > 0 {
		var yyrr4655, yyrl4655 int
		var yyrt4655 bool
		if yyl4655 > cap(yyv4655) {

			yyrg4655 := len(yyv4655) > 0
			yyv24655 := yyv4655
			yyrl4655, yyrt4655 = z.DecInferLen(yyl4655, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4655 {
				if yyrl4655 <= cap(yyv4655) {
					yyv4655 = yyv4655[:yyrl4655]
				} else {
					yyv4655 = make([]PersistentVolume, yyrl4655)
				}
			} else {
				yyv4655 = make([]PersistentVolume, yyrl4655)
			}
			yyc4655 = true
			yyrr4655 = len(yyv4655)
			if yyrg4655 {
				copy(yyv4655, yyv24655)
			}
		} else if yyl4655 != len(yyv4655) {
			yyv4655 = yyv4655[:yyl4655]
			yyc4655 = true
		}
		yyj4655 := 0
		for ; yyj4655 < yyrr4655; yyj4655++ {
			yyh4655.ElemContainerState(yyj4655)
			if r.TryDecodeAsNil() {
				yyv4655[yyj4655] = PersistentVolume{}
			} else {
				yyv4656 := &yyv4655[yyj4655]
				yyv4656.CodecDecodeSelf(d)
			}

		}
		if yyrt4655 {
			for ; yyj4655 < yyl4655; yyj4655++ {
				yyv4655 = append(yyv4655, PersistentVolume{})
				yyh4655.ElemContainerState(yyj4655)
				if r.TryDecodeAsNil() {
					yyv4655[yyj4655] = PersistentVolume{}
				} else {
					yyv4657 := &yyv4655[yyj4655]
					yyv4657.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4655 := 0
		for ; !r.CheckBreak(); yyj4655++ {

			if yyj4655 >= len(yyv4655) {
				yyv4655 = append(yyv4655, PersistentVolume{}) // var yyz4655 PersistentVolume
				yyc4655 = true
			}
			yyh4655.ElemContainerState(yyj4655)
			if yyj4655 < len(yyv4655) {
				if r.TryDecodeAsNil() {
					yyv4655[yyj4655] = PersistentVolume{}
				} else {
					yyv4658 := &yyv4655[yyj4655]
					yyv4658.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4655 < len(yyv4655) {
			yyv4655 = yyv4655[:yyj4655]
			yyc4655 = true
		} else if yyj4655 == 0 && yyv4655 == nil {
			yyv4655 = []PersistentVolume{}
			yyc4655 = true
		}
	}
	yyh4655.End()
	if yyc4655 {
		*v = yyv4655
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4659 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4660 := &yyv4659
		yy4660.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4661 := *v
	yyh4661, yyl4661 := z.DecSliceHelperStart()
	var yyc4661 bool
	if yyl4661 == 0 {
		if yyv4661 == nil {
			yyv4661 = []PersistentVolumeClaim{}
			yyc4661 = true
		} else if len(yyv4661) != 0 {
			yyv4661 = yyv4661[:0]
			yyc4661 = true
		}
	} else if yyl4661 > 0 {
		var yyrr4661, yyrl4661 int
		var yyrt4661 bool
		if yyl4661 > cap(yyv4661) {

			yyrg4661 := len(yyv4661) > 0
			yyv24661 := yyv4661
			yyrl4661, yyrt4661 = z.DecInferLen(yyl4661, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4661 {
				if yyrl4661 <= cap(yyv4661) {
					yyv4661 = yyv4661[:yyrl4661]
				} else {
					yyv4661 = make([]PersistentVolumeClaim, yyrl4661)
				}
			} else {
				yyv4661 = make([]PersistentVolumeClaim, yyrl4661)
			}
			yyc4661 = true
			yyrr4661 = len(yyv4661)
			if yyrg4661 {
				copy(yyv4661, yyv24661)
			}
		} else if yyl4661 != len(yyv4661) {
			yyv4661 = yyv4661[:yyl4661]
			yyc4661 = true
		}
		yyj4661 := 0
		for ; yyj4661 < yyrr4661; yyj4661++ {
			yyh4661.ElemContainerState(yyj4661)
			if r.TryDecodeAsNil() {
				yyv4661[yyj4661] = PersistentVolumeClaim{}
			} else {
				yyv4662 := &yyv4661[yyj4661]
				yyv4662.CodecDecodeSelf(d)
			}

		}
		if yyrt4661 {
			for ; yyj4661 < yyl4661; yyj4661++ {
				yyv4661 = append(yyv4661, PersistentVolumeClaim{})
				yyh4661.ElemContainerState(yyj4661)
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = PersistentVolumeClaim{}
				} else {
					yyv4663 := &yyv4661[yyj4661]
					yyv4663.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4661 := 0
		for ; !r.CheckBreak(); yyj4661++ {

			if yyj4661 >= len(yyv4661) {
				yyv4661 = append(yyv4661, PersistentVolumeClaim{}) // var yyz4661 PersistentVolumeClaim
				yyc4661 = true
			}
			yyh4661.ElemContainerState(yyj4661)
			if yyj4661 < len(yyv4661) {
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = PersistentVolumeClaim{}
				} else {
					yyv4664 := &yyv4661[yyj4661]
					yyv4664.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4661 < len(yyv4661) {
			yyv4661 = yyv4661[:yyj4661]
			yyc4661 = true
		} else if yyj4661 == 0 && yyv4661 == nil {
			yyv4661 = []PersistentVolumeClaim{}
			yyc4661 = true
		}
	}
	yyh4661.End()
	if yyc4661 {
		*v = yyv4661
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4665 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4666 := &yyv4665
		yy4666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4667 := *v
	yyh4667, yyl4667 := z.DecSliceHelperStart()
	var yyc4667 bool
	if yyl4667 == 0 {
		if yyv4667 == nil {
			yyv4667 = []KeyToPath{}
			yyc4667 = true
		} else if len(yyv4667) != 0 {
			yyv4667 = yyv4667[:0]
			yyc4667 = true
		}
	} else if yyl4667 > 0 {
		var yyrr4667, yyrl4667 int
		var yyrt4667 bool
		if yyl4667 > cap(yyv4667) {

			yyrg4667 := len(yyv4667) > 0
			yyv24667 := yyv4667
			yyrl4667, yyrt4667 = z.DecInferLen(yyl4667, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4667 {
				if yyrl4667 <= cap(yyv4667) {
					yyv4667 = yyv4667[:yyrl4667]
				} else {
					yyv4667 = make([]KeyToPath, yyrl4667)
				}
			} else {
				yyv4667 = make([]KeyToPath, yyrl4667)
			}
			yyc4667 = true
			yyrr4667 = len(yyv4667)
			if yyrg4667 {
				copy(yyv4667, yyv24667)
			}
		} else if yyl4667 != len(yyv4667) {
			yyv4667 = yyv4667[:yyl4667]
			yyc4667 = true
		}
		yyj4667 := 0
		for ; yyj4667 < yyrr4667; yyj4667++ {
			yyh4667.ElemContainerState(yyj4667)
			if r.TryDecodeAsNil() {
				yyv4667[yyj4667] = KeyToPath{}
			} else {
				yyv4668 := &yyv4667[yyj4667]
				yyv4668.CodecDecodeSelf(d)
			}

		}
		if yyrt4667 {
			for ; yyj4667 < yyl4667; yyj4667++ {
				yyv4667 = append(yyv4667, KeyToPath{})
				yyh4667.ElemContainerState(yyj4667)
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = KeyToPath{}
				} else {
					yyv4669 := &yyv4667[yyj4667]
					yyv4669.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4667 := 0
		for ; !r.CheckBreak(); yyj4667++ {

			if yyj4667 >= len(yyv4667) {
				yyv4667 = append(yyv4667, KeyToPath{}) // var yyz4667 KeyToPath
				yyc4667 = true
			}
			yyh4667.ElemContainerState(yyj4667)
			if yyj4667 < len(yyv4667) {
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = KeyToPath{}
				} else {
					yyv4670 := &yyv4667[yyj4667]
					yyv4670.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4667 < len(yyv4667) {
			yyv4667 = yyv4667[:yyj4667]
			yyc4667 = true
		} else if yyj4667 == 0 && yyv4667 == nil {
			yyv4667 = []KeyToPath{}
			yyc4667 = true
		}
	}
	yyh4667.End()
	if yyc4667 {
		*v = yyv4667
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4672 := &yyv4671
		yy4672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4673 := *v
	yyh4673, yyl4673 := z.DecSliceHelperStart()
	var yyc4673 bool
	if yyl4673 == 0 {
		if yyv4673 == nil {
			yyv4673 = []DownwardAPIVolumeFile{}
			yyc4673 = true
		} else if len(yyv4673) != 0 {
			yyv4673 = yyv4673[:0]
			yyc4673 = true
		}
	} else if yyl4673 > 0 {
		var yyrr4673, yyrl4673 int
		var yyrt4673 bool
		if yyl4673 > cap(yyv4673) {

			yyrg4673 := len(yyv4673) > 0
			yyv24673 := yyv4673
			yyrl4673, yyrt4673 = z.DecInferLen(yyl4673, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4673 {
				if yyrl4673 <= cap(yyv4673) {
					yyv4673 = yyv4673[:yyrl4673]
				} else {
					yyv4673 = make([]DownwardAPIVolumeFile, yyrl4673)
				}
			} else {
				yyv4673 = make([]DownwardAPIVolumeFile, yyrl4673)
			}
			yyc4673 = true
			yyrr4673 = len(yyv4673)
			if yyrg4673 {
				copy(yyv4673, yyv24673)
			}
		} else if yyl4673 != len(yyv4673) {
			yyv4673 = yyv4673[:yyl4673]
			yyc4673 = true
		}
		yyj4673 := 0
		for ; yyj4673 < yyrr4673; yyj4673++ {
			yyh4673.ElemContainerState(yyj4673)
			if r.TryDecodeAsNil() {
				yyv4673[yyj4673] = DownwardAPIVolumeFile{}
			} else {
				yyv4674 := &yyv4673[yyj4673]
				yyv4674.CodecDecodeSelf(d)
			}

		}
		if yyrt4673 {
			for ; yyj4673 < yyl4673; yyj4673++ {
				yyv4673 = append(yyv4673, DownwardAPIVolumeFile{})
				yyh4673.ElemContainerState(yyj4673)
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = DownwardAPIVolumeFile{}
				} else {
					yyv4675 := &yyv4673[yyj4673]
					yyv4675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4673 := 0
		for ; !r.CheckBreak(); yyj4673++ {

			if yyj4673 >= len(yyv4673) {
				yyv4673 = append(yyv4673, DownwardAPIVolumeFile{}) // var yyz4673 DownwardAPIVolumeFile
				yyc4673 = true
			}
			yyh4673.ElemContainerState(yyj4673)
			if yyj4673 < len(yyv4673) {
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = DownwardAPIVolumeFile{}
				} else {
					yyv4676 := &yyv4673[yyj4673]
					yyv4676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4673 < len(yyv4673) {
			yyv4673 = yyv4673[:yyj4673]
			yyc4673 = true
		} else if yyj4673 == 0 && yyv4673 == nil {
			yyv4673 = []DownwardAPIVolumeFile{}
			yyc4673 = true
		}
	}
	yyh4673.End()
	if yyc4673 {
		*v = yyv4673
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4678 := &yyv4677
		yy4678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4679 := *v
	yyh4679, yyl4679 := z.DecSliceHelperStart()
	var yyc4679 bool
	if yyl4679 == 0 {
		if yyv4679 == nil {
			yyv4679 = []HTTPHeader{}
			yyc4679 = true
		} else if len(yyv4679) != 0 {
			yyv4679 = yyv4679[:0]
			yyc4679 = true
		}
	} else if yyl4679 > 0 {
		var yyrr4679, yyrl4679 int
		var yyrt4679 bool
		if yyl4679 > cap(yyv4679) {

			yyrg4679 := len(yyv4679) > 0
			yyv24679 := yyv4679
			yyrl4679, yyrt4679 = z.DecInferLen(yyl4679, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4679 {
				if yyrl4679 <= cap(yyv4679) {
					yyv4679 = yyv4679[:yyrl4679]
				} else {
					yyv4679 = make([]HTTPHeader, yyrl4679)
				}
			} else {
				yyv4679 = make([]HTTPHeader, yyrl4679)
			}
			yyc4679 = true
			yyrr4679 = len(yyv4679)
			if yyrg4679 {
				copy(yyv4679, yyv24679)
			}
		} else if yyl4679 != len(yyv4679) {
			yyv4679 = yyv4679[:yyl4679]
			yyc4679 = true
		}
		yyj4679 := 0
		for ; yyj4679 < yyrr4679; yyj4679++ {
			yyh4679.ElemContainerState(yyj4679)
			if r.TryDecodeAsNil() {
				yyv4679[yyj4679] = HTTPHeader{}
			} else {
				yyv4680 := &yyv4679[yyj4679]
				yyv4680.CodecDecodeSelf(d)
			}

		}
		if yyrt4679 {
			for ; yyj4679 < yyl4679; yyj4679++ {
				yyv4679 = append(yyv4679, HTTPHeader{})
				yyh4679.ElemContainerState(yyj4679)
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = HTTPHeader{}
				} else {
					yyv4681 := &yyv4679[yyj4679]
					yyv4681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4679 := 0
		for ; !r.CheckBreak(); yyj4679++ {

			if yyj4679 >= len(yyv4679) {
				yyv4679 = append(yyv4679, HTTPHeader{}) // var yyz4679 HTTPHeader
				yyc4679 = true
			}
			yyh4679.ElemContainerState(yyj4679)
			if yyj4679 < len(yyv4679) {
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = HTTPHeader{}
				} else {
					yyv4682 := &yyv4679[yyj4679]
					yyv4682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4679 < len(yyv4679) {
			yyv4679 = yyv4679[:yyj4679]
			yyc4679 = true
		} else if yyj4679 == 0 && yyv4679 == nil {
			yyv4679 = []HTTPHeader{}
			yyc4679 = true
		}
	}
	yyh4679.End()
	if yyc4679 {
		*v = yyv4679
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []Capability{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]Capability, yyrl4684)
				}
			} else {
				yyv4684 = make([]Capability, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = ""
			} else {
				yyv4684[yyj4684] = Capability(r.DecodeString())
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, "")
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = ""
				} else {
					yyv4684[yyj4684] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, "") // var yyz4684 Capability
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = ""
				} else {
					yyv4684[yyj4684] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []Capability{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []ContainerPort{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]ContainerPort, yyrl4690)
				}
			} else {
				yyv4690 = make([]ContainerPort, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = ContainerPort{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, ContainerPort{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = ContainerPort{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, ContainerPort{}) // var yyz4690 ContainerPort
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = ContainerPort{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []ContainerPort{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4695 := &yyv4694
		yy4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []EnvVar{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrg4696 := len(yyv4696) > 0
			yyv24696 := yyv4696
			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]EnvVar, yyrl4696)
				}
			} else {
				yyv4696 = make([]EnvVar, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
			if yyrg4696 {
				copy(yyv4696, yyv24696)
			}
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = EnvVar{}
			} else {
				yyv4697 := &yyv4696[yyj4696]
				yyv4697.CodecDecodeSelf(d)
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, EnvVar{})
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = EnvVar{}
				} else {
					yyv4698 := &yyv4696[yyj4696]
					yyv4698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, EnvVar{}) // var yyz4696 EnvVar
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = EnvVar{}
				} else {
					yyv4699 := &yyv4696[yyj4696]
					yyv4699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []EnvVar{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4701 := &yyv4700
		yy4701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4702 := *v
	yyh4702, yyl4702 := z.DecSliceHelperStart()
	var yyc4702 bool
	if yyl4702 == 0 {
		if yyv4702 == nil {
			yyv4702 = []VolumeMount{}
			yyc4702 = true
		} else if len(yyv4702) != 0 {
			yyv4702 = yyv4702[:0]
			yyc4702 = true
		}
	} else if yyl4702 > 0 {
		var yyrr4702, yyrl4702 int
		var yyrt4702 bool
		if yyl4702 > cap(yyv4702) {

			yyrg4702 := len(yyv4702) > 0
			yyv24702 := yyv4702
			yyrl4702, yyrt4702 = z.DecInferLen(yyl4702, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4702 {
				if yyrl4702 <= cap(yyv4702) {
					yyv4702 = yyv4702[:yyrl4702]
				} else {
					yyv4702 = make([]VolumeMount, yyrl4702)
				}
			} else {
				yyv4702 = make([]VolumeMount, yyrl4702)
			}
			yyc4702 = true
			yyrr4702 = len(yyv4702)
			if yyrg4702 {
				copy(yyv4702, yyv24702)
			}
		} else if yyl4702 != len(yyv4702) {
			yyv4702 = yyv4702[:yyl4702]
			yyc4702 = true
		}
		yyj4702 := 0
		for ; yyj4702 < yyrr4702; yyj4702++ {
			yyh4702.ElemContainerState(yyj4702)
			if r.TryDecodeAsNil() {
				yyv4702[yyj4702] = VolumeMount{}
			} else {
				yyv4703 := &yyv4702[yyj4702]
				yyv4703.CodecDecodeSelf(d)
			}

		}
		if yyrt4702 {
			for ; yyj4702 < yyl4702; yyj4702++ {
				yyv4702 = append(yyv4702, VolumeMount{})
				yyh4702.ElemContainerState(yyj4702)
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = VolumeMount{}
				} else {
					yyv4704 := &yyv4702[yyj4702]
					yyv4704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4702 := 0
		for ; !r.CheckBreak(); yyj4702++ {

			if yyj4702 >= len(yyv4702) {
				yyv4702 = append(yyv4702, VolumeMount{}) // var yyz4702 VolumeMount
				yyc4702 = true
			}
			yyh4702.ElemContainerState(yyj4702)
			if yyj4702 < len(yyv4702) {
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = VolumeMount{}
				} else {
					yyv4705 := &yyv4702[yyj4702]
					yyv4705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4702 < len(yyv4702) {
			yyv4702 = yyv4702[:yyj4702]
			yyc4702 = true
		} else if yyj4702 == 0 && yyv4702 == nil {
			yyv4702 = []VolumeMount{}
			yyc4702 = true
		}
	}
	yyh4702.End()
	if yyc4702 {
		*v = yyv4702
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4707 := &yyv4706
		yy4707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4708 := *v
	yyh4708, yyl4708 := z.DecSliceHelperStart()
	var yyc4708 bool
	if yyl4708 == 0 {
		if yyv4708 == nil {
			yyv4708 = []Pod{}
			yyc4708 = true
		} else if len(yyv4708) != 0 {
			yyv4708 = yyv4708[:0]
			yyc4708 = true
		}
	} else if yyl4708 > 0 {
		var yyrr4708, yyrl4708 int
		var yyrt4708 bool
		if yyl4708 > cap(yyv4708) {

			yyrg4708 := len(yyv4708) > 0
			yyv24708 := yyv4708
			yyrl4708, yyrt4708 = z.DecInferLen(yyl4708, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4708 {
				if yyrl4708 <= cap(yyv4708) {
					yyv4708 = yyv4708[:yyrl4708]
				} else {
					yyv4708 = make([]Pod, yyrl4708)
				}
			} else {
				yyv4708 = make([]Pod, yyrl4708)
			}
			yyc4708 = true
			yyrr4708 = len(yyv4708)
			if yyrg4708 {
				copy(yyv4708, yyv24708)
			}
		} else if yyl4708 != len(yyv4708) {
			yyv4708 = yyv4708[:yyl4708]
			yyc4708 = true
		}
		yyj4708 := 0
		for ; yyj4708 < yyrr4708; yyj4708++ {
			yyh4708.ElemContainerState(yyj4708)
			if r.TryDecodeAsNil() {
				yyv4708[yyj4708] = Pod{}
			} else {
				yyv4709 := &yyv4708[yyj4708]
				yyv4709.CodecDecodeSelf(d)
			}

		}
		if yyrt4708 {
			for ; yyj4708 < yyl4708; yyj4708++ {
				yyv4708 = append(yyv4708, Pod{})
				yyh4708.ElemContainerState(yyj4708)
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = Pod{}
				} else {
					yyv4710 := &yyv4708[yyj4708]
					yyv4710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4708 := 0
		for ; !r.CheckBreak(); yyj4708++ {

			if yyj4708 >= len(yyv4708) {
				yyv4708 = append(yyv4708, Pod{}) // var yyz4708 Pod
				yyc4708 = true
			}
			yyh4708.ElemContainerState(yyj4708)
			if yyj4708 < len(yyv4708) {
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = Pod{}
				} else {
					yyv4711 := &yyv4708[yyj4708]
					yyv4711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4708 < len(yyv4708) {
			yyv4708 = yyv4708[:yyj4708]
			yyc4708 = true
		} else if yyj4708 == 0 && yyv4708 == nil {
			yyv4708 = []Pod{}
			yyc4708 = true
		}
	}
	yyh4708.End()
	if yyc4708 {
		*v = yyv4708
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4713 := &yyv4712
		yy4713.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4714 := *v
	yyh4714, yyl4714 := z.DecSliceHelperStart()
	var yyc4714 bool
	if yyl4714 == 0 {
		if yyv4714 == nil {
			yyv4714 = []NodeSelectorTerm{}
			yyc4714 = true
		} else if len(yyv4714) != 0 {
			yyv4714 = yyv4714[:0]
			yyc4714 = true
		}
	} else if yyl4714 > 0 {
		var yyrr4714, yyrl4714 int
		var yyrt4714 bool
		if yyl4714 > cap(yyv4714) {

			yyrg4714 := len(yyv4714) > 0
			yyv24714 := yyv4714
			yyrl4714, yyrt4714 = z.DecInferLen(yyl4714, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4714 {
				if yyrl4714 <= cap(yyv4714) {
					yyv4714 = yyv4714[:yyrl4714]
				} else {
					yyv4714 = make([]NodeSelectorTerm, yyrl4714)
				}
			} else {
				yyv4714 = make([]NodeSelectorTerm, yyrl4714)
			}
			yyc4714 = true
			yyrr4714 = len(yyv4714)
			if yyrg4714 {
				copy(yyv4714, yyv24714)
			}
		} else if yyl4714 != len(yyv4714) {
			yyv4714 = yyv4714[:yyl4714]
			yyc4714 = true
		}
		yyj4714 := 0
		for ; yyj4714 < yyrr4714; yyj4714++ {
			yyh4714.ElemContainerState(yyj4714)
			if r.TryDecodeAsNil() {
				yyv4714[yyj4714] = NodeSelectorTerm{}
			} else {
				yyv4715 := &yyv4714[yyj4714]
				yyv4715.CodecDecodeSelf(d)
			}

		}
		if yyrt4714 {
			for ; yyj4714 < yyl4714; yyj4714++ {
				yyv4714 = append(yyv4714, NodeSelectorTerm{})
				yyh4714.ElemContainerState(yyj4714)
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = NodeSelectorTerm{}
				} else {
					yyv4716 := &yyv4714[yyj4714]
					yyv4716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4714 := 0
		for ; !r.CheckBreak(); yyj4714++ {

			if yyj4714 >= len(yyv4714) {
				yyv4714 = append(yyv4714, NodeSelectorTerm{}) // var yyz4714 NodeSelectorTerm
				yyc4714 = true
			}
			yyh4714.ElemContainerState(yyj4714)
			if yyj4714 < len(yyv4714) {
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = NodeSelectorTerm{}
				} else {
					yyv4717 := &yyv4714[yyj4714]
					yyv4717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4714 < len(yyv4714) {
			yyv4714 = yyv4714[:yyj4714]
			yyc4714 = true
		} else if yyj4714 == 0 && yyv4714 == nil {
			yyv4714 = []NodeSelectorTerm{}
			yyc4714 = true
		}
	}
	yyh4714.End()
	if yyc4714 {
		*v = yyv4714
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4718 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4719 := &yyv4718
		yy4719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4720 := *v
	yyh4720, yyl4720 := z.DecSliceHelperStart()
	var yyc4720 bool
	if yyl4720 == 0 {
		if yyv4720 == nil {
			yyv4720 = []NodeSelectorRequirement{}
			yyc4720 = true
		} else if len(yyv4720) != 0 {
			yyv4720 = yyv4720[:0]
			yyc4720 = true
		}
	} else if yyl4720 > 0 {
		var yyrr4720, yyrl4720 int
		var yyrt4720 bool
		if yyl4720 > cap(yyv4720) {

			yyrg4720 := len(yyv4720) > 0
			yyv24720 := yyv4720
			yyrl4720, yyrt4720 = z.DecInferLen(yyl4720, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4720 {
				if yyrl4720 <= cap(yyv4720) {
					yyv4720 = yyv4720[:yyrl4720]
				} else {
					yyv4720 = make([]NodeSelectorRequirement, yyrl4720)
				}
			} else {
				yyv4720 = make([]NodeSelectorRequirement, yyrl4720)
			}
			yyc4720 = true
			yyrr4720 = len(yyv4720)
			if yyrg4720 {
				copy(yyv4720, yyv24720)
			}
		} else if yyl4720 != len(yyv4720) {
			yyv4720 = yyv4720[:yyl4720]
			yyc4720 = true
		}
		yyj4720 := 0
		for ; yyj4720 < yyrr4720; yyj4720++ {
			yyh4720.ElemContainerState(yyj4720)
			if r.TryDecodeAsNil() {
				yyv4720[yyj4720] = NodeSelectorRequirement{}
			} else {
				yyv4721 := &yyv4720[yyj4720]
				yyv4721.CodecDecodeSelf(d)
			}

		}
		if yyrt4720 {
			for ; yyj4720 < yyl4720; yyj4720++ {
				yyv4720 = append(yyv4720, NodeSelectorRequirement{})
				yyh4720.ElemContainerState(yyj4720)
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = NodeSelectorRequirement{}
				} else {
					yyv4722 := &yyv4720[yyj4720]
					yyv4722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4720 := 0
		for ; !r.CheckBreak(); yyj4720++ {

			if yyj4720 >= len(yyv4720) {
				yyv4720 = append(yyv4720, NodeSelectorRequirement{}) // var yyz4720 NodeSelectorRequirement
				yyc4720 = true
			}
			yyh4720.ElemContainerState(yyj4720)
			if yyj4720 < len(yyv4720) {
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = NodeSelectorRequirement{}
				} else {
					yyv4723 := &yyv4720[yyj4720]
					yyv4723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4720 < len(yyv4720) {
			yyv4720 = yyv4720[:yyj4720]
			yyc4720 = true
		} else if yyj4720 == 0 && yyv4720 == nil {
			yyv4720 = []NodeSelectorRequirement{}
			yyc4720 = true
		}
	}
	yyh4720.End()
	if yyc4720 {
		*v = yyv4720
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4725 := &yyv4724
		yy4725.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4726 := *v
	yyh4726, yyl4726 := z.DecSliceHelperStart()
	var yyc4726 bool
	if yyl4726 == 0 {
		if yyv4726 == nil {
			yyv4726 = []PodAffinityTerm{}
			yyc4726 = true
		} else if len(yyv4726) != 0 {
			yyv4726 = yyv4726[:0]
			yyc4726 = true
		}
	} else if yyl4726 > 0 {
		var yyrr4726, yyrl4726 int
		var yyrt4726 bool
		if yyl4726 > cap(yyv4726) {

			yyrg4726 := len(yyv4726) > 0
			yyv24726 := yyv4726
			yyrl4726, yyrt4726 = z.DecInferLen(yyl4726, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4726 {
				if yyrl4726 <= cap(yyv4726) {
					yyv4726 = yyv4726[:yyrl4726]
				} else {
					yyv4726 = make([]PodAffinityTerm, yyrl4726)
				}
			} else {
				yyv4726 = make([]PodAffinityTerm, yyrl4726)
			}
			yyc4726 = true
			yyrr4726 = len(yyv4726)
			if yyrg4726 {
				copy(yyv4726, yyv24726)
			}
		} else if yyl4726 != len(yyv4726) {
			yyv4726 = yyv4726[:yyl4726]
			yyc4726 = true
		}
		yyj4726 := 0
		for ; yyj4726 < yyrr4726; yyj4726++ {
			yyh4726.ElemContainerState(yyj4726)
			if r.TryDecodeAsNil() {
				yyv4726[yyj4726] = PodAffinityTerm{}
			} else {
				yyv4727 := &yyv4726[yyj4726]
				yyv4727.CodecDecodeSelf(d)
			}

		}
		if yyrt4726 {
			for ; yyj4726 < yyl4726; yyj4726++ {
				yyv4726 = append(yyv4726, PodAffinityTerm{})
				yyh4726.ElemContainerState(yyj4726)
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = PodAffinityTerm{}
				} else {
					yyv4728 := &yyv4726[yyj4726]
					yyv4728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4726 := 0
		for ; !r.CheckBreak(); yyj4726++ {

			if yyj4726 >= len(yyv4726) {
				yyv4726 = append(yyv4726, PodAffinityTerm{}) // var yyz4726 PodAffinityTerm
				yyc4726 = true
			}
			yyh4726.ElemContainerState(yyj4726)
			if yyj4726 < len(yyv4726) {
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = PodAffinityTerm{}
				} else {
					yyv4729 := &yyv4726[yyj4726]
					yyv4729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4726 < len(yyv4726) {
			yyv4726 = yyv4726[:yyj4726]
			yyc4726 = true
		} else if yyj4726 == 0 && yyv4726 == nil {
			yyv4726 = []PodAffinityTerm{}
			yyc4726 = true
		}
	}
	yyh4726.End()
	if yyc4726 {
		*v = yyv4726
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4731 := &yyv4730
		yy4731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4732 := *v
	yyh4732, yyl4732 := z.DecSliceHelperStart()
	var yyc4732 bool
	if yyl4732 == 0 {
		if yyv4732 == nil {
			yyv4732 = []WeightedPodAffinityTerm{}
			yyc4732 = true
		} else if len(yyv4732) != 0 {
			yyv4732 = yyv4732[:0]
			yyc4732 = true
		}
	} else if yyl4732 > 0 {
		var yyrr4732, yyrl4732 int
		var yyrt4732 bool
		if yyl4732 > cap(yyv4732) {

			yyrg4732 := len(yyv4732) > 0
			yyv24732 := yyv4732
			yyrl4732, yyrt4732 = z.DecInferLen(yyl4732, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4732 {
				if yyrl4732 <= cap(yyv4732) {
					yyv4732 = yyv4732[:yyrl4732]
				} else {
					yyv4732 = make([]WeightedPodAffinityTerm, yyrl4732)
				}
			} else {
				yyv4732 = make([]WeightedPodAffinityTerm, yyrl4732)
			}
			yyc4732 = true
			yyrr4732 = len(yyv4732)
			if yyrg4732 {
				copy(yyv4732, yyv24732)
			}
		} else if yyl4732 != len(yyv4732) {
			yyv4732 = yyv4732[:yyl4732]
			yyc4732 = true
		}
		yyj4732 := 0
		for ; yyj4732 < yyrr4732; yyj4732++ {
			yyh4732.ElemContainerState(yyj4732)
			if r.TryDecodeAsNil() {
				yyv4732[yyj4732] = WeightedPodAffinityTerm{}
			} else {
				yyv4733 := &yyv4732[yyj4732]
				yyv4733.CodecDecodeSelf(d)
			}

		}
		if yyrt4732 {
			for ; yyj4732 < yyl4732; yyj4732++ {
				yyv4732 = append(yyv4732, WeightedPodAffinityTerm{})
				yyh4732.ElemContainerState(yyj4732)
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = WeightedPodAffinityTerm{}
				} else {
					yyv4734 := &yyv4732[yyj4732]
					yyv4734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4732 := 0
		for ; !r.CheckBreak(); yyj4732++ {

			if yyj4732 >= len(yyv4732) {
				yyv4732 = append(yyv4732, WeightedPodAffinityTerm{}) // var yyz4732 WeightedPodAffinityTerm
				yyc4732 = true
			}
			yyh4732.ElemContainerState(yyj4732)
			if yyj4732 < len(yyv4732) {
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = WeightedPodAffinityTerm{}
				} else {
					yyv4735 := &yyv4732[yyj4732]
					yyv4735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4732 < len(yyv4732) {
			yyv4732 = yyv4732[:yyj4732]
			yyc4732 = true
		} else if yyj4732 == 0 && yyv4732 == nil {
			yyv4732 = []WeightedPodAffinityTerm{}
			yyc4732 = true
		}
	}
	yyh4732.End()
	if yyc4732 {
		*v = yyv4732
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4737 := &yyv4736
		yy4737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4738 := *v
	yyh4738, yyl4738 := z.DecSliceHelperStart()
	var yyc4738 bool
	if yyl4738 == 0 {
		if yyv4738 == nil {
			yyv4738 = []PreferredSchedulingTerm{}
			yyc4738 = true
		} else if len(yyv4738) != 0 {
			yyv4738 = yyv4738[:0]
			yyc4738 = true
		}
	} else if yyl4738 > 0 {
		var yyrr4738, yyrl4738 int
		var yyrt4738 bool
		if yyl4738 > cap(yyv4738) {

			yyrg4738 := len(yyv4738) > 0
			yyv24738 := yyv4738
			yyrl4738, yyrt4738 = z.DecInferLen(yyl4738, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4738 {
				if yyrl4738 <= cap(yyv4738) {
					yyv4738 = yyv4738[:yyrl4738]
				} else {
					yyv4738 = make([]PreferredSchedulingTerm, yyrl4738)
				}
			} else {
				yyv4738 = make([]PreferredSchedulingTerm, yyrl4738)
			}
			yyc4738 = true
			yyrr4738 = len(yyv4738)
			if yyrg4738 {
				copy(yyv4738, yyv24738)
			}
		} else if yyl4738 != len(yyv4738) {
			yyv4738 = yyv4738[:yyl4738]
			yyc4738 = true
		}
		yyj4738 := 0
		for ; yyj4738 < yyrr4738; yyj4738++ {
			yyh4738.ElemContainerState(yyj4738)
			if r.TryDecodeAsNil() {
				yyv4738[yyj4738] = PreferredSchedulingTerm{}
			} else {
				yyv4739 := &yyv4738[yyj4738]
				yyv4739.CodecDecodeSelf(d)
			}

		}
		if yyrt4738 {
			for ; yyj4738 < yyl4738; yyj4738++ {
				yyv4738 = append(yyv4738, PreferredSchedulingTerm{})
				yyh4738.ElemContainerState(yyj4738)
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = PreferredSchedulingTerm{}
				} else {
					yyv4740 := &yyv4738[yyj4738]
					yyv4740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4738 := 0
		for ; !r.CheckBreak(); yyj4738++ {

			if yyj4738 >= len(yyv4738) {
				yyv4738 = append(yyv4738, PreferredSchedulingTerm{}) // var yyz4738 PreferredSchedulingTerm
				yyc4738 = true
			}
			yyh4738.ElemContainerState(yyj4738)
			if yyj4738 < len(yyv4738) {
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = PreferredSchedulingTerm{}
				} else {
					yyv4741 := &yyv4738[yyj4738]
					yyv4741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4738 < len(yyv4738) {
			yyv4738 = yyv4738[:yyj4738]
			yyc4738 = true
		} else if yyj4738 == 0 && yyv4738 == nil {
			yyv4738 = []PreferredSchedulingTerm{}
			yyc4738 = true
		}
	}
	yyh4738.End()
	if yyc4738 {
		*v = yyv4738
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4743 := &yyv4742
		yy4743.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4744 := *v
	yyh4744, yyl4744 := z.DecSliceHelperStart()
	var yyc4744 bool
	if yyl4744 == 0 {
		if yyv4744 == nil {
			yyv4744 = []Volume{}
			yyc4744 = true
		} else if len(yyv4744) != 0 {
			yyv4744 = yyv4744[:0]
			yyc4744 = true
		}
	} else if yyl4744 > 0 {
		var yyrr4744, yyrl4744 int
		var yyrt4744 bool
		if yyl4744 > cap(yyv4744) {

			yyrg4744 := len(yyv4744) > 0
			yyv24744 := yyv4744
			yyrl4744, yyrt4744 = z.DecInferLen(yyl4744, z.DecBasicHandle().MaxInitLen, 208)
			if yyrt4744 {
				if yyrl4744 <= cap(yyv4744) {
					yyv4744 = yyv4744[:yyrl4744]
				} else {
					yyv4744 = make([]Volume, yyrl4744)
				}
			} else {
				yyv4744 = make([]Volume, yyrl4744)
			}
			yyc4744 = true
			yyrr4744 = len(yyv4744)
			if yyrg4744 {
				copy(yyv4744, yyv24744)
			}
		} else if yyl4744 != len(yyv4744) {
			yyv4744 = yyv4744[:yyl4744]
			yyc4744 = true
		}
		yyj4744 := 0
		for ; yyj4744 < yyrr4744; yyj4744++ {
			yyh4744.ElemContainerState(yyj4744)
			if r.TryDecodeAsNil() {
				yyv4744[yyj4744] = Volume{}
			} else {
				yyv4745 := &yyv4744[yyj4744]
				yyv4745.CodecDecodeSelf(d)
			}

		}
		if yyrt4744 {
			for ; yyj4744 < yyl4744; yyj4744++ {
				yyv4744 = append(yyv4744, Volume{})
				yyh4744.ElemContainerState(yyj4744)
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = Volume{}
				} else {
					yyv4746 := &yyv4744[yyj4744]
					yyv4746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4744 := 0
		for ; !r.CheckBreak(); yyj4744++ {

			if yyj4744 >= len(yyv4744) {
				yyv4744 = append(yyv4744, Volume{}) // var yyz4744 Volume
				yyc4744 = true
			}
			yyh4744.ElemContainerState(yyj4744)
			if yyj4744 < len(yyv4744) {
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = Volume{}
				} else {
					yyv4747 := &yyv4744[yyj4744]
					yyv4747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4744 < len(yyv4744) {
			yyv4744 = yyv4744[:yyj4744]
			yyc4744 = true
		} else if yyj4744 == 0 && yyv4744 == nil {
			yyv4744 = []Volume{}
			yyc4744 = true
		}
	}
	yyh4744.End()
	if yyc4744 {
		*v = yyv4744
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4749 := &yyv4748
		yy4749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4750 := *v
	yyh4750, yyl4750 := z.DecSliceHelperStart()
	var yyc4750 bool
	if yyl4750 == 0 {
		if yyv4750 == nil {
			yyv4750 = []Container{}
			yyc4750 = true
		} else if len(yyv4750) != 0 {
			yyv4750 = yyv4750[:0]
			yyc4750 = true
		}
	} else if yyl4750 > 0 {
		var yyrr4750, yyrl4750 int
		var yyrt4750 bool
		if yyl4750 > cap(yyv4750) {

			yyrg4750 := len(yyv4750) > 0
			yyv24750 := yyv4750
			yyrl4750, yyrt4750 = z.DecInferLen(yyl4750, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4750 {
				if yyrl4750 <= cap(yyv4750) {
					yyv4750 = yyv4750[:yyrl4750]
				} else {
					yyv4750 = make([]Container, yyrl4750)
				}
			} else {
				yyv4750 = make([]Container, yyrl4750)
			}
			yyc4750 = true
			yyrr4750 = len(yyv4750)
			if yyrg4750 {
				copy(yyv4750, yyv24750)
			}
		} else if yyl4750 != len(yyv4750) {
			yyv4750 = yyv4750[:yyl4750]
			yyc4750 = true
		}
		yyj4750 := 0
		for ; yyj4750 < yyrr4750; yyj4750++ {
			yyh4750.ElemContainerState(yyj4750)
			if r.TryDecodeAsNil() {
				yyv4750[yyj4750] = Container{}
			} else {
				yyv4751 := &yyv4750[yyj4750]
				yyv4751.CodecDecodeSelf(d)
			}

		}
		if yyrt4750 {
			for ; yyj4750 < yyl4750; yyj4750++ {
				yyv4750 = append(yyv4750, Container{})
				yyh4750.ElemContainerState(yyj4750)
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = Container{}
				} else {
					yyv4752 := &yyv4750[yyj4750]
					yyv4752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4750 := 0
		for ; !r.CheckBreak(); yyj4750++ {

			if yyj4750 >= len(yyv4750) {
				yyv4750 = append(yyv4750, Container{}) // var yyz4750 Container
				yyc4750 = true
			}
			yyh4750.ElemContainerState(yyj4750)
			if yyj4750 < len(yyv4750) {
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = Container{}
				} else {
					yyv4753 := &yyv4750[yyj4750]
					yyv4753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4750 < len(yyv4750) {
			yyv4750 = yyv4750[:yyj4750]
			yyc4750 = true
		} else if yyj4750 == 0 && yyv4750 == nil {
			yyv4750 = []Container{}
			yyc4750 = true
		}
	}
	yyh4750.End()
	if yyc4750 {
		*v = yyv4750
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4755 := &yyv4754
		yy4755.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4756 := *v
	yyh4756, yyl4756 := z.DecSliceHelperStart()
	var yyc4756 bool
	if yyl4756 == 0 {
		if yyv4756 == nil {
			yyv4756 = []LocalObjectReference{}
			yyc4756 = true
		} else if len(yyv4756) != 0 {
			yyv4756 = yyv4756[:0]
			yyc4756 = true
		}
	} else if yyl4756 > 0 {
		var yyrr4756, yyrl4756 int
		var yyrt4756 bool
		if yyl4756 > cap(yyv4756) {

			yyrg4756 := len(yyv4756) > 0
			yyv24756 := yyv4756
			yyrl4756, yyrt4756 = z.DecInferLen(yyl4756, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4756 {
				if yyrl4756 <= cap(yyv4756) {
					yyv4756 = yyv4756[:yyrl4756]
				} else {
					yyv4756 = make([]LocalObjectReference, yyrl4756)
				}
			} else {
				yyv4756 = make([]LocalObjectReference, yyrl4756)
			}
			yyc4756 = true
			yyrr4756 = len(yyv4756)
			if yyrg4756 {
				copy(yyv4756, yyv24756)
			}
		} else if yyl4756 != len(yyv4756) {
			yyv4756 = yyv4756[:yyl4756]
			yyc4756 = true
		}
		yyj4756 := 0
		for ; yyj4756 < yyrr4756; yyj4756++ {
			yyh4756.ElemContainerState(yyj4756)
			if r.TryDecodeAsNil() {
				yyv4756[yyj4756] = LocalObjectReference{}
			} else {
				yyv4757 := &yyv4756[yyj4756]
				yyv4757.CodecDecodeSelf(d)
			}

		}
		if yyrt4756 {
			for ; yyj4756 < yyl4756; yyj4756++ {
				yyv4756 = append(yyv4756, LocalObjectReference{})
				yyh4756.ElemContainerState(yyj4756)
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = LocalObjectReference{}
				} else {
					yyv4758 := &yyv4756[yyj4756]
					yyv4758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4756 := 0
		for ; !r.CheckBreak(); yyj4756++ {

			if yyj4756 >= len(yyv4756) {
				yyv4756 = append(yyv4756, LocalObjectReference{}) // var yyz4756 LocalObjectReference
				yyc4756 = true
			}
			yyh4756.ElemContainerState(yyj4756)
			if yyj4756 < len(yyv4756) {
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = LocalObjectReference{}
				} else {
					yyv4759 := &yyv4756[yyj4756]
					yyv4759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4756 < len(yyv4756) {
			yyv4756 = yyv4756[:yyj4756]
			yyc4756 = true
		} else if yyj4756 == 0 && yyv4756 == nil {
			yyv4756 = []LocalObjectReference{}
			yyc4756 = true
		}
	}
	yyh4756.End()
	if yyc4756 {
		*v = yyv4756
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4761 := &yyv4760
		yy4761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4762 := *v
	yyh4762, yyl4762 := z.DecSliceHelperStart()
	var yyc4762 bool
	if yyl4762 == 0 {
		if yyv4762 == nil {
			yyv4762 = []PodCondition{}
			yyc4762 = true
		} else if len(yyv4762) != 0 {
			yyv4762 = yyv4762[:0]
			yyc4762 = true
		}
	} else if yyl4762 > 0 {
		var yyrr4762, yyrl4762 int
		var yyrt4762 bool
		if yyl4762 > cap(yyv4762) {

			yyrg4762 := len(yyv4762) > 0
			yyv24762 := yyv4762
			yyrl4762, yyrt4762 = z.DecInferLen(yyl4762, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4762 {
				if yyrl4762 <= cap(yyv4762) {
					yyv4762 = yyv4762[:yyrl4762]
				} else {
					yyv4762 = make([]PodCondition, yyrl4762)
				}
			} else {
				yyv4762 = make([]PodCondition, yyrl4762)
			}
			yyc4762 = true
			yyrr4762 = len(yyv4762)
			if yyrg4762 {
				copy(yyv4762, yyv24762)
			}
		} else if yyl4762 != len(yyv4762) {
			yyv4762 = yyv4762[:yyl4762]
			yyc4762 = true
		}
		yyj4762 := 0
		for ; yyj4762 < yyrr4762; yyj4762++ {
			yyh4762.ElemContainerState(yyj4762)
			if r.TryDecodeAsNil() {
				yyv4762[yyj4762] = PodCondition{}
			} else {
				yyv4763 := &yyv4762[yyj4762]
				yyv4763.CodecDecodeSelf(d)
			}

		}
		if yyrt4762 {
			for ; yyj4762 < yyl4762; yyj4762++ {
				yyv4762 = append(yyv4762, PodCondition{})
				yyh4762.ElemContainerState(yyj4762)
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = PodCondition{}
				} else {
					yyv4764 := &yyv4762[yyj4762]
					yyv4764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4762 := 0
		for ; !r.CheckBreak(); yyj4762++ {

			if yyj4762 >= len(yyv4762) {
				yyv4762 = append(yyv4762, PodCondition{}) // var yyz4762 PodCondition
				yyc4762 = true
			}
			yyh4762.ElemContainerState(yyj4762)
			if yyj4762 < len(yyv4762) {
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = PodCondition{}
				} else {
					yyv4765 := &yyv4762[yyj4762]
					yyv4765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4762 < len(yyv4762) {
			yyv4762 = yyv4762[:yyj4762]
			yyc4762 = true
		} else if yyj4762 == 0 && yyv4762 == nil {
			yyv4762 = []PodCondition{}
			yyc4762 = true
		}
	}
	yyh4762.End()
	if yyc4762 {
		*v = yyv4762
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4767 := &yyv4766
		yy4767.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4768 := *v
	yyh4768, yyl4768 := z.DecSliceHelperStart()
	var yyc4768 bool
	if yyl4768 == 0 {
		if yyv4768 == nil {
			yyv4768 = []ContainerStatus{}
			yyc4768 = true
		} else if len(yyv4768) != 0 {
			yyv4768 = yyv4768[:0]
			yyc4768 = true
		}
	} else if yyl4768 > 0 {
		var yyrr4768, yyrl4768 int
		var yyrt4768 bool
		if yyl4768 > cap(yyv4768) {

			yyrg4768 := len(yyv4768) > 0
			yyv24768 := yyv4768
			yyrl4768, yyrt4768 = z.DecInferLen(yyl4768, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4768 {
				if yyrl4768 <= cap(yyv4768) {
					yyv4768 = yyv4768[:yyrl4768]
				} else {
					yyv4768 = make([]ContainerStatus, yyrl4768)
				}
			} else {
				yyv4768 = make([]ContainerStatus, yyrl4768)
			}
			yyc4768 = true
			yyrr4768 = len(yyv4768)
			if yyrg4768 {
				copy(yyv4768, yyv24768)
			}
		} else if yyl4768 != len(yyv4768) {
			yyv4768 = yyv4768[:yyl4768]
			yyc4768 = true
		}
		yyj4768 := 0
		for ; yyj4768 < yyrr4768; yyj4768++ {
			yyh4768.ElemContainerState(yyj4768)
			if r.TryDecodeAsNil() {
				yyv4768[yyj4768] = ContainerStatus{}
			} else {
				yyv4769 := &yyv4768[yyj4768]
				yyv4769.CodecDecodeSelf(d)
			}

		}
		if yyrt4768 {
			for ; yyj4768 < yyl4768; yyj4768++ {
				yyv4768 = append(yyv4768, ContainerStatus{})
				yyh4768.ElemContainerState(yyj4768)
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = ContainerStatus{}
				} else {
					yyv4770 := &yyv4768[yyj4768]
					yyv4770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4768 := 0
		for ; !r.CheckBreak(); yyj4768++ {

			if yyj4768 >= len(yyv4768) {
				yyv4768 = append(yyv4768, ContainerStatus{}) // var yyz4768 ContainerStatus
				yyc4768 = true
			}
			yyh4768.ElemContainerState(yyj4768)
			if yyj4768 < len(yyv4768) {
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = ContainerStatus{}
				} else {
					yyv4771 := &yyv4768[yyj4768]
					yyv4771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4768 < len(yyv4768) {
			yyv4768 = yyv4768[:yyj4768]
			yyc4768 = true
		} else if yyj4768 == 0 && yyv4768 == nil {
			yyv4768 = []ContainerStatus{}
			yyc4768 = true
		}
	}
	yyh4768.End()
	if yyc4768 {
		*v = yyv4768
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4772 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4773 := &yyv4772
		yy4773.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4774 := *v
	yyh4774, yyl4774 := z.DecSliceHelperStart()
	var yyc4774 bool
	if yyl4774 == 0 {
		if yyv4774 == nil {
			yyv4774 = []PodTemplate{}
			yyc4774 = true
		} else if len(yyv4774) != 0 {
			yyv4774 = yyv4774[:0]
			yyc4774 = true
		}
	} else if yyl4774 > 0 {
		var yyrr4774, yyrl4774 int
		var yyrt4774 bool
		if yyl4774 > cap(yyv4774) {

			yyrg4774 := len(yyv4774) > 0
			yyv24774 := yyv4774
			yyrl4774, yyrt4774 = z.DecInferLen(yyl4774, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4774 {
				if yyrl4774 <= cap(yyv4774) {
					yyv4774 = yyv4774[:yyrl4774]
				} else {
					yyv4774 = make([]PodTemplate, yyrl4774)
				}
			} else {
				yyv4774 = make([]PodTemplate, yyrl4774)
			}
			yyc4774 = true
			yyrr4774 = len(yyv4774)
			if yyrg4774 {
				copy(yyv4774, yyv24774)
			}
		} else if yyl4774 != len(yyv4774) {
			yyv4774 = yyv4774[:yyl4774]
			yyc4774 = true
		}
		yyj4774 := 0
		for ; yyj4774 < yyrr4774; yyj4774++ {
			yyh4774.ElemContainerState(yyj4774)
			if r.TryDecodeAsNil() {
				yyv4774[yyj4774] = PodTemplate{}
			} else {
				yyv4775 := &yyv4774[yyj4774]
				yyv4775.CodecDecodeSelf(d)
			}

		}
		if yyrt4774 {
			for ; yyj4774 < yyl4774; yyj4774++ {
				yyv4774 = append(yyv4774, PodTemplate{})
				yyh4774.ElemContainerState(yyj4774)
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = PodTemplate{}
				} else {
					yyv4776 := &yyv4774[yyj4774]
					yyv4776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4774 := 0
		for ; !r.CheckBreak(); yyj4774++ {

			if yyj4774 >= len(yyv4774) {
				yyv4774 = append(yyv4774, PodTemplate{}) // var yyz4774 PodTemplate
				yyc4774 = true
			}
			yyh4774.ElemContainerState(yyj4774)
			if yyj4774 < len(yyv4774) {
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = PodTemplate{}
				} else {
					yyv4777 := &yyv4774[yyj4774]
					yyv4777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4774 < len(yyv4774) {
			yyv4774 = yyv4774[:yyj4774]
			yyc4774 = true
		} else if yyj4774 == 0 && yyv4774 == nil {
			yyv4774 = []PodTemplate{}
			yyc4774 = true
		}
	}
	yyh4774.End()
	if yyc4774 {
		*v = yyv4774
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4778 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4779 := &yyv4778
		yy4779.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4780 := *v
	yyh4780, yyl4780 := z.DecSliceHelperStart()
	var yyc4780 bool
	if yyl4780 == 0 {
		if yyv4780 == nil {
			yyv4780 = []ReplicationControllerCondition{}
			yyc4780 = true
		} else if len(yyv4780) != 0 {
			yyv4780 = yyv4780[:0]
			yyc4780 = true
		}
	} else if yyl4780 > 0 {
		var yyrr4780, yyrl4780 int
		var yyrt4780 bool
		if yyl4780 > cap(yyv4780) {

			yyrg4780 := len(yyv4780) > 0
			yyv24780 := yyv4780
			yyrl4780, yyrt4780 = z.DecInferLen(yyl4780, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4780 {
				if yyrl4780 <= cap(yyv4780) {
					yyv4780 = yyv4780[:yyrl4780]
				} else {
					yyv4780 = make([]ReplicationControllerCondition, yyrl4780)
				}
			} else {
				yyv4780 = make([]ReplicationControllerCondition, yyrl4780)
			}
			yyc4780 = true
			yyrr4780 = len(yyv4780)
			if yyrg4780 {
				copy(yyv4780, yyv24780)
			}
		} else if yyl4780 != len(yyv4780) {
			yyv4780 = yyv4780[:yyl4780]
			yyc4780 = true
		}
		yyj4780 := 0
		for ; yyj4780 < yyrr4780; yyj4780++ {
			yyh4780.ElemContainerState(yyj4780)
			if r.TryDecodeAsNil() {
				yyv4780[yyj4780] = ReplicationControllerCondition{}
			} else {
				yyv4781 := &yyv4780[yyj4780]
				yyv4781.CodecDecodeSelf(d)
			}

		}
		if yyrt4780 {
			for ; yyj4780 < yyl4780; yyj4780++ {
				yyv4780 = append(yyv4780, ReplicationControllerCondition{})
				yyh4780.ElemContainerState(yyj4780)
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = ReplicationControllerCondition{}
				} else {
					yyv4782 := &yyv4780[yyj4780]
					yyv4782.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4780 := 0
		for ; !r.CheckBreak(); yyj4780++ {

			if yyj4780 >= len(yyv4780) {
				yyv4780 = append(yyv4780, ReplicationControllerCondition{}) // var yyz4780 ReplicationControllerCondition
				yyc4780 = true
			}
			yyh4780.ElemContainerState(yyj4780)
			if yyj4780 < len(yyv4780) {
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = ReplicationControllerCondition{}
				} else {
					yyv4783 := &yyv4780[yyj4780]
					yyv4783.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4780 < len(yyv4780) {
			yyv4780 = yyv4780[:yyj4780]
			yyc4780 = true
		} else if yyj4780 == 0 && yyv4780 == nil {
			yyv4780 = []ReplicationControllerCondition{}
			yyc4780 = true
		}
	}
	yyh4780.End()
	if yyc4780 {
		*v = yyv4780
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4784 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4785 := &yyv4784
		yy4785.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4786 := *v
	yyh4786, yyl4786 := z.DecSliceHelperStart()
	var yyc4786 bool
	if yyl4786 == 0 {
		if yyv4786 == nil {
			yyv4786 = []ReplicationController{}
			yyc4786 = true
		} else if len(yyv4786) != 0 {
			yyv4786 = yyv4786[:0]
			yyc4786 = true
		}
	} else if yyl4786 > 0 {
		var yyrr4786, yyrl4786 int
		var yyrt4786 bool
		if yyl4786 > cap(yyv4786) {

			yyrg4786 := len(yyv4786) > 0
			yyv24786 := yyv4786
			yyrl4786, yyrt4786 = z.DecInferLen(yyl4786, z.DecBasicHandle().MaxInitLen, 328)
			if yyrt4786 {
				if yyrl4786 <= cap(yyv4786) {
					yyv4786 = yyv4786[:yyrl4786]
				} else {
					yyv4786 = make([]ReplicationController, yyrl4786)
				}
			} else {
				yyv4786 = make([]ReplicationController, yyrl4786)
			}
			yyc4786 = true
			yyrr4786 = len(yyv4786)
			if yyrg4786 {
				copy(yyv4786, yyv24786)
			}
		} else if yyl4786 != len(yyv4786) {
			yyv4786 = yyv4786[:yyl4786]
			yyc4786 = true
		}
		yyj4786 := 0
		for ; yyj4786 < yyrr4786; yyj4786++ {
			yyh4786.ElemContainerState(yyj4786)
			if r.TryDecodeAsNil() {
				yyv4786[yyj4786] = ReplicationController{}
			} else {
				yyv4787 := &yyv4786[yyj4786]
				yyv4787.CodecDecodeSelf(d)
			}

		}
		if yyrt4786 {
			for ; yyj4786 < yyl4786; yyj4786++ {
				yyv4786 = append(yyv4786, ReplicationController{})
				yyh4786.ElemContainerState(yyj4786)
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = ReplicationController{}
				} else {
					yyv4788 := &yyv4786[yyj4786]
					yyv4788.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4786 := 0
		for ; !r.CheckBreak(); yyj4786++ {

			if yyj4786 >= len(yyv4786) {
				yyv4786 = append(yyv4786, ReplicationController{}) // var yyz4786 ReplicationController
				yyc4786 = true
			}
			yyh4786.ElemContainerState(yyj4786)
			if yyj4786 < len(yyv4786) {
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = ReplicationController{}
				} else {
					yyv4789 := &yyv4786[yyj4786]
					yyv4789.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4786 < len(yyv4786) {
			yyv4786 = yyv4786[:yyj4786]
			yyc4786 = true
		} else if yyj4786 == 0 && yyv4786 == nil {
			yyv4786 = []ReplicationController{}
			yyc4786 = true
		}
	}
	yyh4786.End()
	if yyc4786 {
		*v = yyv4786
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4790 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4791 := &yyv4790
		yy4791.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4792 := *v
	yyh4792, yyl4792 := z.DecSliceHelperStart()
	var yyc4792 bool
	if yyl4792 == 0 {
		if yyv4792 == nil {
			yyv4792 = []Service{}
			yyc4792 = true
		} else if len(yyv4792) != 0 {
			yyv4792 = yyv4792[:0]
			yyc4792 = true
		}
	} else if yyl4792 > 0 {
		var yyrr4792, yyrl4792 int
		var yyrt4792 bool
		if yyl4792 > cap(yyv4792) {

			yyrg4792 := len(yyv4792) > 0
			yyv24792 := yyv4792
			yyrl4792, yyrt4792 = z.DecInferLen(yyl4792, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4792 {
				if yyrl4792 <= cap(yyv4792) {
					yyv4792 = yyv4792[:yyrl4792]
				} else {
					yyv4792 = make([]Service, yyrl4792)
				}
			} else {
				yyv4792 = make([]Service, yyrl4792)
			}
			yyc4792 = true
			yyrr4792 = len(yyv4792)
			if yyrg4792 {
				copy(yyv4792, yyv24792)
			}
		} else if yyl4792 != len(yyv4792) {
			yyv4792 = yyv4792[:yyl4792]
			yyc4792 = true
		}
		yyj4792 := 0
		for ; yyj4792 < yyrr4792; yyj4792++ {
			yyh4792.ElemContainerState(yyj4792)
			if r.TryDecodeAsNil() {
				yyv4792[yyj4792] = Service{}
			} else {
				yyv4793 := &yyv4792[yyj4792]
				yyv4793.CodecDecodeSelf(d)
			}

		}
		if yyrt4792 {
			for ; yyj4792 < yyl4792; yyj4792++ {
				yyv4792 = append(yyv4792, Service{})
				yyh4792.ElemContainerState(yyj4792)
				if r.TryDecodeAsNil() {
					yyv4792[yyj4792] = Service{}
				} else {
					yyv4794 := &yyv4792[yyj4792]
					yyv4794.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4792 := 0
		for ; !r.CheckBreak(); yyj4792++ {

			if yyj4792 >= len(yyv4792) {
				yyv4792 = append(yyv4792, Service{}) // var yyz4792 Service
				yyc4792 = true
			}
			yyh4792.ElemContainerState(yyj4792)
			if yyj4792 < len(yyv4792) {
				if r.TryDecodeAsNil() {
					yyv4792[yyj4792] = Service{}
				} else {
					yyv4795 := &yyv4792[yyj4792]
					yyv4795.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4792 < len(yyv4792) {
			yyv4792 = yyv4792[:yyj4792]
			yyc4792 = true
		} else if yyj4792 == 0 && yyv4792 == nil {
			yyv4792 = []Service{}
			yyc4792 = true
		}
	}
	yyh4792.End()
	if yyc4792 {
		*v = yyv4792
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4796 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4797 := &yyv4796
		yy4797.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4798 := *v
	yyh4798, yyl4798 := z.DecSliceHelperStart()
	var yyc4798 bool
	if yyl4798 == 0 {
		if yyv4798 == nil {
			yyv4798 = []LoadBalancerIngress{}
			yyc4798 = true
		} else if len(yyv4798) != 0 {
			yyv4798 = yyv4798[:0]
			yyc4798 = true
		}
	} else if yyl4798 > 0 {
		var yyrr4798, yyrl4798 int
		var yyrt4798 bool
		if yyl4798 > cap(yyv4798) {

			yyrg4798 := len(yyv4798) > 0
			yyv24798 := yyv4798
			yyrl4798, yyrt4798 = z.DecInferLen(yyl4798, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4798 {
				if yyrl4798 <= cap(yyv4798) {
					yyv4798 = yyv4798[:yyrl4798]
				} else {
					yyv4798 = make([]LoadBalancerIngress, yyrl4798)
				}
			} else {
				yyv4798 = make([]LoadBalancerIngress, yyrl4798)
			}
			yyc4798 = true
			yyrr4798 = len(yyv4798)
			if yyrg4798 {
				copy(yyv4798, yyv24798)
			}
		} else if yyl4798 != len(yyv4798) {
			yyv4798 = yyv4798[:yyl4798]
			yyc4798 = true
		}
		yyj4798 := 0
		for ; yyj4798 < yyrr4798; yyj4798++ {
			yyh4798.ElemContainerState(yyj4798)
			if r.TryDecodeAsNil() {
				yyv4798[yyj4798] = LoadBalancerIngress{}
			} else {
				yyv4799 := &yyv4798[yyj4798]
				yyv4799.CodecDecodeSelf(d)
			}

		}
		if yyrt4798 {
			for ; yyj4798 < yyl4798; yyj4798++ {
				yyv4798 = append(yyv4798, LoadBalancerIngress{})
				yyh4798.ElemContainerState(yyj4798)
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = LoadBalancerIngress{}
				} else {
					yyv4800 := &yyv4798[yyj4798]
					yyv4800.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4798 := 0
		for ; !r.CheckBreak(); yyj4798++ {

			if yyj4798 >= len(yyv4798) {
				yyv4798 = append(yyv4798, LoadBalancerIngress{}) // var yyz4798 LoadBalancerIngress
				yyc4798 = true
			}
			yyh4798.ElemContainerState(yyj4798)
			if yyj4798 < len(yyv4798) {
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = LoadBalancerIngress{}
				} else {
					yyv4801 := &yyv4798[yyj4798]
					yyv4801.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4798 < len(yyv4798) {
			yyv4798 = yyv4798[:yyj4798]
			yyc4798 = true
		} else if yyj4798 == 0 && yyv4798 == nil {
			yyv4798 = []LoadBalancerIngress{}
			yyc4798 = true
		}
	}
	yyh4798.End()
	if yyc4798 {
		*v = yyv4798
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4802 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4803 := &yyv4802
		yy4803.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4804 := *v
	yyh4804, yyl4804 := z.DecSliceHelperStart()
	var yyc4804 bool
	if yyl4804 == 0 {
		if yyv4804 == nil {
			yyv4804 = []ServicePort{}
			yyc4804 = true
		} else if len(yyv4804) != 0 {
			yyv4804 = yyv4804[:0]
			yyc4804 = true
		}
	} else if yyl4804 > 0 {
		var yyrr4804, yyrl4804 int
		var yyrt4804 bool
		if yyl4804 > cap(yyv4804) {

			yyrg4804 := len(yyv4804) > 0
			yyv24804 := yyv4804
			yyrl4804, yyrt4804 = z.DecInferLen(yyl4804, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4804 {
				if yyrl4804 <= cap(yyv4804) {
					yyv4804 = yyv4804[:yyrl4804]
				} else {
					yyv4804 = make([]ServicePort, yyrl4804)
				}
			} else {
				yyv4804 = make([]ServicePort, yyrl4804)
			}
			yyc4804 = true
			yyrr4804 = len(yyv4804)
			if yyrg4804 {
				copy(yyv4804, yyv24804)
			}
		} else if yyl4804 != len(yyv4804) {
			yyv4804 = yyv4804[:yyl4804]
			yyc4804 = true
		}
		yyj4804 := 0
		for ; yyj4804 < yyrr4804; yyj4804++ {
			yyh4804.ElemContainerState(yyj4804)
			if r.TryDecodeAsNil() {
				yyv4804[yyj4804] = ServicePort{}
			} else {
				yyv4805 := &yyv4804[yyj4804]
				yyv4805.CodecDecodeSelf(d)
			}

		}
		if yyrt4804 {
			for ; yyj4804 < yyl4804; yyj4804++ {
				yyv4804 = append(yyv4804, ServicePort{})
				yyh4804.ElemContainerState(yyj4804)
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = ServicePort{}
				} else {
					yyv4806 := &yyv4804[yyj4804]
					yyv4806.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4804 := 0
		for ; !r.CheckBreak(); yyj4804++ {

			if yyj4804 >= len(yyv4804) {
				yyv4804 = append(yyv4804, ServicePort{}) // var yyz4804 ServicePort
				yyc4804 = true
			}
			yyh4804.ElemContainerState(yyj4804)
			if yyj4804 < len(yyv4804) {
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = ServicePort{}
				} else {
					yyv4807 := &yyv4804[yyj4804]
					yyv4807.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4804 < len(yyv4804) {
			yyv4804 = yyv4804[:yyj4804]
			yyc4804 = true
		} else if yyj4804 == 0 && yyv4804 == nil {
			yyv4804 = []ServicePort{}
			yyc4804 = true
		}
	}
	yyh4804.End()
	if yyc4804 {
		*v = yyv4804
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4808 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4809 := &yyv4808
		yy4809.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4810 := *v
	yyh4810, yyl4810 := z.DecSliceHelperStart()
	var yyc4810 bool
	if yyl4810 == 0 {
		if yyv4810 == nil {
			yyv4810 = []ObjectReference{}
			yyc4810 = true
		} else if len(yyv4810) != 0 {
			yyv4810 = yyv4810[:0]
			yyc4810 = true
		}
	} else if yyl4810 > 0 {
		var yyrr4810, yyrl4810 int
		var yyrt4810 bool
		if yyl4810 > cap(yyv4810) {

			yyrg4810 := len(yyv4810) > 0
			yyv24810 := yyv4810
			yyrl4810, yyrt4810 = z.DecInferLen(yyl4810, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4810 {
				if yyrl4810 <= cap(yyv4810) {
					yyv4810 = yyv4810[:yyrl4810]
				} else {
					yyv4810 = make([]ObjectReference, yyrl4810)
				}
			} else {
				yyv4810 = make([]ObjectReference, yyrl4810)
			}
			yyc4810 = true
			yyrr4810 = len(yyv4810)
			if yyrg4810 {
				copy(yyv4810, yyv24810)
			}
		} else if yyl4810 != len(yyv4810) {
			yyv4810 = yyv4810[:yyl4810]
			yyc4810 = true
		}
		yyj4810 := 0
		for ; yyj4810 < yyrr4810; yyj4810++ {
			yyh4810.ElemContainerState(yyj4810)
			if r.TryDecodeAsNil() {
				yyv4810[yyj4810] = ObjectReference{}
			} else {
				yyv4811 := &yyv4810[yyj4810]
				yyv4811.CodecDecodeSelf(d)
			}

		}
		if yyrt4810 {
			for ; yyj4810 < yyl4810; yyj4810++ {
				yyv4810 = append(yyv4810, ObjectReference{})
				yyh4810.ElemContainerState(yyj4810)
				if r.TryDecodeAsNil() {
					yyv4810[yyj4810] = ObjectReference{}
				} else {
					yyv4812 := &yyv4810[yyj4810]
					yyv4812.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4810 := 0
		for ; !r.CheckBreak(); yyj4810++ {

			if yyj4810 >= len(yyv4810) {
				yyv4810 = append(yyv4810, ObjectReference{}) // var yyz4810 ObjectReference
				yyc4810 = true
			}
			yyh4810.ElemContainerState(yyj4810)
			if yyj4810 < len(yyv4810) {
				if r.TryDecodeAsNil() {
					yyv4810[yyj4810] = ObjectReference{}
				} else {
					yyv4813 := &yyv4810[yyj4810]
					yyv4813.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4810 < len(yyv4810) {
			yyv4810 = yyv4810[:yyj4810]
			yyc4810 = true
		} else if yyj4810 == 0 && yyv4810 == nil {
			yyv4810 = []ObjectReference{}
			yyc4810 = true
		}
	}
	yyh4810.End()
	if yyc4810 {
		*v = yyv4810
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4814 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4815 := &yyv4814
		yy4815.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4816 := *v
	yyh4816, yyl4816 := z.DecSliceHelperStart()
	var yyc4816 bool
	if yyl4816 == 0 {
		if yyv4816 == nil {
			yyv4816 = []ServiceAccount{}
			yyc4816 = true
		} else if len(yyv4816) != 0 {
			yyv4816 = yyv4816[:0]
			yyc4816 = true
		}
	} else if yyl4816 > 0 {
		var yyrr4816, yyrl4816 int
		var yyrt4816 bool
		if yyl4816 > cap(yyv4816) {

			yyrg4816 := len(yyv4816) > 0
			yyv24816 := yyv4816
			yyrl4816, yyrt4816 = z.DecInferLen(yyl4816, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4816 {
				if yyrl4816 <= cap(yyv4816) {
					yyv4816 = yyv4816[:yyrl4816]
				} else {
					yyv4816 = make([]ServiceAccount, yyrl4816)
				}
			} else {
				yyv4816 = make([]ServiceAccount, yyrl4816)
			}
			yyc4816 = true
			yyrr4816 = len(yyv4816)
			if yyrg4816 {
				copy(yyv4816, yyv24816)
			}
		} else if yyl4816 != len(yyv4816) {
			yyv4816 = yyv4816[:yyl4816]
			yyc4816 = true
		}
		yyj4816 := 0
		for ; yyj4816 < yyrr4816; yyj4816++ {
			yyh4816.ElemContainerState(yyj4816)
			if r.TryDecodeAsNil() {
				yyv4816[yyj4816] = ServiceAccount{}
			} else {
				yyv4817 := &yyv4816[yyj4816]
				yyv4817.CodecDecodeSelf(d)
			}

		}
		if yyrt4816 {
			for ; yyj4816 < yyl4816; yyj4816++ {
				yyv4816 = append(yyv4816, ServiceAccount{})
				yyh4816.ElemContainerState(yyj4816)
				if r.TryDecodeAsNil() {
					yyv4816[yyj4816] = ServiceAccount{}
				} else {
					yyv4818 := &yyv4816[yyj4816]
					yyv4818.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4816 := 0
		for ; !r.CheckBreak(); yyj4816++ {

			if yyj4816 >= len(yyv4816) {
				yyv4816 = append(yyv4816, ServiceAccount{}) // var yyz4816 ServiceAccount
				yyc4816 = true
			}
			yyh4816.ElemContainerState(yyj4816)
			if yyj4816 < len(yyv4816) {
				if r.TryDecodeAsNil() {
					yyv4816[yyj4816] = ServiceAccount{}
				} else {
					yyv4819 := &yyv4816[yyj4816]
					yyv4819.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4816 < len(yyv4816) {
			yyv4816 = yyv4816[:yyj4816]
			yyc4816 = true
		} else if yyj4816 == 0 && yyv4816 == nil {
			yyv4816 = []ServiceAccount{}
			yyc4816 = true
		}
	}
	yyh4816.End()
	if yyc4816 {
		*v = yyv4816
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4820 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4821 := &yyv4820
		yy4821.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4822 := *v
	yyh4822, yyl4822 := z.DecSliceHelperStart()
	var yyc4822 bool
	if yyl4822 == 0 {
		if yyv4822 == nil {
			yyv4822 = []EndpointSubset{}
			yyc4822 = true
		} else if len(yyv4822) != 0 {
			yyv4822 = yyv4822[:0]
			yyc4822 = true
		}
	} else if yyl4822 > 0 {
		var yyrr4822, yyrl4822 int
		var yyrt4822 bool
		if yyl4822 > cap(yyv4822) {

			yyrg4822 := len(yyv4822) > 0
			yyv24822 := yyv4822
			yyrl4822, yyrt4822 = z.DecInferLen(yyl4822, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4822 {
				if yyrl4822 <= cap(yyv4822) {
					yyv4822 = yyv4822[:yyrl4822]
				} else {
					yyv4822 = make([]EndpointSubset, yyrl4822)
				}
			} else {
				yyv4822 = make([]EndpointSubset, yyrl4822)
			}
			yyc4822 = true
			yyrr4822 = len(yyv4822)
			if yyrg4822 {
				copy(yyv4822, yyv24822)
			}
		} else if yyl4822 != len(yyv4822) {
			yyv4822 = yyv4822[:yyl4822]
			yyc4822 = true
		}
		yyj4822 := 0
		for ; yyj4822 < yyrr4822; yyj4822++ {
			yyh4822.ElemContainerState(yyj4822)
			if r.TryDecodeAsNil() {
				yyv4822[yyj4822] = EndpointSubset{}
			} else {
				yyv4823 := &yyv4822[yyj4822]
				yyv4823.CodecDecodeSelf(d)
			}

		}
		if yyrt4822 {
			for ; yyj4822 < yyl4822; yyj4822++ {
				yyv4822 = append(yyv4822, EndpointSubset{})
				yyh4822.ElemContainerState(yyj4822)
				if r.TryDecodeAsNil() {
					yyv4822[yyj4822] = EndpointSubset{}
				} else {
					yyv4824 := &yyv4822[yyj4822]
					yyv4824.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4822 := 0
		for ; !r.CheckBreak(); yyj4822++ {

			if yyj4822 >= len(yyv4822) {
				yyv4822 = append(yyv4822, EndpointSubset{}) // var yyz4822 EndpointSubset
				yyc4822 = true
			}
			yyh4822.ElemContainerState(yyj4822)
			if yyj4822 < len(yyv4822) {
				if r.TryDecodeAsNil() {
					yyv4822[yyj4822] = EndpointSubset{}
				} else {
					yyv4825 := &yyv4822[yyj4822]
					yyv4825.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4822 < len(yyv4822) {
			yyv4822 = yyv4822[:yyj4822]
			yyc4822 = true
		} else if yyj4822 == 0 && yyv4822 == nil {
			yyv4822 = []EndpointSubset{}
			yyc4822 = true
		}
	}
	yyh4822.End()
	if yyc4822 {
		*v = yyv4822
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4826 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4827 := &yyv4826
		yy4827.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4828 := *v
	yyh4828, yyl4828 := z.DecSliceHelperStart()
	var yyc4828 bool
	if yyl4828 == 0 {
		if yyv4828 == nil {
			yyv4828 = []EndpointAddress{}
			yyc4828 = true
		} else if len(yyv4828) != 0 {
			yyv4828 = yyv4828[:0]
			yyc4828 = true
		}
	} else if yyl4828 > 0 {
		var yyrr4828, yyrl4828 int
		var yyrt4828 bool
		if yyl4828 > cap(yyv4828) {

			yyrg4828 := len(yyv4828) > 0
			yyv24828 := yyv4828
			yyrl4828, yyrt4828 = z.DecInferLen(yyl4828, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4828 {
				if yyrl4828 <= cap(yyv4828) {
					yyv4828 = yyv4828[:yyrl4828]
				} else {
					yyv4828 = make([]EndpointAddress, yyrl4828)
				}
			} else {
				yyv4828 = make([]EndpointAddress, yyrl4828)
			}
			yyc4828 = true
			yyrr4828 = len(yyv4828)
			if yyrg4828 {
				copy(yyv4828, yyv24828)
			}
		} else if yyl4828 != len(yyv4828) {
			yyv4828 = yyv4828[:yyl4828]
			yyc4828 = true
		}
		yyj4828 := 0
		for ; yyj4828 < yyrr4828; yyj4828++ {
			yyh4828.ElemContainerState(yyj4828)
			if r.TryDecodeAsNil() {
				yyv4828[yyj4828] = EndpointAddress{}
			} else {
				yyv4829 := &yyv4828[yyj4828]
				yyv4829.CodecDecodeSelf(d)
			}

		}
		if yyrt4828 {
			for ; yyj4828 < yyl4828; yyj4828++ {
				yyv4828 = append(yyv4828, EndpointAddress{})
				yyh4828.ElemContainerState(yyj4828)
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = EndpointAddress{}
				} else {
					yyv4830 := &yyv4828[yyj4828]
					yyv4830.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4828 := 0
		for ; !r.CheckBreak(); yyj4828++ {

			if yyj4828 >= len(yyv4828) {
				yyv4828 = append(yyv4828, EndpointAddress{}) // var yyz4828 EndpointAddress
				yyc4828 = true
			}
			yyh4828.ElemContainerState(yyj4828)
			if yyj4828 < len(yyv4828) {
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = EndpointAddress{}
				} else {
					yyv4831 := &yyv4828[yyj4828]
					yyv4831.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4828 < len(yyv4828) {
			yyv4828 = yyv4828[:yyj4828]
			yyc4828 = true
		} else if yyj4828 == 0 && yyv4828 == nil {
			yyv4828 = []EndpointAddress{}
			yyc4828 = true
		}
	}
	yyh4828.End()
	if yyc4828 {
		*v = yyv4828
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4832 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4833 := &yyv4832
		yy4833.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4834 := *v
	yyh4834, yyl4834 := z.DecSliceHelperStart()
	var yyc4834 bool
	if yyl4834 == 0 {
		if yyv4834 == nil {
			yyv4834 = []EndpointPort{}
			yyc4834 = true
		} else if len(yyv4834) != 0 {
			yyv4834 = yyv4834[:0]
			yyc4834 = true
		}
	} else if yyl4834 > 0 {
		var yyrr4834, yyrl4834 int
		var yyrt4834 bool
		if yyl4834 > cap(yyv4834) {

			yyrg4834 := len(yyv4834) > 0
			yyv24834 := yyv4834
			yyrl4834, yyrt4834 = z.DecInferLen(yyl4834, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4834 {
				if yyrl4834 <= cap(yyv4834) {
					yyv4834 = yyv4834[:yyrl4834]
				} else {
					yyv4834 = make([]EndpointPort, yyrl4834)
				}
			} else {
				yyv4834 = make([]EndpointPort, yyrl4834)
			}
			yyc4834 = true
			yyrr4834 = len(yyv4834)
			if yyrg4834 {
				copy(yyv4834, yyv24834)
			}
		} else if yyl4834 != len(yyv4834) {
			yyv4834 = yyv4834[:yyl4834]
			yyc4834 = true
		}
		yyj4834 := 0
		for ; yyj4834 < yyrr4834; yyj4834++ {
			yyh4834.ElemContainerState(yyj4834)
			if r.TryDecodeAsNil() {
				yyv4834[yyj4834] = EndpointPort{}
			} else {
				yyv4835 := &yyv4834[yyj4834]
				yyv4835.CodecDecodeSelf(d)
			}

		}
		if yyrt4834 {
			for ; yyj4834 < yyl4834; yyj4834++ {
				yyv4834 = append(yyv4834, EndpointPort{})
				yyh4834.ElemContainerState(yyj4834)
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = EndpointPort{}
				} else {
					yyv4836 := &yyv4834[yyj4834]
					yyv4836.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4834 := 0
		for ; !r.CheckBreak(); yyj4834++ {

			if yyj4834 >= len(yyv4834) {
				yyv4834 = append(yyv4834, EndpointPort{}) // var yyz4834 EndpointPort
				yyc4834 = true
			}
			yyh4834.ElemContainerState(yyj4834)
			if yyj4834 < len(yyv4834) {
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = EndpointPort{}
				} else {
					yyv4837 := &yyv4834[yyj4834]
					yyv4837.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4834 < len(yyv4834) {
			yyv4834 = yyv4834[:yyj4834]
			yyc4834 = true
		} else if yyj4834 == 0 && yyv4834 == nil {
			yyv4834 = []EndpointPort{}
			yyc4834 = true
		}
	}
	yyh4834.End()
	if yyc4834 {
		*v = yyv4834
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4838 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4839 := &yyv4838
		yy4839.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4840 := *v
	yyh4840, yyl4840 := z.DecSliceHelperStart()
	var yyc4840 bool
	if yyl4840 == 0 {
		if yyv4840 == nil {
			yyv4840 = []Endpoints{}
			yyc4840 = true
		} else if len(yyv4840) != 0 {
			yyv4840 = yyv4840[:0]
			yyc4840 = true
		}
	} else if yyl4840 > 0 {
		var yyrr4840, yyrl4840 int
		var yyrt4840 bool
		if yyl4840 > cap(yyv4840) {

			yyrg4840 := len(yyv4840) > 0
			yyv24840 := yyv4840
			yyrl4840, yyrt4840 = z.DecInferLen(yyl4840, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4840 {
				if yyrl4840 <= cap(yyv4840) {
					yyv4840 = yyv4840[:yyrl4840]
				} else {
					yyv4840 = make([]Endpoints, yyrl4840)
				}
			} else {
				yyv4840 = make([]Endpoints, yyrl4840)
			}
			yyc4840 = true
			yyrr4840 = len(yyv4840)
			if yyrg4840 {
				copy(yyv4840, yyv24840)
			}
		} else if yyl4840 != len(yyv4840) {
			yyv4840 = yyv4840[:yyl4840]
			yyc4840 = true
		}
		yyj4840 := 0
		for ; yyj4840 < yyrr4840; yyj4840++ {
			yyh4840.ElemContainerState(yyj4840)
			if r.TryDecodeAsNil() {
				yyv4840[yyj4840] = Endpoints{}
			} else {
				yyv4841 := &yyv4840[yyj4840]
				yyv4841.CodecDecodeSelf(d)
			}

		}
		if yyrt4840 {
			for ; yyj4840 < yyl4840; yyj4840++ {
				yyv4840 = append(yyv4840, Endpoints{})
				yyh4840.ElemContainerState(yyj4840)
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = Endpoints{}
				} else {
					yyv4842 := &yyv4840[yyj4840]
					yyv4842.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4840 := 0
		for ; !r.CheckBreak(); yyj4840++ {

			if yyj4840 >= len(yyv4840) {
				yyv4840 = append(yyv4840, Endpoints{}) // var yyz4840 Endpoints
				yyc4840 = true
			}
			yyh4840.ElemContainerState(yyj4840)
			if yyj4840 < len(yyv4840) {
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = Endpoints{}
				} else {
					yyv4843 := &yyv4840[yyj4840]
					yyv4843.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4840 < len(yyv4840) {
			yyv4840 = yyv4840[:yyj4840]
			yyc4840 = true
		} else if yyj4840 == 0 && yyv4840 == nil {
			yyv4840 = []Endpoints{}
			yyc4840 = true
		}
	}
	yyh4840.End()
	if yyc4840 {
		*v = yyv4840
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4844 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4845 := &yyv4844
		yy4845.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4846 := *v
	yyh4846, yyl4846 := z.DecSliceHelperStart()
	var yyc4846 bool
	if yyl4846 == 0 {
		if yyv4846 == nil {
			yyv4846 = []NodeCondition{}
			yyc4846 = true
		} else if len(yyv4846) != 0 {
			yyv4846 = yyv4846[:0]
			yyc4846 = true
		}
	} else if yyl4846 > 0 {
		var yyrr4846, yyrl4846 int
		var yyrt4846 bool
		if yyl4846 > cap(yyv4846) {

			yyrg4846 := len(yyv4846) > 0
			yyv24846 := yyv4846
			yyrl4846, yyrt4846 = z.DecInferLen(yyl4846, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4846 {
				if yyrl4846 <= cap(yyv4846) {
					yyv4846 = yyv4846[:yyrl4846]
				} else {
					yyv4846 = make([]NodeCondition, yyrl4846)
				}
			} else {
				yyv4846 = make([]NodeCondition, yyrl4846)
			}
			yyc4846 = true
			yyrr4846 = len(yyv4846)
			if yyrg4846 {
				copy(yyv4846, yyv24846)
			}
		} else if yyl4846 != len(yyv4846) {
			yyv4846 = yyv4846[:yyl4846]
			yyc4846 = true
		}
		yyj4846 := 0
		for ; yyj4846 < yyrr4846; yyj4846++ {
			yyh4846.ElemContainerState(yyj4846)
			if r.TryDecodeAsNil() {
				yyv4846[yyj4846] = NodeCondition{}
			} else {
				yyv4847 := &yyv4846[yyj4846]
				yyv4847.CodecDecodeSelf(d)
			}

		}
		if yyrt4846 {
			for ; yyj4846 < yyl4846; yyj4846++ {
				yyv4846 = append(yyv4846, NodeCondition{})
				yyh4846.ElemContainerState(yyj4846)
				if r.TryDecodeAsNil() {
					yyv4846[yyj4846] = NodeCondition{}
				} else {
					yyv4848 := &yyv4846[yyj4846]
					yyv4848.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4846 := 0
		for ; !r.CheckBreak(); yyj4846++ {

			if yyj4846 >= len(yyv4846) {
				yyv4846 = append(yyv4846, NodeCondition{}) // var yyz4846 NodeCondition
				yyc4846 = true
			}
			yyh4846.ElemContainerState(yyj4846)
			if yyj4846 < len(yyv4846) {
				if r.TryDecodeAsNil() {
					yyv4846[yyj4846] = NodeCondition{}
				} else {
					yyv4849 := &yyv4846[yyj4846]
					yyv4849.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4846 < len(yyv4846) {
			yyv4846 = yyv4846[:yyj4846]
			yyc4846 = true
		} else if yyj4846 == 0 && yyv4846 == nil {
			yyv4846 = []NodeCondition{}
			yyc4846 = true
		}
	}
	yyh4846.End()
	if yyc4846 {
		*v = yyv4846
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4850 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4851 := &yyv4850
		yy4851.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4852 := *v
	yyh4852, yyl4852 := z.DecSliceHelperStart()
	var yyc4852 bool
	if yyl4852 == 0 {
		if yyv4852 == nil {
			yyv4852 = []NodeAddress{}
			yyc4852 = true
		} else if len(yyv4852) != 0 {
			yyv4852 = yyv4852[:0]
			yyc4852 = true
		}
	} else if yyl4852 > 0 {
		var yyrr4852, yyrl4852 int
		var yyrt4852 bool
		if yyl4852 > cap(yyv4852) {

			yyrg4852 := len(yyv4852) > 0
			yyv24852 := yyv4852
			yyrl4852, yyrt4852 = z.DecInferLen(yyl4852, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4852 {
				if yyrl4852 <= cap(yyv4852) {
					yyv4852 = yyv4852[:yyrl4852]
				} else {
					yyv4852 = make([]NodeAddress, yyrl4852)
				}
			} else {
				yyv4852 = make([]NodeAddress, yyrl4852)
			}
			yyc4852 = true
			yyrr4852 = len(yyv4852)
			if yyrg4852 {
				copy(yyv4852, yyv24852)
			}
		} else if yyl4852 != len(yyv4852) {
			yyv4852 = yyv4852[:yyl4852]
			yyc4852 = true
		}
		yyj4852 := 0
		for ; yyj4852 < yyrr4852; yyj4852++ {
			yyh4852.ElemContainerState(yyj4852)
			if r.TryDecodeAsNil() {
				yyv4852[yyj4852] = NodeAddress{}
			} else {
				yyv4853 := &yyv4852[yyj4852]
				yyv4853.CodecDecodeSelf(d)
			}

		}
		if yyrt4852 {
			for ; yyj4852 < yyl4852; yyj4852++ {
				yyv4852 = append(yyv4852, NodeAddress{})
				yyh4852.ElemContainerState(yyj4852)
				if r.TryDecodeAsNil() {
					yyv4852[yyj4852] = NodeAddress{}
				} else {
					yyv4854 := &yyv4852[yyj4852]
					yyv4854.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4852 := 0
		for ; !r.CheckBreak(); yyj4852++ {

			if yyj4852 >= len(yyv4852) {
				yyv4852 = append(yyv4852, NodeAddress{}) // var yyz4852 NodeAddress
				yyc4852 = true
			}
			yyh4852.ElemContainerState(yyj4852)
			if yyj4852 < len(yyv4852) {
				if r.TryDecodeAsNil() {
					yyv4852[yyj4852] = NodeAddress{}
				} else {
					yyv4855 := &yyv4852[yyj4852]
					yyv4855.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4852 < len(yyv4852) {
			yyv4852 = yyv4852[:yyj4852]
			yyc4852 = true
		} else if yyj4852 == 0 && yyv4852 == nil {
			yyv4852 = []NodeAddress{}
			yyc4852 = true
		}
	}
	yyh4852.End()
	if yyc4852 {
		*v = yyv4852
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4856 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4857 := &yyv4856
		yy4857.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4858 := *v
	yyh4858, yyl4858 := z.DecSliceHelperStart()
	var yyc4858 bool
	if yyl4858 == 0 {
		if yyv4858 == nil {
			yyv4858 = []ContainerImage{}
			yyc4858 = true
		} else if len(yyv4858) != 0 {
			yyv4858 = yyv4858[:0]
			yyc4858 = true
		}
	} else if yyl4858 > 0 {
		var yyrr4858, yyrl4858 int
		var yyrt4858 bool
		if yyl4858 > cap(yyv4858) {

			yyrg4858 := len(yyv4858) > 0
			yyv24858 := yyv4858
			yyrl4858, yyrt4858 = z.DecInferLen(yyl4858, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4858 {
				if yyrl4858 <= cap(yyv4858) {
					yyv4858 = yyv4858[:yyrl4858]
				} else {
					yyv4858 = make([]ContainerImage, yyrl4858)
				}
			} else {
				yyv4858 = make([]ContainerImage, yyrl4858)
			}
			yyc4858 = true
			yyrr4858 = len(yyv4858)
			if yyrg4858 {
				copy(yyv4858, yyv24858)
			}
		} else if yyl4858 != len(yyv4858) {
			yyv4858 = yyv4858[:yyl4858]
			yyc4858 = true
		}
		yyj4858 := 0
		for ; yyj4858 < yyrr4858; yyj4858++ {
			yyh4858.ElemContainerState(yyj4858)
			if r.TryDecodeAsNil() {
				yyv4858[yyj4858] = ContainerImage{}
			} else {
				yyv4859 := &yyv4858[yyj4858]
				yyv4859.CodecDecodeSelf(d)
			}

		}
		if yyrt4858 {
			for ; yyj4858 < yyl4858; yyj4858++ {
				yyv4858 = append(yyv4858, ContainerImage{})
				yyh4858.ElemContainerState(yyj4858)
				if r.TryDecodeAsNil() {
					yyv4858[yyj4858] = ContainerImage{}
				} else {
					yyv4860 := &yyv4858[yyj4858]
					yyv4860.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4858 := 0
		for ; !r.CheckBreak(); yyj4858++ {

			if yyj4858 >= len(yyv4858) {
				yyv4858 = append(yyv4858, ContainerImage{}) // var yyz4858 ContainerImage
				yyc4858 = true
			}
			yyh4858.ElemContainerState(yyj4858)
			if yyj4858 < len(yyv4858) {
				if r.TryDecodeAsNil() {
					yyv4858[yyj4858] = ContainerImage{}
				} else {
					yyv4861 := &yyv4858[yyj4858]
					yyv4861.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4858 < len(yyv4858) {
			yyv4858 = yyv4858[:yyj4858]
			yyc4858 = true
		} else if yyj4858 == 0 && yyv4858 == nil {
			yyv4858 = []ContainerImage{}
			yyc4858 = true
		}
	}
	yyh4858.End()
	if yyc4858 {
		*v = yyv4858
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4862 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4862.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4863 := *v
	yyh4863, yyl4863 := z.DecSliceHelperStart()
	var yyc4863 bool
	if yyl4863 == 0 {
		if yyv4863 == nil {
			yyv4863 = []UniqueVolumeName{}
			yyc4863 = true
		} else if len(yyv4863) != 0 {
			yyv4863 = yyv4863[:0]
			yyc4863 = true
		}
	} else if yyl4863 > 0 {
		var yyrr4863, yyrl4863 int
		var yyrt4863 bool
		if yyl4863 > cap(yyv4863) {

			yyrl4863, yyrt4863 = z.DecInferLen(yyl4863, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4863 {
				if yyrl4863 <= cap(yyv4863) {
					yyv4863 = yyv4863[:yyrl4863]
				} else {
					yyv4863 = make([]UniqueVolumeName, yyrl4863)
				}
			} else {
				yyv4863 = make([]UniqueVolumeName, yyrl4863)
			}
			yyc4863 = true
			yyrr4863 = len(yyv4863)
		} else if yyl4863 != len(yyv4863) {
			yyv4863 = yyv4863[:yyl4863]
			yyc4863 = true
		}
		yyj4863 := 0
		for ; yyj4863 < yyrr4863; yyj4863++ {
			yyh4863.ElemContainerState(yyj4863)
			if r.TryDecodeAsNil() {
				yyv4863[yyj4863] = ""
			} else {
				yyv4863[yyj4863] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4863 {
			for ; yyj4863 < yyl4863; yyj4863++ {
				yyv4863 = append(yyv4863, "")
				yyh4863.ElemContainerState(yyj4863)
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = ""
				} else {
					yyv4863[yyj4863] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4863 := 0
		for ; !r.CheckBreak(); yyj4863++ {

			if yyj4863 >= len(yyv4863) {
				yyv4863 = append(yyv4863, "") // var yyz4863 UniqueVolumeName
				yyc4863 = true
			}
			yyh4863.ElemContainerState(yyj4863)
			if yyj4863 < len(yyv4863) {
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = ""
				} else {
					yyv4863[yyj4863] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4863 < len(yyv4863) {
			yyv4863 = yyv4863[:yyj4863]
			yyc4863 = true
		} else if yyj4863 == 0 && yyv4863 == nil {
			yyv4863 = []UniqueVolumeName{}
			yyc4863 = true
		}
	}
	yyh4863.End()
	if yyc4863 {
		*v = yyv4863
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4867 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4868 := &yyv4867
		yy4868.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4869 := *v
	yyh4869, yyl4869 := z.DecSliceHelperStart()
	var yyc4869 bool
	if yyl4869 == 0 {
		if yyv4869 == nil {
			yyv4869 = []AttachedVolume{}
			yyc4869 = true
		} else if len(yyv4869) != 0 {
			yyv4869 = yyv4869[:0]
			yyc4869 = true
		}
	} else if yyl4869 > 0 {
		var yyrr4869, yyrl4869 int
		var yyrt4869 bool
		if yyl4869 > cap(yyv4869) {

			yyrg4869 := len(yyv4869) > 0
			yyv24869 := yyv4869
			yyrl4869, yyrt4869 = z.DecInferLen(yyl4869, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4869 {
				if yyrl4869 <= cap(yyv4869) {
					yyv4869 = yyv4869[:yyrl4869]
				} else {
					yyv4869 = make([]AttachedVolume, yyrl4869)
				}
			} else {
				yyv4869 = make([]AttachedVolume, yyrl4869)
			}
			yyc4869 = true
			yyrr4869 = len(yyv4869)
			if yyrg4869 {
				copy(yyv4869, yyv24869)
			}
		} else if yyl4869 != len(yyv4869) {
			yyv4869 = yyv4869[:yyl4869]
			yyc4869 = true
		}
		yyj4869 := 0
		for ; yyj4869 < yyrr4869; yyj4869++ {
			yyh4869.ElemContainerState(yyj4869)
			if r.TryDecodeAsNil() {
				yyv4869[yyj4869] = AttachedVolume{}
			} else {
				yyv4870 := &yyv4869[yyj4869]
				yyv4870.CodecDecodeSelf(d)
			}

		}
		if yyrt4869 {
			for ; yyj4869 < yyl4869; yyj4869++ {
				yyv4869 = append(yyv4869, AttachedVolume{})
				yyh4869.ElemContainerState(yyj4869)
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = AttachedVolume{}
				} else {
					yyv4871 := &yyv4869[yyj4869]
					yyv4871.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4869 := 0
		for ; !r.CheckBreak(); yyj4869++ {

			if yyj4869 >= len(yyv4869) {
				yyv4869 = append(yyv4869, AttachedVolume{}) // var yyz4869 AttachedVolume
				yyc4869 = true
			}
			yyh4869.ElemContainerState(yyj4869)
			if yyj4869 < len(yyv4869) {
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = AttachedVolume{}
				} else {
					yyv4872 := &yyv4869[yyj4869]
					yyv4872.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4869 < len(yyv4869) {
			yyv4869 = yyv4869[:yyj4869]
			yyc4869 = true
		} else if yyj4869 == 0 && yyv4869 == nil {
			yyv4869 = []AttachedVolume{}
			yyc4869 = true
		}
	}
	yyh4869.End()
	if yyc4869 {
		*v = yyv4869
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4873 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4874 := &yyv4873
		yy4874.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4875 := *v
	yyh4875, yyl4875 := z.DecSliceHelperStart()
	var yyc4875 bool
	if yyl4875 == 0 {
		if yyv4875 == nil {
			yyv4875 = []PreferAvoidPodsEntry{}
			yyc4875 = true
		} else if len(yyv4875) != 0 {
			yyv4875 = yyv4875[:0]
			yyc4875 = true
		}
	} else if yyl4875 > 0 {
		var yyrr4875, yyrl4875 int
		var yyrt4875 bool
		if yyl4875 > cap(yyv4875) {

			yyrg4875 := len(yyv4875) > 0
			yyv24875 := yyv4875
			yyrl4875, yyrt4875 = z.DecInferLen(yyl4875, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4875 {
				if yyrl4875 <= cap(yyv4875) {
					yyv4875 = yyv4875[:yyrl4875]
				} else {
					yyv4875 = make([]PreferAvoidPodsEntry, yyrl4875)
				}
			} else {
				yyv4875 = make([]PreferAvoidPodsEntry, yyrl4875)
			}
			yyc4875 = true
			yyrr4875 = len(yyv4875)
			if yyrg4875 {
				copy(yyv4875, yyv24875)
			}
		} else if yyl4875 != len(yyv4875) {
			yyv4875 = yyv4875[:yyl4875]
			yyc4875 = true
		}
		yyj4875 := 0
		for ; yyj4875 < yyrr4875; yyj4875++ {
			yyh4875.ElemContainerState(yyj4875)
			if r.TryDecodeAsNil() {
				yyv4875[yyj4875] = PreferAvoidPodsEntry{}
			} else {
				yyv4876 := &yyv4875[yyj4875]
				yyv4876.CodecDecodeSelf(d)
			}

		}
		if yyrt4875 {
			for ; yyj4875 < yyl4875; yyj4875++ {
				yyv4875 = append(yyv4875, PreferAvoidPodsEntry{})
				yyh4875.ElemContainerState(yyj4875)
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = PreferAvoidPodsEntry{}
				} else {
					yyv4877 := &yyv4875[yyj4875]
					yyv4877.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4875 := 0
		for ; !r.CheckBreak(); yyj4875++ {

			if yyj4875 >= len(yyv4875) {
				yyv4875 = append(yyv4875, PreferAvoidPodsEntry{}) // var yyz4875 PreferAvoidPodsEntry
				yyc4875 = true
			}
			yyh4875.ElemContainerState(yyj4875)
			if yyj4875 < len(yyv4875) {
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = PreferAvoidPodsEntry{}
				} else {
					yyv4878 := &yyv4875[yyj4875]
					yyv4878.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4875 < len(yyv4875) {
			yyv4875 = yyv4875[:yyj4875]
			yyc4875 = true
		} else if yyj4875 == 0 && yyv4875 == nil {
			yyv4875 = []PreferAvoidPodsEntry{}
			yyc4875 = true
		}
	}
	yyh4875.End()
	if yyc4875 {
		*v = yyv4875
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4879, yyv4879 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4879.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4880 := &yyv4879
		yym4881 := z.EncBinary()
		_ = yym4881
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4880) {
		} else if !yym4881 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4880)
		} else {
			z.EncFallback(yy4880)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4882 := *v
	yyl4882 := r.ReadMapStart()
	yybh4882 := z.DecBasicHandle()
	if yyv4882 == nil {
		yyrl4882, _ := z.DecInferLen(yyl4882, yybh4882.MaxInitLen, 72)
		yyv4882 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4882)
		*v = yyv4882
	}
	var yymk4882 ResourceName
	var yymv4882 pkg3_resource.Quantity
	var yymg4882 bool
	if yybh4882.MapValueReset {
		yymg4882 = true
	}
	if yyl4882 > 0 {
		for yyj4882 := 0; yyj4882 < yyl4882; yyj4882++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4882 = ""
			} else {
				yymk4882 = ResourceName(r.DecodeString())
			}

			if yymg4882 {
				yymv4882 = yyv4882[yymk4882]
			} else {
				yymv4882 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4882 = pkg3_resource.Quantity{}
			} else {
				yyv4884 := &yymv4882
				yym4885 := z.DecBinary()
				_ = yym4885
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4884) {
				} else if !yym4885 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4884)
				} else {
					z.DecFallback(yyv4884, false)
				}
			}

			if yyv4882 != nil {
				yyv4882[yymk4882] = yymv4882
			}
		}
	} else if yyl4882 < 0 {
		for yyj4882 := 0; !r.CheckBreak(); yyj4882++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4882 = ""
			} else {
				yymk4882 = ResourceName(r.DecodeString())
			}

			if yymg4882 {
				yymv4882 = yyv4882[yymk4882]
			} else {
				yymv4882 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4882 = pkg3_resource.Quantity{}
			} else {
				yyv4887 := &yymv4882
				yym4888 := z.DecBinary()
				_ = yym4888
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4887) {
				} else if !yym4888 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4887)
				} else {
					z.DecFallback(yyv4887, false)
				}
			}

			if yyv4882 != nil {
				yyv4882[yymk4882] = yymv4882
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4889 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4890 := &yyv4889
		yy4890.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4891 := *v
	yyh4891, yyl4891 := z.DecSliceHelperStart()
	var yyc4891 bool
	if yyl4891 == 0 {
		if yyv4891 == nil {
			yyv4891 = []Node{}
			yyc4891 = true
		} else if len(yyv4891) != 0 {
			yyv4891 = yyv4891[:0]
			yyc4891 = true
		}
	} else if yyl4891 > 0 {
		var yyrr4891, yyrl4891 int
		var yyrt4891 bool
		if yyl4891 > cap(yyv4891) {

			yyrg4891 := len(yyv4891) > 0
			yyv24891 := yyv4891
			yyrl4891, yyrt4891 = z.DecInferLen(yyl4891, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4891 {
				if yyrl4891 <= cap(yyv4891) {
					yyv4891 = yyv4891[:yyrl4891]
				} else {
					yyv4891 = make([]Node, yyrl4891)
				}
			} else {
				yyv4891 = make([]Node, yyrl4891)
			}
			yyc4891 = true
			yyrr4891 = len(yyv4891)
			if yyrg4891 {
				copy(yyv4891, yyv24891)
			}
		} else if yyl4891 != len(yyv4891) {
			yyv4891 = yyv4891[:yyl4891]
			yyc4891 = true
		}
		yyj4891 := 0
		for ; yyj4891 < yyrr4891; yyj4891++ {
			yyh4891.ElemContainerState(yyj4891)
			if r.TryDecodeAsNil() {
				yyv4891[yyj4891] = Node{}
			} else {
				yyv4892 := &yyv4891[yyj4891]
				yyv4892.CodecDecodeSelf(d)
			}

		}
		if yyrt4891 {
			for ; yyj4891 < yyl4891; yyj4891++ {
				yyv4891 = append(yyv4891, Node{})
				yyh4891.ElemContainerState(yyj4891)
				if r.TryDecodeAsNil() {
					yyv4891[yyj4891] = Node{}
				} else {
					yyv4893 := &yyv4891[yyj4891]
					yyv4893.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4891 := 0
		for ; !r.CheckBreak(); yyj4891++ {

			if yyj4891 >= len(yyv4891) {
				yyv4891 = append(yyv4891, Node{}) // var yyz4891 Node
				yyc4891 = true
			}
			yyh4891.ElemContainerState(yyj4891)
			if yyj4891 < len(yyv4891) {
				if r.TryDecodeAsNil() {
					yyv4891[yyj4891] = Node{}
				} else {
					yyv4894 := &yyv4891[yyj4891]
					yyv4894.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4891 < len(yyv4891) {
			yyv4891 = yyv4891[:yyj4891]
			yyc4891 = true
		} else if yyj4891 == 0 && yyv4891 == nil {
			yyv4891 = []Node{}
			yyc4891 = true
		}
	}
	yyh4891.End()
	if yyc4891 {
		*v = yyv4891
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4895 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4895.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4896 := *v
	yyh4896, yyl4896 := z.DecSliceHelperStart()
	var yyc4896 bool
	if yyl4896 == 0 {
		if yyv4896 == nil {
			yyv4896 = []FinalizerName{}
			yyc4896 = true
		} else if len(yyv4896) != 0 {
			yyv4896 = yyv4896[:0]
			yyc4896 = true
		}
	} else if yyl4896 > 0 {
		var yyrr4896, yyrl4896 int
		var yyrt4896 bool
		if yyl4896 > cap(yyv4896) {

			yyrl4896, yyrt4896 = z.DecInferLen(yyl4896, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4896 {
				if yyrl4896 <= cap(yyv4896) {
					yyv4896 = yyv4896[:yyrl4896]
				} else {
					yyv4896 = make([]FinalizerName, yyrl4896)
				}
			} else {
				yyv4896 = make([]FinalizerName, yyrl4896)
			}
			yyc4896 = true
			yyrr4896 = len(yyv4896)
		} else if yyl4896 != len(yyv4896) {
			yyv4896 = yyv4896[:yyl4896]
			yyc4896 = true
		}
		yyj4896 := 0
		for ; yyj4896 < yyrr4896; yyj4896++ {
			yyh4896.ElemContainerState(yyj4896)
			if r.TryDecodeAsNil() {
				yyv4896[yyj4896] = ""
			} else {
				yyv4896[yyj4896] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4896 {
			for ; yyj4896 < yyl4896; yyj4896++ {
				yyv4896 = append(yyv4896, "")
				yyh4896.ElemContainerState(yyj4896)
				if r.TryDecodeAsNil() {
					yyv4896[yyj4896] = ""
				} else {
					yyv4896[yyj4896] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4896 := 0
		for ; !r.CheckBreak(); yyj4896++ {

			if yyj4896 >= len(yyv4896) {
				yyv4896 = append(yyv4896, "") // var yyz4896 FinalizerName
				yyc4896 = true
			}
			yyh4896.ElemContainerState(yyj4896)
			if yyj4896 < len(yyv4896) {
				if r.TryDecodeAsNil() {
					yyv4896[yyj4896] = ""
				} else {
					yyv4896[yyj4896] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4896 < len(yyv4896) {
			yyv4896 = yyv4896[:yyj4896]
			yyc4896 = true
		} else if yyj4896 == 0 && yyv4896 == nil {
			yyv4896 = []FinalizerName{}
			yyc4896 = true
		}
	}
	yyh4896.End()
	if yyc4896 {
		*v = yyv4896
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4900 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4901 := &yyv4900
		yy4901.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4902 := *v
	yyh4902, yyl4902 := z.DecSliceHelperStart()
	var yyc4902 bool
	if yyl4902 == 0 {
		if yyv4902 == nil {
			yyv4902 = []Namespace{}
			yyc4902 = true
		} else if len(yyv4902) != 0 {
			yyv4902 = yyv4902[:0]
			yyc4902 = true
		}
	} else if yyl4902 > 0 {
		var yyrr4902, yyrl4902 int
		var yyrt4902 bool
		if yyl4902 > cap(yyv4902) {

			yyrg4902 := len(yyv4902) > 0
			yyv24902 := yyv4902
			yyrl4902, yyrt4902 = z.DecInferLen(yyl4902, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4902 {
				if yyrl4902 <= cap(yyv4902) {
					yyv4902 = yyv4902[:yyrl4902]
				} else {
					yyv4902 = make([]Namespace, yyrl4902)
				}
			} else {
				yyv4902 = make([]Namespace, yyrl4902)
			}
			yyc4902 = true
			yyrr4902 = len(yyv4902)
			if yyrg4902 {
				copy(yyv4902, yyv24902)
			}
		} else if yyl4902 != len(yyv4902) {
			yyv4902 = yyv4902[:yyl4902]
			yyc4902 = true
		}
		yyj4902 := 0
		for ; yyj4902 < yyrr4902; yyj4902++ {
			yyh4902.ElemContainerState(yyj4902)
			if r.TryDecodeAsNil() {
				yyv4902[yyj4902] = Namespace{}
			} else {
				yyv4903 := &yyv4902[yyj4902]
				yyv4903.CodecDecodeSelf(d)
			}

		}
		if yyrt4902 {
			for ; yyj4902 < yyl4902; yyj4902++ {
				yyv4902 = append(yyv4902, Namespace{})
				yyh4902.ElemContainerState(yyj4902)
				if r.TryDecodeAsNil() {
					yyv4902[yyj4902] = Namespace{}
				} else {
					yyv4904 := &yyv4902[yyj4902]
					yyv4904.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4902 := 0
		for ; !r.CheckBreak(); yyj4902++ {

			if yyj4902 >= len(yyv4902) {
				yyv4902 = append(yyv4902, Namespace{}) // var yyz4902 Namespace
				yyc4902 = true
			}
			yyh4902.ElemContainerState(yyj4902)
			if yyj4902 < len(yyv4902) {
				if r.TryDecodeAsNil() {
					yyv4902[yyj4902] = Namespace{}
				} else {
					yyv4905 := &yyv4902[yyj4902]
					yyv4905.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4902 < len(yyv4902) {
			yyv4902 = yyv4902[:yyj4902]
			yyc4902 = true
		} else if yyj4902 == 0 && yyv4902 == nil {
			yyv4902 = []Namespace{}
			yyc4902 = true
		}
	}
	yyh4902.End()
	if yyc4902 {
		*v = yyv4902
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4906 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4907 := &yyv4906
		yy4907.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4908 := *v
	yyh4908, yyl4908 := z.DecSliceHelperStart()
	var yyc4908 bool
	if yyl4908 == 0 {
		if yyv4908 == nil {
			yyv4908 = []Event{}
			yyc4908 = true
		} else if len(yyv4908) != 0 {
			yyv4908 = yyv4908[:0]
			yyc4908 = true
		}
	} else if yyl4908 > 0 {
		var yyrr4908, yyrl4908 int
		var yyrt4908 bool
		if yyl4908 > cap(yyv4908) {

			yyrg4908 := len(yyv4908) > 0
			yyv24908 := yyv4908
			yyrl4908, yyrt4908 = z.DecInferLen(yyl4908, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4908 {
				if yyrl4908 <= cap(yyv4908) {
					yyv4908 = yyv4908[:yyrl4908]
				} else {
					yyv4908 = make([]Event, yyrl4908)
				}
			} else {
				yyv4908 = make([]Event, yyrl4908)
			}
			yyc4908 = true
			yyrr4908 = len(yyv4908)
			if yyrg4908 {
				copy(yyv4908, yyv24908)
			}
		} else if yyl4908 != len(yyv4908) {
			yyv4908 = yyv4908[:yyl4908]
			yyc4908 = true
		}
		yyj4908 := 0
		for ; yyj4908 < yyrr4908; yyj4908++ {
			yyh4908.ElemContainerState(yyj4908)
			if r.TryDecodeAsNil() {
				yyv4908[yyj4908] = Event{}
			} else {
				yyv4909 := &yyv4908[yyj4908]
				yyv4909.CodecDecodeSelf(d)
			}

		}
		if yyrt4908 {
			for ; yyj4908 < yyl4908; yyj4908++ {
				yyv4908 = append(yyv4908, Event{})
				yyh4908.ElemContainerState(yyj4908)
				if r.TryDecodeAsNil() {
					yyv4908[yyj4908] = Event{}
				} else {
					yyv4910 := &yyv4908[yyj4908]
					yyv4910.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4908 := 0
		for ; !r.CheckBreak(); yyj4908++ {

			if yyj4908 >= len(yyv4908) {
				yyv4908 = append(yyv4908, Event{}) // var yyz4908 Event
				yyc4908 = true
			}
			yyh4908.ElemContainerState(yyj4908)
			if yyj4908 < len(yyv4908) {
				if r.TryDecodeAsNil() {
					yyv4908[yyj4908] = Event{}
				} else {
					yyv4911 := &yyv4908[yyj4908]
					yyv4911.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4908 < len(yyv4908) {
			yyv4908 = yyv4908[:yyj4908]
			yyc4908 = true
		} else if yyj4908 == 0 && yyv4908 == nil {
			yyv4908 = []Event{}
			yyc4908 = true
		}
	}
	yyh4908.End()
	if yyc4908 {
		*v = yyv4908
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4912 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4912 == nil {
			r.EncodeNil()
		} else {
			yym4913 := z.EncBinary()
			_ = yym4913
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4912) {
			} else {
				z.EncFallback(yyv4912)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4914 := *v
	yyh4914, yyl4914 := z.DecSliceHelperStart()
	var yyc4914 bool
	if yyl4914 == 0 {
		if yyv4914 == nil {
			yyv4914 = []pkg7_runtime.Object{}
			yyc4914 = true
		} else if len(yyv4914) != 0 {
			yyv4914 = yyv4914[:0]
			yyc4914 = true
		}
	} else if yyl4914 > 0 {
		var yyrr4914, yyrl4914 int
		var yyrt4914 bool
		if yyl4914 > cap(yyv4914) {

			yyrg4914 := len(yyv4914) > 0
			yyv24914 := yyv4914
			yyrl4914, yyrt4914 = z.DecInferLen(yyl4914, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4914 {
				if yyrl4914 <= cap(yyv4914) {
					yyv4914 = yyv4914[:yyrl4914]
				} else {
					yyv4914 = make([]pkg7_runtime.Object, yyrl4914)
				}
			} else {
				yyv4914 = make([]pkg7_runtime.Object, yyrl4914)
			}
			yyc4914 = true
			yyrr4914 = len(yyv4914)
			if yyrg4914 {
				copy(yyv4914, yyv24914)
			}
		} else if yyl4914 != len(yyv4914) {
			yyv4914 = yyv4914[:yyl4914]
			yyc4914 = true
		}
		yyj4914 := 0
		for ; yyj4914 < yyrr4914; yyj4914++ {
			yyh4914.ElemContainerState(yyj4914)
			if r.TryDecodeAsNil() {
				yyv4914[yyj4914] = nil
			} else {
				yyv4915 := &yyv4914[yyj4914]
				yym4916 := z.DecBinary()
				_ = yym4916
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4915) {
				} else {
					z.DecFallback(yyv4915, true)
				}
			}

		}
		if yyrt4914 {
			for ; yyj4914 < yyl4914; yyj4914++ {
				yyv4914 = append(yyv4914, nil)
				yyh4914.ElemContainerState(yyj4914)
				if r.TryDecodeAsNil() {
					yyv4914[yyj4914] = nil
				} else {
					yyv4917 := &yyv4914[yyj4914]
					yym4918 := z.DecBinary()
					_ = yym4918
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4917) {
					} else {
						z.DecFallback(yyv4917, true)
					}
				}

			}
		}

	} else {
		yyj4914 := 0
		for ; !r.CheckBreak(); yyj4914++ {

			if yyj4914 >= len(yyv4914) {
				yyv4914 = append(yyv4914, nil) // var yyz4914 pkg7_runtime.Object
				yyc4914 = true
			}
			yyh4914.ElemContainerState(yyj4914)
			if yyj4914 < len(yyv4914) {
				if r.TryDecodeAsNil() {
					yyv4914[yyj4914] = nil
				} else {
					yyv4919 := &yyv4914[yyj4914]
					yym4920 := z.DecBinary()
					_ = yym4920
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4919) {
					} else {
						z.DecFallback(yyv4919, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4914 < len(yyv4914) {
			yyv4914 = yyv4914[:yyj4914]
			yyc4914 = true
		} else if yyj4914 == 0 && yyv4914 == nil {
			yyv4914 = []pkg7_runtime.Object{}
			yyc4914 = true
		}
	}
	yyh4914.End()
	if yyc4914 {
		*v = yyv4914
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4921 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4922 := &yyv4921
		yy4922.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4923 := *v
	yyh4923, yyl4923 := z.DecSliceHelperStart()
	var yyc4923 bool
	if yyl4923 == 0 {
		if yyv4923 == nil {
			yyv4923 = []LimitRangeItem{}
			yyc4923 = true
		} else if len(yyv4923) != 0 {
			yyv4923 = yyv4923[:0]
			yyc4923 = true
		}
	} else if yyl4923 > 0 {
		var yyrr4923, yyrl4923 int
		var yyrt4923 bool
		if yyl4923 > cap(yyv4923) {

			yyrg4923 := len(yyv4923) > 0
			yyv24923 := yyv4923
			yyrl4923, yyrt4923 = z.DecInferLen(yyl4923, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4923 {
				if yyrl4923 <= cap(yyv4923) {
					yyv4923 = yyv4923[:yyrl4923]
				} else {
					yyv4923 = make([]LimitRangeItem, yyrl4923)
				}
			} else {
				yyv4923 = make([]LimitRangeItem, yyrl4923)
			}
			yyc4923 = true
			yyrr4923 = len(yyv4923)
			if yyrg4923 {
				copy(yyv4923, yyv24923)
			}
		} else if yyl4923 != len(yyv4923) {
			yyv4923 = yyv4923[:yyl4923]
			yyc4923 = true
		}
		yyj4923 := 0
		for ; yyj4923 < yyrr4923; yyj4923++ {
			yyh4923.ElemContainerState(yyj4923)
			if r.TryDecodeAsNil() {
				yyv4923[yyj4923] = LimitRangeItem{}
			} else {
				yyv4924 := &yyv4923[yyj4923]
				yyv4924.CodecDecodeSelf(d)
			}

		}
		if yyrt4923 {
			for ; yyj4923 < yyl4923; yyj4923++ {
				yyv4923 = append(yyv4923, LimitRangeItem{})
				yyh4923.ElemContainerState(yyj4923)
				if r.TryDecodeAsNil() {
					yyv4923[yyj4923] = LimitRangeItem{}
				} else {
					yyv4925 := &yyv4923[yyj4923]
					yyv4925.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4923 := 0
		for ; !r.CheckBreak(); yyj4923++ {

			if yyj4923 >= len(yyv4923) {
				yyv4923 = append(yyv4923, LimitRangeItem{}) // var yyz4923 LimitRangeItem
				yyc4923 = true
			}
			yyh4923.ElemContainerState(yyj4923)
			if yyj4923 < len(yyv4923) {
				if r.TryDecodeAsNil() {
					yyv4923[yyj4923] = LimitRangeItem{}
				} else {
					yyv4926 := &yyv4923[yyj4923]
					yyv4926.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4923 < len(yyv4923) {
			yyv4923 = yyv4923[:yyj4923]
			yyc4923 = true
		} else if yyj4923 == 0 && yyv4923 == nil {
			yyv4923 = []LimitRangeItem{}
			yyc4923 = true
		}
	}
	yyh4923.End()
	if yyc4923 {
		*v = yyv4923
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4927 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4928 := &yyv4927
		yy4928.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4929 := *v
	yyh4929, yyl4929 := z.DecSliceHelperStart()
	var yyc4929 bool
	if yyl4929 == 0 {
		if yyv4929 == nil {
			yyv4929 = []LimitRange{}
			yyc4929 = true
		} else if len(yyv4929) != 0 {
			yyv4929 = yyv4929[:0]
			yyc4929 = true
		}
	} else if yyl4929 > 0 {
		var yyrr4929, yyrl4929 int
		var yyrt4929 bool
		if yyl4929 > cap(yyv4929) {

			yyrg4929 := len(yyv4929) > 0
			yyv24929 := yyv4929
			yyrl4929, yyrt4929 = z.DecInferLen(yyl4929, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4929 {
				if yyrl4929 <= cap(yyv4929) {
					yyv4929 = yyv4929[:yyrl4929]
				} else {
					yyv4929 = make([]LimitRange, yyrl4929)
				}
			} else {
				yyv4929 = make([]LimitRange, yyrl4929)
			}
			yyc4929 = true
			yyrr4929 = len(yyv4929)
			if yyrg4929 {
				copy(yyv4929, yyv24929)
			}
		} else if yyl4929 != len(yyv4929) {
			yyv4929 = yyv4929[:yyl4929]
			yyc4929 = true
		}
		yyj4929 := 0
		for ; yyj4929 < yyrr4929; yyj4929++ {
			yyh4929.ElemContainerState(yyj4929)
			if r.TryDecodeAsNil() {
				yyv4929[yyj4929] = LimitRange{}
			} else {
				yyv4930 := &yyv4929[yyj4929]
				yyv4930.CodecDecodeSelf(d)
			}

		}
		if yyrt4929 {
			for ; yyj4929 < yyl4929; yyj4929++ {
				yyv4929 = append(yyv4929, LimitRange{})
				yyh4929.ElemContainerState(yyj4929)
				if r.TryDecodeAsNil() {
					yyv4929[yyj4929] = LimitRange{}
				} else {
					yyv4931 := &yyv4929[yyj4929]
					yyv4931.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4929 := 0
		for ; !r.CheckBreak(); yyj4929++ {

			if yyj4929 >= len(yyv4929) {
				yyv4929 = append(yyv4929, LimitRange{}) // var yyz4929 LimitRange
				yyc4929 = true
			}
			yyh4929.ElemContainerState(yyj4929)
			if yyj4929 < len(yyv4929) {
				if r.TryDecodeAsNil() {
					yyv4929[yyj4929] = LimitRange{}
				} else {
					yyv4932 := &yyv4929[yyj4929]
					yyv4932.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4929 < len(yyv4929) {
			yyv4929 = yyv4929[:yyj4929]
			yyc4929 = true
		} else if yyj4929 == 0 && yyv4929 == nil {
			yyv4929 = []LimitRange{}
			yyc4929 = true
		}
	}
	yyh4929.End()
	if yyc4929 {
		*v = yyv4929
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4933 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4933.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4934 := *v
	yyh4934, yyl4934 := z.DecSliceHelperStart()
	var yyc4934 bool
	if yyl4934 == 0 {
		if yyv4934 == nil {
			yyv4934 = []ResourceQuotaScope{}
			yyc4934 = true
		} else if len(yyv4934) != 0 {
			yyv4934 = yyv4934[:0]
			yyc4934 = true
		}
	} else if yyl4934 > 0 {
		var yyrr4934, yyrl4934 int
		var yyrt4934 bool
		if yyl4934 > cap(yyv4934) {

			yyrl4934, yyrt4934 = z.DecInferLen(yyl4934, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4934 {
				if yyrl4934 <= cap(yyv4934) {
					yyv4934 = yyv4934[:yyrl4934]
				} else {
					yyv4934 = make([]ResourceQuotaScope, yyrl4934)
				}
			} else {
				yyv4934 = make([]ResourceQuotaScope, yyrl4934)
			}
			yyc4934 = true
			yyrr4934 = len(yyv4934)
		} else if yyl4934 != len(yyv4934) {
			yyv4934 = yyv4934[:yyl4934]
			yyc4934 = true
		}
		yyj4934 := 0
		for ; yyj4934 < yyrr4934; yyj4934++ {
			yyh4934.ElemContainerState(yyj4934)
			if r.TryDecodeAsNil() {
				yyv4934[yyj4934] = ""
			} else {
				yyv4934[yyj4934] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4934 {
			for ; yyj4934 < yyl4934; yyj4934++ {
				yyv4934 = append(yyv4934, "")
				yyh4934.ElemContainerState(yyj4934)
				if r.TryDecodeAsNil() {
					yyv4934[yyj4934] = ""
				} else {
					yyv4934[yyj4934] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4934 := 0
		for ; !r.CheckBreak(); yyj4934++ {

			if yyj4934 >= len(yyv4934) {
				yyv4934 = append(yyv4934, "") // var yyz4934 ResourceQuotaScope
				yyc4934 = true
			}
			yyh4934.ElemContainerState(yyj4934)
			if yyj4934 < len(yyv4934) {
				if r.TryDecodeAsNil() {
					yyv4934[yyj4934] = ""
				} else {
					yyv4934[yyj4934] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4934 < len(yyv4934) {
			yyv4934 = yyv4934[:yyj4934]
			yyc4934 = true
		} else if yyj4934 == 0 && yyv4934 == nil {
			yyv4934 = []ResourceQuotaScope{}
			yyc4934 = true
		}
	}
	yyh4934.End()
	if yyc4934 {
		*v = yyv4934
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4938 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4939 := &yyv4938
		yy4939.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4940 := *v
	yyh4940, yyl4940 := z.DecSliceHelperStart()
	var yyc4940 bool
	if yyl4940 == 0 {
		if yyv4940 == nil {
			yyv4940 = []ResourceQuota{}
			yyc4940 = true
		} else if len(yyv4940) != 0 {
			yyv4940 = yyv4940[:0]
			yyc4940 = true
		}
	} else if yyl4940 > 0 {
		var yyrr4940, yyrl4940 int
		var yyrt4940 bool
		if yyl4940 > cap(yyv4940) {

			yyrg4940 := len(yyv4940) > 0
			yyv24940 := yyv4940
			yyrl4940, yyrt4940 = z.DecInferLen(yyl4940, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4940 {
				if yyrl4940 <= cap(yyv4940) {
					yyv4940 = yyv4940[:yyrl4940]
				} else {
					yyv4940 = make([]ResourceQuota, yyrl4940)
				}
			} else {
				yyv4940 = make([]ResourceQuota, yyrl4940)
			}
			yyc4940 = true
			yyrr4940 = len(yyv4940)
			if yyrg4940 {
				copy(yyv4940, yyv24940)
			}
		} else if yyl4940 != len(yyv4940) {
			yyv4940 = yyv4940[:yyl4940]
			yyc4940 = true
		}
		yyj4940 := 0
		for ; yyj4940 < yyrr4940; yyj4940++ {
			yyh4940.ElemContainerState(yyj4940)
			if r.TryDecodeAsNil() {
				yyv4940[yyj4940] = ResourceQuota{}
			} else {
				yyv4941 := &yyv4940[yyj4940]
				yyv4941.CodecDecodeSelf(d)
			}

		}
		if yyrt4940 {
			for ; yyj4940 < yyl4940; yyj4940++ {
				yyv4940 = append(yyv4940, ResourceQuota{})
				yyh4940.ElemContainerState(yyj4940)
				if r.TryDecodeAsNil() {
					yyv4940[yyj4940] = ResourceQuota{}
				} else {
					yyv4942 := &yyv4940[yyj4940]
					yyv4942.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4940 := 0
		for ; !r.CheckBreak(); yyj4940++ {

			if yyj4940 >= len(yyv4940) {
				yyv4940 = append(yyv4940, ResourceQuota{}) // var yyz4940 ResourceQuota
				yyc4940 = true
			}
			yyh4940.ElemContainerState(yyj4940)
			if yyj4940 < len(yyv4940) {
				if r.TryDecodeAsNil() {
					yyv4940[yyj4940] = ResourceQuota{}
				} else {
					yyv4943 := &yyv4940[yyj4940]
					yyv4943.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4940 < len(yyv4940) {
			yyv4940 = yyv4940[:yyj4940]
			yyc4940 = true
		} else if yyj4940 == 0 && yyv4940 == nil {
			yyv4940 = []ResourceQuota{}
			yyc4940 = true
		}
	}
	yyh4940.End()
	if yyc4940 {
		*v = yyv4940
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4944, yyv4944 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4945 := z.EncBinary()
		_ = yym4945
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4944))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4944 == nil {
			r.EncodeNil()
		} else {
			yym4946 := z.EncBinary()
			_ = yym4946
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4944))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4947 := *v
	yyl4947 := r.ReadMapStart()
	yybh4947 := z.DecBasicHandle()
	if yyv4947 == nil {
		yyrl4947, _ := z.DecInferLen(yyl4947, yybh4947.MaxInitLen, 40)
		yyv4947 = make(map[string][]uint8, yyrl4947)
		*v = yyv4947
	}
	var yymk4947 string
	var yymv4947 []uint8
	var yymg4947 bool
	if yybh4947.MapValueReset {
		yymg4947 = true
	}
	if yyl4947 > 0 {
		for yyj4947 := 0; yyj4947 < yyl4947; yyj4947++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4947 = ""
			} else {
				yymk4947 = string(r.DecodeString())
			}

			if yymg4947 {
				yymv4947 = yyv4947[yymk4947]
			} else {
				yymv4947 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4947 = nil
			} else {
				yyv4949 := &yymv4947
				yym4950 := z.DecBinary()
				_ = yym4950
				if false {
				} else {
					*yyv4949 = r.DecodeBytes(*(*[]byte)(yyv4949), false, false)
				}
			}

			if yyv4947 != nil {
				yyv4947[yymk4947] = yymv4947
			}
		}
	} else if yyl4947 < 0 {
		for yyj4947 := 0; !r.CheckBreak(); yyj4947++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4947 = ""
			} else {
				yymk4947 = string(r.DecodeString())
			}

			if yymg4947 {
				yymv4947 = yyv4947[yymk4947]
			} else {
				yymv4947 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4947 = nil
			} else {
				yyv4952 := &yymv4947
				yym4953 := z.DecBinary()
				_ = yym4953
				if false {
				} else {
					*yyv4952 = r.DecodeBytes(*(*[]byte)(yyv4952), false, false)
				}
			}

			if yyv4947 != nil {
				yyv4947[yymk4947] = yymv4947
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4954 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4955 := &yyv4954
		yy4955.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4956 := *v
	yyh4956, yyl4956 := z.DecSliceHelperStart()
	var yyc4956 bool
	if yyl4956 == 0 {
		if yyv4956 == nil {
			yyv4956 = []Secret{}
			yyc4956 = true
		} else if len(yyv4956) != 0 {
			yyv4956 = yyv4956[:0]
			yyc4956 = true
		}
	} else if yyl4956 > 0 {
		var yyrr4956, yyrl4956 int
		var yyrt4956 bool
		if yyl4956 > cap(yyv4956) {

			yyrg4956 := len(yyv4956) > 0
			yyv24956 := yyv4956
			yyrl4956, yyrt4956 = z.DecInferLen(yyl4956, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4956 {
				if yyrl4956 <= cap(yyv4956) {
					yyv4956 = yyv4956[:yyrl4956]
				} else {
					yyv4956 = make([]Secret, yyrl4956)
				}
			} else {
				yyv4956 = make([]Secret, yyrl4956)
			}
			yyc4956 = true
			yyrr4956 = len(yyv4956)
			if yyrg4956 {
				copy(yyv4956, yyv24956)
			}
		} else if yyl4956 != len(yyv4956) {
			yyv4956 = yyv4956[:yyl4956]
			yyc4956 = true
		}
		yyj4956 := 0
		for ; yyj4956 < yyrr4956; yyj4956++ {
			yyh4956.ElemContainerState(yyj4956)
			if r.TryDecodeAsNil() {
				yyv4956[yyj4956] = Secret{}
			} else {
				yyv4957 := &yyv4956[yyj4956]
				yyv4957.CodecDecodeSelf(d)
			}

		}
		if yyrt4956 {
			for ; yyj4956 < yyl4956; yyj4956++ {
				yyv4956 = append(yyv4956, Secret{})
				yyh4956.ElemContainerState(yyj4956)
				if r.TryDecodeAsNil() {
					yyv4956[yyj4956] = Secret{}
				} else {
					yyv4958 := &yyv4956[yyj4956]
					yyv4958.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4956 := 0
		for ; !r.CheckBreak(); yyj4956++ {

			if yyj4956 >= len(yyv4956) {
				yyv4956 = append(yyv4956, Secret{}) // var yyz4956 Secret
				yyc4956 = true
			}
			yyh4956.ElemContainerState(yyj4956)
			if yyj4956 < len(yyv4956) {
				if r.TryDecodeAsNil() {
					yyv4956[yyj4956] = Secret{}
				} else {
					yyv4959 := &yyv4956[yyj4956]
					yyv4959.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4956 < len(yyv4956) {
			yyv4956 = yyv4956[:yyj4956]
			yyc4956 = true
		} else if yyj4956 == 0 && yyv4956 == nil {
			yyv4956 = []Secret{}
			yyc4956 = true
		}
	}
	yyh4956.End()
	if yyc4956 {
		*v = yyv4956
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4960 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4961 := &yyv4960
		yy4961.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4962 := *v
	yyh4962, yyl4962 := z.DecSliceHelperStart()
	var yyc4962 bool
	if yyl4962 == 0 {
		if yyv4962 == nil {
			yyv4962 = []ConfigMap{}
			yyc4962 = true
		} else if len(yyv4962) != 0 {
			yyv4962 = yyv4962[:0]
			yyc4962 = true
		}
	} else if yyl4962 > 0 {
		var yyrr4962, yyrl4962 int
		var yyrt4962 bool
		if yyl4962 > cap(yyv4962) {

			yyrg4962 := len(yyv4962) > 0
			yyv24962 := yyv4962
			yyrl4962, yyrt4962 = z.DecInferLen(yyl4962, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4962 {
				if yyrl4962 <= cap(yyv4962) {
					yyv4962 = yyv4962[:yyrl4962]
				} else {
					yyv4962 = make([]ConfigMap, yyrl4962)
				}
			} else {
				yyv4962 = make([]ConfigMap, yyrl4962)
			}
			yyc4962 = true
			yyrr4962 = len(yyv4962)
			if yyrg4962 {
				copy(yyv4962, yyv24962)
			}
		} else if yyl4962 != len(yyv4962) {
			yyv4962 = yyv4962[:yyl4962]
			yyc4962 = true
		}
		yyj4962 := 0
		for ; yyj4962 < yyrr4962; yyj4962++ {
			yyh4962.ElemContainerState(yyj4962)
			if r.TryDecodeAsNil() {
				yyv4962[yyj4962] = ConfigMap{}
			} else {
				yyv4963 := &yyv4962[yyj4962]
				yyv4963.CodecDecodeSelf(d)
			}

		}
		if yyrt4962 {
			for ; yyj4962 < yyl4962; yyj4962++ {
				yyv4962 = append(yyv4962, ConfigMap{})
				yyh4962.ElemContainerState(yyj4962)
				if r.TryDecodeAsNil() {
					yyv4962[yyj4962] = ConfigMap{}
				} else {
					yyv4964 := &yyv4962[yyj4962]
					yyv4964.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4962 := 0
		for ; !r.CheckBreak(); yyj4962++ {

			if yyj4962 >= len(yyv4962) {
				yyv4962 = append(yyv4962, ConfigMap{}) // var yyz4962 ConfigMap
				yyc4962 = true
			}
			yyh4962.ElemContainerState(yyj4962)
			if yyj4962 < len(yyv4962) {
				if r.TryDecodeAsNil() {
					yyv4962[yyj4962] = ConfigMap{}
				} else {
					yyv4965 := &yyv4962[yyj4962]
					yyv4965.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4962 < len(yyv4962) {
			yyv4962 = yyv4962[:yyj4962]
			yyc4962 = true
		} else if yyj4962 == 0 && yyv4962 == nil {
			yyv4962 = []ConfigMap{}
			yyc4962 = true
		}
	}
	yyh4962.End()
	if yyc4962 {
		*v = yyv4962
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4966 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4967 := &yyv4966
		yy4967.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4968 := *v
	yyh4968, yyl4968 := z.DecSliceHelperStart()
	var yyc4968 bool
	if yyl4968 == 0 {
		if yyv4968 == nil {
			yyv4968 = []ComponentCondition{}
			yyc4968 = true
		} else if len(yyv4968) != 0 {
			yyv4968 = yyv4968[:0]
			yyc4968 = true
		}
	} else if yyl4968 > 0 {
		var yyrr4968, yyrl4968 int
		var yyrt4968 bool
		if yyl4968 > cap(yyv4968) {

			yyrg4968 := len(yyv4968) > 0
			yyv24968 := yyv4968
			yyrl4968, yyrt4968 = z.DecInferLen(yyl4968, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4968 {
				if yyrl4968 <= cap(yyv4968) {
					yyv4968 = yyv4968[:yyrl4968]
				} else {
					yyv4968 = make([]ComponentCondition, yyrl4968)
				}
			} else {
				yyv4968 = make([]ComponentCondition, yyrl4968)
			}
			yyc4968 = true
			yyrr4968 = len(yyv4968)
			if yyrg4968 {
				copy(yyv4968, yyv24968)
			}
		} else if yyl4968 != len(yyv4968) {
			yyv4968 = yyv4968[:yyl4968]
			yyc4968 = true
		}
		yyj4968 := 0
		for ; yyj4968 < yyrr4968; yyj4968++ {
			yyh4968.ElemContainerState(yyj4968)
			if r.TryDecodeAsNil() {
				yyv4968[yyj4968] = ComponentCondition{}
			} else {
				yyv4969 := &yyv4968[yyj4968]
				yyv4969.CodecDecodeSelf(d)
			}

		}
		if yyrt4968 {
			for ; yyj4968 < yyl4968; yyj4968++ {
				yyv4968 = append(yyv4968, ComponentCondition{})
				yyh4968.ElemContainerState(yyj4968)
				if r.TryDecodeAsNil() {
					yyv4968[yyj4968] = ComponentCondition{}
				} else {
					yyv4970 := &yyv4968[yyj4968]
					yyv4970.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4968 := 0
		for ; !r.CheckBreak(); yyj4968++ {

			if yyj4968 >= len(yyv4968) {
				yyv4968 = append(yyv4968, ComponentCondition{}) // var yyz4968 ComponentCondition
				yyc4968 = true
			}
			yyh4968.ElemContainerState(yyj4968)
			if yyj4968 < len(yyv4968) {
				if r.TryDecodeAsNil() {
					yyv4968[yyj4968] = ComponentCondition{}
				} else {
					yyv4971 := &yyv4968[yyj4968]
					yyv4971.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4968 < len(yyv4968) {
			yyv4968 = yyv4968[:yyj4968]
			yyc4968 = true
		} else if yyj4968 == 0 && yyv4968 == nil {
			yyv4968 = []ComponentCondition{}
			yyc4968 = true
		}
	}
	yyh4968.End()
	if yyc4968 {
		*v = yyv4968
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4972 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4973 := &yyv4972
		yy4973.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4974 := *v
	yyh4974, yyl4974 := z.DecSliceHelperStart()
	var yyc4974 bool
	if yyl4974 == 0 {
		if yyv4974 == nil {
			yyv4974 = []ComponentStatus{}
			yyc4974 = true
		} else if len(yyv4974) != 0 {
			yyv4974 = yyv4974[:0]
			yyc4974 = true
		}
	} else if yyl4974 > 0 {
		var yyrr4974, yyrl4974 int
		var yyrt4974 bool
		if yyl4974 > cap(yyv4974) {

			yyrg4974 := len(yyv4974) > 0
			yyv24974 := yyv4974
			yyrl4974, yyrt4974 = z.DecInferLen(yyl4974, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4974 {
				if yyrl4974 <= cap(yyv4974) {
					yyv4974 = yyv4974[:yyrl4974]
				} else {
					yyv4974 = make([]ComponentStatus, yyrl4974)
				}
			} else {
				yyv4974 = make([]ComponentStatus, yyrl4974)
			}
			yyc4974 = true
			yyrr4974 = len(yyv4974)
			if yyrg4974 {
				copy(yyv4974, yyv24974)
			}
		} else if yyl4974 != len(yyv4974) {
			yyv4974 = yyv4974[:yyl4974]
			yyc4974 = true
		}
		yyj4974 := 0
		for ; yyj4974 < yyrr4974; yyj4974++ {
			yyh4974.ElemContainerState(yyj4974)
			if r.TryDecodeAsNil() {
				yyv4974[yyj4974] = ComponentStatus{}
			} else {
				yyv4975 := &yyv4974[yyj4974]
				yyv4975.CodecDecodeSelf(d)
			}

		}
		if yyrt4974 {
			for ; yyj4974 < yyl4974; yyj4974++ {
				yyv4974 = append(yyv4974, ComponentStatus{})
				yyh4974.ElemContainerState(yyj4974)
				if r.TryDecodeAsNil() {
					yyv4974[yyj4974] = ComponentStatus{}
				} else {
					yyv4976 := &yyv4974[yyj4974]
					yyv4976.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4974 := 0
		for ; !r.CheckBreak(); yyj4974++ {

			if yyj4974 >= len(yyv4974) {
				yyv4974 = append(yyv4974, ComponentStatus{}) // var yyz4974 ComponentStatus
				yyc4974 = true
			}
			yyh4974.ElemContainerState(yyj4974)
			if yyj4974 < len(yyv4974) {
				if r.TryDecodeAsNil() {
					yyv4974[yyj4974] = ComponentStatus{}
				} else {
					yyv4977 := &yyv4974[yyj4974]
					yyv4977.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4974 < len(yyv4974) {
			yyv4974 = yyv4974[:yyj4974]
			yyc4974 = true
		} else if yyj4974 == 0 && yyv4974 == nil {
			yyv4974 = []ComponentStatus{}
			yyc4974 = true
		}
	}
	yyh4974.End()
	if yyc4974 {
		*v = yyv4974
	}
}
